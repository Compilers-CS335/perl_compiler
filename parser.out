Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    FORMAT
    COMMENT
    TRANSLATION
    GOTO
    FOREACH
    ELSIF
    SUBSTITUTE
    SELECT
    FILE_HANDLING_OPTIONS
    COLON
    UNLESS
    DECREMENT_OP
    WHITESPACE
    QUESTION_MARK
    REDO
    HASH
    WRITE
    MATCH
    INCREMENT_OP
<<<<<<< HEAD
    CLOSE_BRACKET
=======
    DO
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SYSTEM_COMMAND
    CONTINUE

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     start -> statements
Rule 3     block -> BLOCK_BEGIN statements BLOCK_ENDS
Rule 4     statements -> statement statements
Rule 5     statements -> statement
Rule 6     empty -> <empty>
Rule 7     statement -> assignment Marker
Rule 8     statement -> declaration Marker
<<<<<<< HEAD
Rule 9     statement -> returnStatement Marker
Rule 10    statement -> functionCall Marker SEMICOLON
Rule 11    statement -> whileStatement Marker
Rule 12    statement -> forStatement Marker
Rule 13    statement -> printStatement Marker
Rule 14    statement -> functionStatement Marker
Rule 15    statement -> lastStatement Marker
Rule 16    statement -> nextStatement Marker
Rule 17    statement -> ifthen Marker
Rule 18    statement -> ifthenelse Marker
Rule 19    statement -> useStatement Marker
Rule 20    statement -> untillStatement Marker
Rule 21    statement -> dowhileStatement Marker
Rule 22    statement -> inputStatement Marker
Rule 23    statement -> switchStatement Marker
Rule 24    useStatement -> USE IDENTIFIER SEMICOLON
Rule 25    switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
Rule 26    caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
Rule 27    caselist -> ELSE block
Rule 28    caselist -> empty
Rule 29    inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
Rule 30    ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
Rule 31    ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
Rule 32    Markerif -> empty
Rule 33    Markerelse -> empty
Rule 34    lastStatement -> LAST SEMICOLON
Rule 35    nextStatement -> NEXT SEMICOLON
Rule 36    functionStatement -> SUB IDENTIFIER Markerscope block
Rule 37    Markerscope -> empty
Rule 38    functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
Rule 39    printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
Rule 40    printStatement -> PRINT expression SEMICOLON
Rule 41    returnStatement -> RETURN expression SEMICOLON
Rule 42    assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 43    assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 44    assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 45    assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
Rule 46    whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
Rule 47    Markerwhile -> empty
Rule 48    dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
Rule 49    Markerdowhile -> empty
Rule 50    untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
Rule 51    Markeruntil -> empty
=======
Rule 9     statement -> array_assignment Marker
Rule 10    statement -> returnStatement Marker
Rule 11    statement -> functionCall Marker SEMICOLON
Rule 12    statement -> whileStatement Marker
Rule 13    statement -> forStatement Marker
Rule 14    statement -> printStatement Marker
Rule 15    statement -> functionStatement Marker
Rule 16    statement -> lastStatement Marker
Rule 17    statement -> nextStatement Marker
Rule 18    statement -> ifthen Marker
Rule 19    statement -> ifthenelse Marker
Rule 20    statement -> useStatement Marker
Rule 21    statement -> switchStatement Marker
Rule 22    useStatement -> USE IDENTIFIER SEMICOLON
Rule 23    switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
Rule 24    caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
Rule 25    caselist -> ELSE block
Rule 26    caselist -> empty
Rule 27    ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
Rule 28    ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
Rule 29    Markerif -> empty
Rule 30    Markerelse -> empty
Rule 31    lastStatement -> LAST SEMICOLON
Rule 32    nextStatement -> NEXT SEMICOLON
Rule 33    functionStatement -> SUB IDENTIFIER Markerscope block
Rule 34    Markerscope -> empty
Rule 35    functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
Rule 36    printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
Rule 37    printStatement -> PRINT expression SEMICOLON
Rule 38    returnStatement -> RETURN expression SEMICOLON
Rule 39    assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 40    assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON
Rule 41    assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 42    assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 43    assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
Rule 44    declaration -> VARIABLE decList SEMICOLON
Rule 45    declaration -> PRIVATE VARIABLE decList SEMICOLON
Rule 46    declaration -> LOCAL VARIABLE decList SEMICOLON
Rule 47    decList -> COMMA VARIABLE decList
Rule 48    decList -> empty
Rule 49    term -> functionCall
Rule 50    whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
Rule 51    Markerwhile -> empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
Rule 52    forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
Rule 53    forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
Rule 54    Markerfor2 -> empty
Rule 55    Markerfor -> empty
Rule 56    assignment -> empty
<<<<<<< HEAD
Rule 57    declaration -> VARIABLE decList SEMICOLON
Rule 58    declaration -> PRIVATE VARIABLE decList SEMICOLON
Rule 59    declaration -> LOCAL VARIABLE decList SEMICOLON
Rule 60    decList -> COMMA VARIABLE decList
Rule 61    decList -> empty
Rule 62    term -> functionCall
Rule 63    string -> STRING
Rule 64    string -> RES_STRING
Rule 65    number -> NUMBER
Rule 66    number -> SCI_NOT
Rule 67    number -> FLOAT
Rule 68    number -> HEXADECIMAL
Rule 69    number -> OCTAL
Rule 70    term -> number
Rule 71    term -> string
Rule 72    term -> VARIABLE
Rule 73    term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
Rule 74    expression -> PLUS_OP expression
Rule 75    expression -> MINUS_OP expression
Rule 76    expression -> BIT_FLIP expression
Rule 77    expression -> NOT_OP expression
Rule 78    expression -> empty
Rule 79    expression -> term
Rule 80    expression -> expression OR_STR_OP expression
Rule 81    expression -> expression XOR_STR_OP expression
Rule 82    expression -> expression AND_STR_OP expression
Rule 83    expression -> expression NOT_STR_OP expression
Rule 84    expression -> expression COMPARE_OP expression
Rule 85    expression -> expression BIT_OR expression
Rule 86    expression -> expression BIT_XOR expression
Rule 87    expression -> expression BIT_AND expression
Rule 88    expression -> expression AND_OP Marker expression
Rule 89    expression -> expression OR_OP Marker expression
Rule 90    expression -> expression EQUALS_OP expression
Rule 91    expression -> expression NOT_EQUALS_OP expression
Rule 92    expression -> expression GREATER_OP expression
Rule 93    expression -> expression LESS_OP expression
Rule 94    expression -> expression GREATER_EQUAL_OP expression
Rule 95    expression -> expression LESS_EQUAL_OP expression
Rule 96    Marker -> empty
Rule 97    expression -> expression PLUS_OP expression
Rule 98    expression -> expression MINUS_OP expression
Rule 99    expression -> expression MULTIPLICATION_OP expression
Rule 100   expression -> expression DIVISION_OP expression
Rule 101   expression -> expression MODULUS_OP expression
Rule 102   expression -> expression EXPONENT_OP expression
Rule 103   expression -> expression BIT_RIGHT_SHIFT expression
Rule 104   expression -> expression BIT_LEFT_SHIFT expression
Rule 105   expression -> expression CONCATENATE expression
Rule 106   expression -> expression REP_OP expression
Rule 107   expression -> expression COMMA expression
Rule 108   expression -> expression ASSOCIATE_OP expression
Rule 109   expression -> expression RANGE_OP expression
Rule 110   expression -> expression SEARCH_MODIFY expression
Rule 111   expression -> expression SEARCH_MODIFY_NEG expression

Terminals, with rules where they appear

ADV_ASSIGNMENT_OP    : 45 53
AND_OP               : 88
AND_STR_OP           : 82
ARRAY                : 
ASSIGNMENT_OP        : 29 42 43 44 52
ASSOCIATE_OP         : 108
BIT_AND              : 87
BIT_FLIP             : 76
BIT_LEFT_SHIFT       : 104
BIT_OR               : 85
BIT_RIGHT_SHIFT      : 103
BIT_XOR              : 86
BLOCK_BEGIN          : 3 25
BLOCK_ENDS           : 3 25
CASE                 : 26
CLOSE_BRACKET        : 
CLOSE_PARANTHESIS    : 26 30 31 38 39 46 48 50 52 53 73
COLON                : 
COMMA                : 60 107
COMMENT              : 
COMPARE_OP           : 84
CONCATENATE          : 105
CONTINUE             : 
DECREMENT_OP         : 
DIVISION_OP          : 100
DO                   : 48
ELSE                 : 27 31
ELSIF                : 
EQUALS_OP            : 90
EXPONENT_OP          : 102
FILE_HANDLING_OPTIONS : 
FLOAT                : 67
=======
Rule 57    string -> STRING
Rule 58    string -> RES_STRING
Rule 59    number -> NUMBER
Rule 60    number -> SCI_NOT
Rule 61    number -> FLOAT
Rule 62    number -> HEXADECIMAL
Rule 63    number -> OCTAL
Rule 64    term -> number
Rule 65    term -> string
Rule 66    term -> VARIABLE
Rule 67    term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
Rule 68    term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
Rule 69    array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
Rule 70    arrayList -> COMMA expression arrayList
Rule 71    arrayList -> COMMA expression
Rule 72    expression -> PLUS_OP expression
Rule 73    expression -> MINUS_OP expression
Rule 74    expression -> BIT_FLIP expression
Rule 75    expression -> NOT_OP expression
Rule 76    expression -> empty
Rule 77    expression -> term
Rule 78    expression -> expression OR_STR_OP expression
Rule 79    expression -> expression XOR_STR_OP expression
Rule 80    expression -> expression AND_STR_OP expression
Rule 81    expression -> expression NOT_STR_OP expression
Rule 82    expression -> expression COMPARE_OP expression
Rule 83    expression -> expression BIT_OR expression
Rule 84    expression -> expression BIT_XOR expression
Rule 85    expression -> expression BIT_AND expression
Rule 86    expression -> expression AND_OP Marker expression
Rule 87    expression -> expression OR_OP Marker expression
Rule 88    expression -> expression EQUALS_OP expression
Rule 89    expression -> expression NOT_EQUALS_OP expression
Rule 90    expression -> expression GREATER_OP expression
Rule 91    expression -> expression LESS_OP expression
Rule 92    expression -> expression GREATER_EQUAL_OP expression
Rule 93    expression -> expression LESS_EQUAL_OP expression
Rule 94    Marker -> empty
Rule 95    expression -> expression PLUS_OP expression
Rule 96    expression -> expression MINUS_OP expression
Rule 97    expression -> expression MULTIPLICATION_OP expression
Rule 98    expression -> expression DIVISION_OP expression
Rule 99    expression -> expression MODULUS_OP expression
Rule 100   expression -> expression EXPONENT_OP expression
Rule 101   expression -> expression BIT_RIGHT_SHIFT expression
Rule 102   expression -> expression BIT_LEFT_SHIFT expression
Rule 103   expression -> expression CONCATENATE expression
Rule 104   expression -> expression REP_OP expression
Rule 105   expression -> expression ASSOCIATE_OP expression
Rule 106   expression -> expression RANGE_OP expression
Rule 107   expression -> expression SEARCH_MODIFY expression
Rule 108   expression -> expression SEARCH_MODIFY_NEG expression

Terminals, with rules where they appear

ADV_ASSIGNMENT_OP    : 43 53
AND_OP               : 86
AND_STR_OP           : 80
ARRAY                : 40 68 69
ASSIGNMENT_OP        : 39 40 41 42 52 69
ASSOCIATE_OP         : 105
BIT_AND              : 85
BIT_FLIP             : 74
BIT_LEFT_SHIFT       : 102
BIT_OR               : 83
BIT_RIGHT_SHIFT      : 101
BIT_XOR              : 84
BLOCK_BEGIN          : 3 23
BLOCK_ENDS           : 3 23
CASE                 : 24
CLOSE_BRACKET        : 40 68
CLOSE_PARANTHESIS    : 24 27 28 35 36 50 52 53 67 69
COLON                : 
COMMA                : 47 70 71
COMMENT              : 
COMPARE_OP           : 82
CONCATENATE          : 103
CONTINUE             : 
DECREMENT_OP         : 
DIVISION_OP          : 98
DO                   : 
ELSE                 : 25 28
ELSIF                : 
EQUALS_OP            : 88
EXPONENT_OP          : 100
FILE_HANDLING_OPTIONS : 
FLOAT                : 61
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
FOR                  : 52 53
FOREACH              : 
FORMAT               : 
GOTO                 : 
<<<<<<< HEAD
GREATER_EQUAL_OP     : 94
GREATER_OP           : 92
HASH                 : 
HEXADECIMAL          : 68
IDENTIFIER           : 24 36 38
IF                   : 30 31
INCREMENT_OP         : 
LAST                 : 34
LESS_EQUAL_OP        : 95
LESS_OP              : 93
LOCAL                : 43 59
MATCH                : 
MINUS_OP             : 75 98
MODULUS_OP           : 101
MULTIPLICATION_OP    : 99
NEXT                 : 35
NOT_EQUALS_OP        : 91
NOT_OP               : 77
NOT_STR_OP           : 83
NUMBER               : 65
OCTAL                : 69
OPEN_BRACKET         : 
OPEN_PARANTHESIS     : 26 30 31 38 39 46 48 50 52 53 73
OR_OP                : 89
OR_STR_OP            : 80
PLUS_OP              : 74 97
PRINT                : 39 40
PRIVATE              : 44 58
QUESTION_MARK        : 
RANGE_OP             : 109
REDO                 : 
REP_OP               : 106
RES_STRING           : 64
RETURN               : 41
SCI_NOT              : 66
SEARCH_MODIFY        : 110
SEARCH_MODIFY_NEG    : 111
SELECT               : 
SEMICOLON            : 10 24 29 34 35 39 40 41 42 43 44 45 48 52 53 57 58 59
STRING               : 63
SUB                  : 36
SUBSTITUTE           : 
SWITCH               : 25
SYSTEM_COMMAND       : 
TRANSLATION          : 
UNLESS               : 
UNTIL                : 50
USE                  : 24
USER_INPUT_OP        : 29
VARIABLE             : 29 42 43 44 45 52 53 57 58 59 60 72
WHILE                : 46 48
WHITESPACE           : 
WRITE                : 
XOR_STR_OP           : 81
=======
GREATER_EQUAL_OP     : 92
GREATER_OP           : 90
HASH                 : 
HEXADECIMAL          : 62
IDENTIFIER           : 22 33 35
IF                   : 27 28
INCREMENT_OP         : 
LAST                 : 31
LESS_EQUAL_OP        : 93
LESS_OP              : 91
LOCAL                : 41 46
MATCH                : 
MINUS_OP             : 73 96
MODULUS_OP           : 99
MULTIPLICATION_OP    : 97
NEXT                 : 32
NOT_EQUALS_OP        : 89
NOT_OP               : 75
NOT_STR_OP           : 81
NUMBER               : 40 59 68
OCTAL                : 63
OPEN_BRACKET         : 40 68
OPEN_PARANTHESIS     : 24 27 28 35 36 50 52 53 67 69
OR_OP                : 87
OR_STR_OP            : 78
PLUS_OP              : 72 95
PRINT                : 36 37
PRIVATE              : 42 45
QUESTION_MARK        : 
RANGE_OP             : 106
REDO                 : 
REP_OP               : 104
RES_STRING           : 58
RETURN               : 38
SCI_NOT              : 60
SEARCH_MODIFY        : 107
SEARCH_MODIFY_NEG    : 108
SELECT               : 
SEMICOLON            : 11 22 31 32 36 37 38 39 40 41 42 43 44 45 46 52 53 69
STRING               : 57
SUB                  : 33
SUBSTITUTE           : 
SWITCH               : 23
SYSTEM_COMMAND       : 
TRANSLATION          : 
UNLESS               : 
UNTIL                : 
USE                  : 22
USER_INPUT_OP        : 
VARIABLE             : 39 41 42 43 44 45 46 47 52 53 66
WHILE                : 50
WHITESPACE           : 
WRITE                : 
XOR_STR_OP           : 79
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
error                : 

Nonterminals, with rules where they appear

<<<<<<< HEAD
Marker               : 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 30 31 46 48 50 52 52 53 53 88 89
Markerdowhile        : 48
Markerelse           : 31
Markerfor            : 52 53
Markerfor2           : 
Markerif             : 30 31
Markerscope          : 36
Markeruntil          : 50
Markerwhile          : 46
assignment           : 7 52 53
block                : 1 26 27 30 31 31 36 46 48 50 52 53
caselist             : 25 26
decList              : 57 58 59 60
declaration          : 8
dowhileStatement     : 21
empty                : 28 32 33 37 47 49 51 54 55 56 61 78 96
expression           : 25 26 30 31 39 40 41 42 43 44 45 46 48 50 52 52 53 53 73 74 75 76 77 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 111 111
forStatement         : 12
functionCall         : 10 62
functionStatement    : 14
ifthen               : 17
ifthenelse           : 18
inputStatement       : 22
lastStatement        : 15
nextStatement        : 16
number               : 70
printStatement       : 13
returnStatement      : 9
start                : 0
statement            : 4 5
statements           : 2 3 4
string               : 71
switchStatement      : 23
term                 : 79
untillStatement      : 20
useStatement         : 19
whileStatement       : 11
=======
Marker               : 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 27 28 50 52 52 53 53 86 87
Markerelse           : 28
Markerfor            : 52 53
Markerfor2           : 
Markerif             : 27 28
Markerscope          : 33
Markerwhile          : 50
arrayList            : 69 70
array_assignment     : 9
assignment           : 7 52 53
block                : 1 24 25 27 28 28 33 50 52 53
caselist             : 23 24
decList              : 44 45 46 47
declaration          : 8
empty                : 26 29 30 34 48 51 54 55 56 76 94
expression           : 23 24 27 28 36 37 38 39 40 41 42 43 50 52 52 53 53 67 69 70 71 72 73 74 75 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108
forStatement         : 13
functionCall         : 11 49
functionStatement    : 15
ifthen               : 18
ifthenelse           : 19
lastStatement        : 16
nextStatement        : 17
number               : 64
printStatement       : 14
returnStatement      : 10
start                : 0
statement            : 4 5
statements           : 2 3 4
string               : 65
switchStatement      : 21
term                 : 77
useStatement         : 20
whileStatement       : 12
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) start -> . statements
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
<<<<<<< HEAD
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker SEMICOLON
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . untillStatement Marker
    (21) statement -> . dowhileStatement Marker
    (22) statement -> . inputStatement Marker
    (23) statement -> . switchStatement Marker
    (42) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (44) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (45) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (56) assignment -> . empty
    (57) declaration -> . VARIABLE decList SEMICOLON
    (58) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (59) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (41) returnStatement -> . RETURN expression SEMICOLON
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (46) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (52) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (39) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (40) printStatement -> . PRINT expression SEMICOLON
    (36) functionStatement -> . SUB IDENTIFIER Markerscope block
    (34) lastStatement -> . LAST SEMICOLON
    (35) nextStatement -> . NEXT SEMICOLON
    (30) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (31) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (24) useStatement -> . USE IDENTIFIER SEMICOLON
    (50) untillStatement -> . UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
    (48) dowhileStatement -> . DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (29) inputStatement -> . VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
    (25) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
=======
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . switchStatement Marker
    (39) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (42) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (56) assignment -> . empty
    (44) declaration -> . VARIABLE decList SEMICOLON
    (45) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (46) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (69) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (38) returnStatement -> . RETURN expression SEMICOLON
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (50) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (52) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (36) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (37) printStatement -> . PRINT expression SEMICOLON
    (33) functionStatement -> . SUB IDENTIFIER Markerscope block
    (31) lastStatement -> . LAST SEMICOLON
    (32) nextStatement -> . NEXT SEMICOLON
    (27) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (22) useStatement -> . USE IDENTIFIER SEMICOLON
    (23) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for LAST resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
    BLOCK_BEGIN     shift and go to state 7
<<<<<<< HEAD
    VARIABLE        shift and go to state 34
    LOCAL           shift and go to state 36
    PRIVATE         shift and go to state 19
    RETURN          shift and go to state 12
    IDENTIFIER      shift and go to state 26
    WHILE           shift and go to state 9
    FOR             shift and go to state 29
    PRINT           shift and go to state 11
    SUB             shift and go to state 14
    LAST            shift and go to state 15
    NEXT            shift and go to state 20
    IF              shift and go to state 37
    USE             shift and go to state 2
    UNTIL           shift and go to state 8
    DO              shift and go to state 5
    SWITCH          shift and go to state 18
=======
    VARIABLE        shift and go to state 30
    ARRAY           shift and go to state 5
    LOCAL           shift and go to state 32
    PRIVATE         shift and go to state 15
    RETURN          shift and go to state 10
    IDENTIFIER      shift and go to state 22
    WHILE           shift and go to state 8
    FOR             shift and go to state 24
    PRINT           shift and go to state 9
    SUB             shift and go to state 12
    LAST            shift and go to state 13
    NEXT            shift and go to state 16
    IF              shift and go to state 33
    USE             shift and go to state 2
    SWITCH          shift and go to state 35
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    $end            reduce using rule 6 (empty -> .)

  ! VARIABLE        [ reduce using rule 6 (empty -> .) ]
  ! ARRAY           [ reduce using rule 6 (empty -> .) ]
  ! LOCAL           [ reduce using rule 6 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! SUB             [ reduce using rule 6 (empty -> .) ]
  ! LAST            [ reduce using rule 6 (empty -> .) ]
  ! NEXT            [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! USE             [ reduce using rule 6 (empty -> .) ]
  ! UNTIL           [ reduce using rule 6 (empty -> .) ]
  ! DO              [ reduce using rule 6 (empty -> .) ]
  ! SWITCH          [ reduce using rule 6 (empty -> .) ]

    forStatement                   shift and go to state 1
    statements                     shift and go to state 3
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 6
<<<<<<< HEAD
    inputStatement                 shift and go to state 10
    ifthen                         shift and go to state 13
    dowhileStatement               shift and go to state 16
    nextStatement                  shift and go to state 17
    start                          shift and go to state 21
    lastStatement                  shift and go to state 22
    useStatement                   shift and go to state 23
    statement                      shift and go to state 24
    printStatement                 shift and go to state 25
    untillStatement                shift and go to state 27
    empty                          shift and go to state 38
    ifthenelse                     shift and go to state 28
    assignment                     shift and go to state 30
    whileStatement                 shift and go to state 31
    functionCall                   shift and go to state 32
    declaration                    shift and go to state 33
    returnStatement                shift and go to state 35
    block                          shift and go to state 39

state 1

    (12) statement -> forStatement . Marker
    (96) Marker -> . empty
=======
    ifthen                         shift and go to state 11
    nextStatement                  shift and go to state 14
    start                          shift and go to state 17
    lastStatement                  shift and go to state 18
    useStatement                   shift and go to state 19
    statement                      shift and go to state 20
    printStatement                 shift and go to state 21
    empty                          shift and go to state 34
    ifthenelse                     shift and go to state 23
    assignment                     shift and go to state 25
    whileStatement                 shift and go to state 26
    array_assignment               shift and go to state 27
    functionCall                   shift and go to state 28
    declaration                    shift and go to state 29
    returnStatement                shift and go to state 31
    block                          shift and go to state 36

state 1

    (13) statement -> forStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 40
    empty                          shift and go to state 41

state 2

    (24) useStatement -> USE . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 42
=======
    Marker                         shift and go to state 37
    empty                          shift and go to state 38

state 2

    (22) useStatement -> USE . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 39
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 3

    (2) start -> statements .

    $end            reduce using rule 2 (start -> statements .)


state 4

<<<<<<< HEAD
    (14) statement -> functionStatement . Marker
    (96) Marker -> . empty
=======
    (15) statement -> functionStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 43
    empty                          shift and go to state 41

state 5

    (48) dowhileStatement -> DO . block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 44

state 6

    (23) statement -> switchStatement . Marker
    (96) Marker -> . empty
=======
    Marker                         shift and go to state 40
    empty                          shift and go to state 38

state 5

    (40) assignment -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON
    (69) array_assignment -> ARRAY . ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON

    OPEN_BRACKET    shift and go to state 41
    ASSIGNMENT_OP   shift and go to state 42


state 6

    (21) statement -> switchStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 45
    empty                          shift and go to state 41
=======
    Marker                         shift and go to state 43
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 7

    (3) block -> BLOCK_BEGIN . statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
<<<<<<< HEAD
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker SEMICOLON
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . untillStatement Marker
    (21) statement -> . dowhileStatement Marker
    (22) statement -> . inputStatement Marker
    (23) statement -> . switchStatement Marker
    (42) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (44) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (45) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (56) assignment -> . empty
    (57) declaration -> . VARIABLE decList SEMICOLON
    (58) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (59) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (41) returnStatement -> . RETURN expression SEMICOLON
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (46) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (52) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (39) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (40) printStatement -> . PRINT expression SEMICOLON
    (36) functionStatement -> . SUB IDENTIFIER Markerscope block
    (34) lastStatement -> . LAST SEMICOLON
    (35) nextStatement -> . NEXT SEMICOLON
    (30) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (31) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (24) useStatement -> . USE IDENTIFIER SEMICOLON
    (50) untillStatement -> . UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
    (48) dowhileStatement -> . DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (29) inputStatement -> . VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
    (25) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
=======
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . switchStatement Marker
    (39) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (42) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (56) assignment -> . empty
    (44) declaration -> . VARIABLE decList SEMICOLON
    (45) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (46) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (69) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (38) returnStatement -> . RETURN expression SEMICOLON
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (50) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (52) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (36) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (37) printStatement -> . PRINT expression SEMICOLON
    (33) functionStatement -> . SUB IDENTIFIER Markerscope block
    (31) lastStatement -> . LAST SEMICOLON
    (32) nextStatement -> . NEXT SEMICOLON
    (27) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (22) useStatement -> . USE IDENTIFIER SEMICOLON
    (23) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for LAST resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
<<<<<<< HEAD
    VARIABLE        shift and go to state 34
    LOCAL           shift and go to state 36
    PRIVATE         shift and go to state 19
    RETURN          shift and go to state 12
    IDENTIFIER      shift and go to state 26
    WHILE           shift and go to state 9
    FOR             shift and go to state 29
    PRINT           shift and go to state 11
    SUB             shift and go to state 14
    LAST            shift and go to state 15
    NEXT            shift and go to state 20
    IF              shift and go to state 37
    USE             shift and go to state 2
    UNTIL           shift and go to state 8
    DO              shift and go to state 5
    SWITCH          shift and go to state 18
=======
    VARIABLE        shift and go to state 30
    ARRAY           shift and go to state 5
    LOCAL           shift and go to state 32
    PRIVATE         shift and go to state 15
    RETURN          shift and go to state 10
    IDENTIFIER      shift and go to state 22
    WHILE           shift and go to state 8
    FOR             shift and go to state 24
    PRINT           shift and go to state 9
    SUB             shift and go to state 12
    LAST            shift and go to state 13
    NEXT            shift and go to state 16
    IF              shift and go to state 33
    USE             shift and go to state 2
    SWITCH          shift and go to state 35
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

  ! VARIABLE        [ reduce using rule 6 (empty -> .) ]
  ! ARRAY           [ reduce using rule 6 (empty -> .) ]
  ! LOCAL           [ reduce using rule 6 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! SUB             [ reduce using rule 6 (empty -> .) ]
  ! LAST            [ reduce using rule 6 (empty -> .) ]
  ! NEXT            [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! USE             [ reduce using rule 6 (empty -> .) ]
  ! UNTIL           [ reduce using rule 6 (empty -> .) ]
  ! DO              [ reduce using rule 6 (empty -> .) ]
  ! SWITCH          [ reduce using rule 6 (empty -> .) ]

    forStatement                   shift and go to state 1
<<<<<<< HEAD
    statements                     shift and go to state 46
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 6
    inputStatement                 shift and go to state 10
    ifthen                         shift and go to state 13
    dowhileStatement               shift and go to state 16
    nextStatement                  shift and go to state 17
    lastStatement                  shift and go to state 22
    useStatement                   shift and go to state 23
    statement                      shift and go to state 24
    printStatement                 shift and go to state 25
    untillStatement                shift and go to state 27
    empty                          shift and go to state 38
    ifthenelse                     shift and go to state 28
    assignment                     shift and go to state 30
    whileStatement                 shift and go to state 31
    functionCall                   shift and go to state 32
    declaration                    shift and go to state 33
    returnStatement                shift and go to state 35

state 8

    (50) untillStatement -> UNTIL . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
    (96) Marker -> . empty
=======
    statements                     shift and go to state 44
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 6
    ifthen                         shift and go to state 11
    nextStatement                  shift and go to state 14
    lastStatement                  shift and go to state 18
    useStatement                   shift and go to state 19
    statement                      shift and go to state 20
    printStatement                 shift and go to state 21
    empty                          shift and go to state 34
    ifthenelse                     shift and go to state 23
    assignment                     shift and go to state 25
    whileStatement                 shift and go to state 26
    array_assignment               shift and go to state 27
    functionCall                   shift and go to state 28
    declaration                    shift and go to state 29
    returnStatement                shift and go to state 31

state 8

    (50) whileStatement -> WHILE . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 47
    empty                          shift and go to state 41

state 9

    (46) whileStatement -> WHILE . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (96) Marker -> . empty
    (6) empty -> .

    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 48
    empty                          shift and go to state 41

state 10

    (22) statement -> inputStatement . Marker
    (96) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 49
    empty                          shift and go to state 41

state 11

    (39) printStatement -> PRINT . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (40) printStatement -> PRINT . expression SEMICOLON
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    OPEN_PARANTHESIS shift and go to state 50
    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    Marker                         shift and go to state 45
    empty                          shift and go to state 38

state 9

    (36) printStatement -> PRINT . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (37) printStatement -> PRINT . expression SEMICOLON
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    OPEN_PARANTHESIS shift and go to state 46
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 68
    empty                          shift and go to state 58

state 12

    (41) returnStatement -> RETURN . expression SEMICOLON
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 65
    empty                          shift and go to state 55

state 10

    (38) returnStatement -> RETURN . expression SEMICOLON
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 70
    empty                          shift and go to state 58

state 13

    (17) statement -> ifthen . Marker
    (96) Marker -> . empty
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 67
    empty                          shift and go to state 55

state 11

    (18) statement -> ifthen . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 71
    empty                          shift and go to state 41

state 14

    (36) functionStatement -> SUB . IDENTIFIER Markerscope block

    IDENTIFIER      shift and go to state 72


state 15

    (34) lastStatement -> LAST . SEMICOLON

    SEMICOLON       shift and go to state 73


state 16

    (21) statement -> dowhileStatement . Marker
    (96) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 74
    empty                          shift and go to state 41

state 17

    (16) statement -> nextStatement . Marker
    (96) Marker -> . empty
=======
    Marker                         shift and go to state 68
    empty                          shift and go to state 38

state 12

    (33) functionStatement -> SUB . IDENTIFIER Markerscope block

    IDENTIFIER      shift and go to state 69


state 13

    (31) lastStatement -> LAST . SEMICOLON

    SEMICOLON       shift and go to state 70


state 14

    (17) statement -> nextStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 75
    empty                          shift and go to state 41

state 18

    (25) switchStatement -> SWITCH . expression BLOCK_BEGIN caselist BLOCK_ENDS
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 76
    empty                          shift and go to state 58
=======
    Marker                         shift and go to state 71
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 19

<<<<<<< HEAD
    (44) assignment -> PRIVATE . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (58) declaration -> PRIVATE . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 77
=======
    (42) assignment -> PRIVATE . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (45) declaration -> PRIVATE . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 72
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 20

<<<<<<< HEAD
    (35) nextStatement -> NEXT . SEMICOLON

    SEMICOLON       shift and go to state 78
=======
    (32) nextStatement -> NEXT . SEMICOLON

    SEMICOLON       shift and go to state 73
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 21

    (0) S' -> start .



state 22

<<<<<<< HEAD
    (15) statement -> lastStatement . Marker
    (96) Marker -> . empty
=======
    (16) statement -> lastStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 79
    empty                          shift and go to state 41
=======
    Marker                         shift and go to state 74
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 23

<<<<<<< HEAD
    (19) statement -> useStatement . Marker
    (96) Marker -> . empty
=======
    (20) statement -> useStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 80
    empty                          shift and go to state 41
=======
    Marker                         shift and go to state 75
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 24

    (4) statements -> statement . statements
    (5) statements -> statement .
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
<<<<<<< HEAD
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker SEMICOLON
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . untillStatement Marker
    (21) statement -> . dowhileStatement Marker
    (22) statement -> . inputStatement Marker
    (23) statement -> . switchStatement Marker
    (42) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (44) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (45) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (56) assignment -> . empty
    (57) declaration -> . VARIABLE decList SEMICOLON
    (58) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (59) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (41) returnStatement -> . RETURN expression SEMICOLON
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (46) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (52) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (39) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (40) printStatement -> . PRINT expression SEMICOLON
    (36) functionStatement -> . SUB IDENTIFIER Markerscope block
    (34) lastStatement -> . LAST SEMICOLON
    (35) nextStatement -> . NEXT SEMICOLON
    (30) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (31) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (24) useStatement -> . USE IDENTIFIER SEMICOLON
    (50) untillStatement -> . UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
    (48) dowhileStatement -> . DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (29) inputStatement -> . VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
    (25) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
=======
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . switchStatement Marker
    (39) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (42) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (56) assignment -> . empty
    (44) declaration -> . VARIABLE decList SEMICOLON
    (45) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (46) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (69) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (38) returnStatement -> . RETURN expression SEMICOLON
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (50) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (52) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> . FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (36) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (37) printStatement -> . PRINT expression SEMICOLON
    (33) functionStatement -> . SUB IDENTIFIER Markerscope block
    (31) lastStatement -> . LAST SEMICOLON
    (32) nextStatement -> . NEXT SEMICOLON
    (27) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (22) useStatement -> . USE IDENTIFIER SEMICOLON
    (23) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for LAST resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 5 (statements -> statement .)
  ! reduce/reduce conflict for BLOCK_ENDS resolved using rule 5 (statements -> statement .)
    BLOCK_ENDS      reduce using rule 5 (statements -> statement .)
<<<<<<< HEAD
    $end            reduce using rule 5 (statements -> statement .)
    VARIABLE        shift and go to state 34
    LOCAL           shift and go to state 36
    PRIVATE         shift and go to state 19
    RETURN          shift and go to state 12
    IDENTIFIER      shift and go to state 26
    WHILE           shift and go to state 9
    FOR             shift and go to state 29
    PRINT           shift and go to state 11
    SUB             shift and go to state 14
    LAST            shift and go to state 15
    NEXT            shift and go to state 20
    IF              shift and go to state 37
    USE             shift and go to state 2
    UNTIL           shift and go to state 8
    DO              shift and go to state 5
    SWITCH          shift and go to state 18
=======
    VARIABLE        shift and go to state 30
    ARRAY           shift and go to state 5
    LOCAL           shift and go to state 32
    PRIVATE         shift and go to state 15
    RETURN          shift and go to state 10
    IDENTIFIER      shift and go to state 22
    WHILE           shift and go to state 8
    FOR             shift and go to state 24
    PRINT           shift and go to state 9
    SUB             shift and go to state 12
    LAST            shift and go to state 13
    NEXT            shift and go to state 16
    IF              shift and go to state 33
    USE             shift and go to state 2
    SWITCH          shift and go to state 35
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! VARIABLE        [ reduce using rule 6 (empty -> .) ]
  ! ARRAY           [ reduce using rule 6 (empty -> .) ]
  ! LOCAL           [ reduce using rule 6 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! SUB             [ reduce using rule 6 (empty -> .) ]
  ! LAST            [ reduce using rule 6 (empty -> .) ]
  ! NEXT            [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! USE             [ reduce using rule 6 (empty -> .) ]
  ! UNTIL           [ reduce using rule 6 (empty -> .) ]
  ! DO              [ reduce using rule 6 (empty -> .) ]
  ! SWITCH          [ reduce using rule 6 (empty -> .) ]
  ! $end            [ reduce using rule 6 (empty -> .) ]
  ! BLOCK_ENDS      [ reduce using rule 6 (empty -> .) ]

    forStatement                   shift and go to state 1
<<<<<<< HEAD
    statements                     shift and go to state 81
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 6
    inputStatement                 shift and go to state 10
    ifthen                         shift and go to state 13
    dowhileStatement               shift and go to state 16
    nextStatement                  shift and go to state 17
    lastStatement                  shift and go to state 22
    useStatement                   shift and go to state 23
    statement                      shift and go to state 24
    printStatement                 shift and go to state 25
    untillStatement                shift and go to state 27
    empty                          shift and go to state 38
    ifthenelse                     shift and go to state 28
    assignment                     shift and go to state 30
    whileStatement                 shift and go to state 31
    functionCall                   shift and go to state 32
    declaration                    shift and go to state 33
    returnStatement                shift and go to state 35
=======
    statements                     shift and go to state 76
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 6
    ifthen                         shift and go to state 11
    nextStatement                  shift and go to state 14
    lastStatement                  shift and go to state 18
    useStatement                   shift and go to state 19
    statement                      shift and go to state 20
    printStatement                 shift and go to state 21
    empty                          shift and go to state 34
    ifthenelse                     shift and go to state 23
    assignment                     shift and go to state 25
    whileStatement                 shift and go to state 26
    array_assignment               shift and go to state 27
    functionCall                   shift and go to state 28
    declaration                    shift and go to state 29
    returnStatement                shift and go to state 31
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 25

<<<<<<< HEAD
    (13) statement -> printStatement . Marker
    (96) Marker -> . empty
=======
    (14) statement -> printStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 82
    empty                          shift and go to state 41
=======
    Marker                         shift and go to state 77
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 26

<<<<<<< HEAD
    (38) functionCall -> IDENTIFIER . OPEN_PARANTHESIS CLOSE_PARANTHESIS

    OPEN_PARANTHESIS shift and go to state 83
=======
    (35) functionCall -> IDENTIFIER . OPEN_PARANTHESIS CLOSE_PARANTHESIS

    OPEN_PARANTHESIS shift and go to state 78
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 27

    (20) statement -> untillStatement . Marker
    (96) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 84
    empty                          shift and go to state 41

state 28

<<<<<<< HEAD
    (18) statement -> ifthenelse . Marker
    (96) Marker -> . empty
=======
    (19) statement -> ifthenelse . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 85
    empty                          shift and go to state 41
=======
    Marker                         shift and go to state 79
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 29

    (52) forStatement -> FOR . OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR . OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

<<<<<<< HEAD
    OPEN_PARANTHESIS shift and go to state 86
=======
    OPEN_PARANTHESIS shift and go to state 80
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 30

    (7) statement -> assignment . Marker
<<<<<<< HEAD
    (96) Marker -> . empty
=======
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 87
    empty                          shift and go to state 41
=======
    Marker                         shift and go to state 81
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 31

<<<<<<< HEAD
    (11) statement -> whileStatement . Marker
    (96) Marker -> . empty
=======
    (12) statement -> whileStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 88
    empty                          shift and go to state 41
=======
    Marker                         shift and go to state 82
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 32

<<<<<<< HEAD
    (10) statement -> functionCall . Marker SEMICOLON
    (96) Marker -> . empty
=======
    (9) statement -> array_assignment . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 89
    empty                          shift and go to state 41
=======
    Marker                         shift and go to state 83
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 33

    (11) statement -> functionCall . Marker SEMICOLON
    (94) Marker -> . empty
    (6) empty -> .

    SEMICOLON       reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 84
    empty                          shift and go to state 38

state 29

    (8) statement -> declaration . Marker
<<<<<<< HEAD
    (96) Marker -> . empty
=======
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 90
    empty                          shift and go to state 41

state 34

    (42) assignment -> VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (45) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression SEMICOLON
    (57) declaration -> VARIABLE . decList SEMICOLON
    (29) inputStatement -> VARIABLE . ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
    (60) decList -> . COMMA VARIABLE decList
    (61) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 94
    ADV_ASSIGNMENT_OP shift and go to state 92
    COMMA           shift and go to state 93
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 95
    decList                        shift and go to state 91

state 35

    (9) statement -> returnStatement . Marker
    (96) Marker -> . empty
=======
    Marker                         shift and go to state 85
    empty                          shift and go to state 38

state 30

    (39) assignment -> VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression SEMICOLON
    (44) declaration -> VARIABLE . decList SEMICOLON
    (47) decList -> . COMMA VARIABLE decList
    (48) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 89
    ADV_ASSIGNMENT_OP shift and go to state 87
    COMMA           shift and go to state 88
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 90
    decList                        shift and go to state 86

state 31

    (10) statement -> returnStatement . Marker
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 96
    empty                          shift and go to state 41

state 36

    (43) assignment -> LOCAL . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (59) declaration -> LOCAL . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 97

=======
    Marker                         shift and go to state 91
    empty                          shift and go to state 38
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 37

<<<<<<< HEAD
    (30) ifthen -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (31) ifthenelse -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block

    OPEN_PARANTHESIS shift and go to state 98
=======
    (41) assignment -> LOCAL . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (46) declaration -> LOCAL . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 92
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 38

<<<<<<< HEAD
    (56) assignment -> empty .

    PLUS_OP         reduce using rule 56 (assignment -> empty .)
    MINUS_OP        reduce using rule 56 (assignment -> empty .)
    BIT_FLIP        reduce using rule 56 (assignment -> empty .)
    NOT_OP          reduce using rule 56 (assignment -> empty .)
    VARIABLE        reduce using rule 56 (assignment -> empty .)
    OPEN_PARANTHESIS reduce using rule 56 (assignment -> empty .)
    IDENTIFIER      reduce using rule 56 (assignment -> empty .)
    NUMBER          reduce using rule 56 (assignment -> empty .)
    SCI_NOT         reduce using rule 56 (assignment -> empty .)
    FLOAT           reduce using rule 56 (assignment -> empty .)
    HEXADECIMAL     reduce using rule 56 (assignment -> empty .)
    OCTAL           reduce using rule 56 (assignment -> empty .)
    STRING          reduce using rule 56 (assignment -> empty .)
    RES_STRING      reduce using rule 56 (assignment -> empty .)
    SEMICOLON       reduce using rule 56 (assignment -> empty .)
    OR_STR_OP       reduce using rule 56 (assignment -> empty .)
    XOR_STR_OP      reduce using rule 56 (assignment -> empty .)
    AND_STR_OP      reduce using rule 56 (assignment -> empty .)
    NOT_STR_OP      reduce using rule 56 (assignment -> empty .)
    COMPARE_OP      reduce using rule 56 (assignment -> empty .)
    BIT_OR          reduce using rule 56 (assignment -> empty .)
    BIT_XOR         reduce using rule 56 (assignment -> empty .)
    BIT_AND         reduce using rule 56 (assignment -> empty .)
    AND_OP          reduce using rule 56 (assignment -> empty .)
    OR_OP           reduce using rule 56 (assignment -> empty .)
    EQUALS_OP       reduce using rule 56 (assignment -> empty .)
    NOT_EQUALS_OP   reduce using rule 56 (assignment -> empty .)
    GREATER_OP      reduce using rule 56 (assignment -> empty .)
    LESS_OP         reduce using rule 56 (assignment -> empty .)
    GREATER_EQUAL_OP reduce using rule 56 (assignment -> empty .)
    LESS_EQUAL_OP   reduce using rule 56 (assignment -> empty .)
    MULTIPLICATION_OP reduce using rule 56 (assignment -> empty .)
    DIVISION_OP     reduce using rule 56 (assignment -> empty .)
    MODULUS_OP      reduce using rule 56 (assignment -> empty .)
    EXPONENT_OP     reduce using rule 56 (assignment -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 56 (assignment -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 56 (assignment -> empty .)
    CONCATENATE     reduce using rule 56 (assignment -> empty .)
    REP_OP          reduce using rule 56 (assignment -> empty .)
    COMMA           reduce using rule 56 (assignment -> empty .)
    ASSOCIATE_OP    reduce using rule 56 (assignment -> empty .)
    RANGE_OP        reduce using rule 56 (assignment -> empty .)
    SEARCH_MODIFY   reduce using rule 56 (assignment -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 56 (assignment -> empty .)
    LOCAL           reduce using rule 56 (assignment -> empty .)
    PRIVATE         reduce using rule 56 (assignment -> empty .)
    RETURN          reduce using rule 56 (assignment -> empty .)
    WHILE           reduce using rule 56 (assignment -> empty .)
    FOR             reduce using rule 56 (assignment -> empty .)
    PRINT           reduce using rule 56 (assignment -> empty .)
    SUB             reduce using rule 56 (assignment -> empty .)
    LAST            reduce using rule 56 (assignment -> empty .)
    NEXT            reduce using rule 56 (assignment -> empty .)
    IF              reduce using rule 56 (assignment -> empty .)
    USE             reduce using rule 56 (assignment -> empty .)
    UNTIL           reduce using rule 56 (assignment -> empty .)
    DO              reduce using rule 56 (assignment -> empty .)
    SWITCH          reduce using rule 56 (assignment -> empty .)
    $end            reduce using rule 56 (assignment -> empty .)
    BLOCK_ENDS      reduce using rule 56 (assignment -> empty .)
=======
    (27) ifthen -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    OPEN_PARANTHESIS shift and go to state 93

<<<<<<< HEAD
state 39
=======
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 34

    (56) assignment -> empty .

    PLUS_OP         reduce using rule 56 (assignment -> empty .)
    MINUS_OP        reduce using rule 56 (assignment -> empty .)
    BIT_FLIP        reduce using rule 56 (assignment -> empty .)
    NOT_OP          reduce using rule 56 (assignment -> empty .)
    VARIABLE        reduce using rule 56 (assignment -> empty .)
    OPEN_PARANTHESIS reduce using rule 56 (assignment -> empty .)
    ARRAY           reduce using rule 56 (assignment -> empty .)
    IDENTIFIER      reduce using rule 56 (assignment -> empty .)
    NUMBER          reduce using rule 56 (assignment -> empty .)
    SCI_NOT         reduce using rule 56 (assignment -> empty .)
    FLOAT           reduce using rule 56 (assignment -> empty .)
    HEXADECIMAL     reduce using rule 56 (assignment -> empty .)
    OCTAL           reduce using rule 56 (assignment -> empty .)
    STRING          reduce using rule 56 (assignment -> empty .)
    RES_STRING      reduce using rule 56 (assignment -> empty .)
    SEMICOLON       reduce using rule 56 (assignment -> empty .)
    OR_STR_OP       reduce using rule 56 (assignment -> empty .)
    XOR_STR_OP      reduce using rule 56 (assignment -> empty .)
    AND_STR_OP      reduce using rule 56 (assignment -> empty .)
    NOT_STR_OP      reduce using rule 56 (assignment -> empty .)
    COMPARE_OP      reduce using rule 56 (assignment -> empty .)
    BIT_OR          reduce using rule 56 (assignment -> empty .)
    BIT_XOR         reduce using rule 56 (assignment -> empty .)
    BIT_AND         reduce using rule 56 (assignment -> empty .)
    AND_OP          reduce using rule 56 (assignment -> empty .)
    OR_OP           reduce using rule 56 (assignment -> empty .)
    EQUALS_OP       reduce using rule 56 (assignment -> empty .)
    NOT_EQUALS_OP   reduce using rule 56 (assignment -> empty .)
    GREATER_OP      reduce using rule 56 (assignment -> empty .)
    LESS_OP         reduce using rule 56 (assignment -> empty .)
    GREATER_EQUAL_OP reduce using rule 56 (assignment -> empty .)
    LESS_EQUAL_OP   reduce using rule 56 (assignment -> empty .)
    MULTIPLICATION_OP reduce using rule 56 (assignment -> empty .)
    DIVISION_OP     reduce using rule 56 (assignment -> empty .)
    MODULUS_OP      reduce using rule 56 (assignment -> empty .)
    EXPONENT_OP     reduce using rule 56 (assignment -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 56 (assignment -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 56 (assignment -> empty .)
    CONCATENATE     reduce using rule 56 (assignment -> empty .)
    REP_OP          reduce using rule 56 (assignment -> empty .)
    ASSOCIATE_OP    reduce using rule 56 (assignment -> empty .)
    RANGE_OP        reduce using rule 56 (assignment -> empty .)
    SEARCH_MODIFY   reduce using rule 56 (assignment -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 56 (assignment -> empty .)
    LOCAL           reduce using rule 56 (assignment -> empty .)
    PRIVATE         reduce using rule 56 (assignment -> empty .)
    RETURN          reduce using rule 56 (assignment -> empty .)
    WHILE           reduce using rule 56 (assignment -> empty .)
    FOR             reduce using rule 56 (assignment -> empty .)
    PRINT           reduce using rule 56 (assignment -> empty .)
    SUB             reduce using rule 56 (assignment -> empty .)
    LAST            reduce using rule 56 (assignment -> empty .)
    NEXT            reduce using rule 56 (assignment -> empty .)
    IF              reduce using rule 56 (assignment -> empty .)
    USE             reduce using rule 56 (assignment -> empty .)
    SWITCH          reduce using rule 56 (assignment -> empty .)
    $end            reduce using rule 56 (assignment -> empty .)
    BLOCK_ENDS      reduce using rule 56 (assignment -> empty .)


state 40

<<<<<<< HEAD
    (12) statement -> forStatement Marker .

    VARIABLE        reduce using rule 12 (statement -> forStatement Marker .)
    LOCAL           reduce using rule 12 (statement -> forStatement Marker .)
    PRIVATE         reduce using rule 12 (statement -> forStatement Marker .)
    RETURN          reduce using rule 12 (statement -> forStatement Marker .)
    IDENTIFIER      reduce using rule 12 (statement -> forStatement Marker .)
    WHILE           reduce using rule 12 (statement -> forStatement Marker .)
    FOR             reduce using rule 12 (statement -> forStatement Marker .)
    PRINT           reduce using rule 12 (statement -> forStatement Marker .)
    SUB             reduce using rule 12 (statement -> forStatement Marker .)
    LAST            reduce using rule 12 (statement -> forStatement Marker .)
    NEXT            reduce using rule 12 (statement -> forStatement Marker .)
    IF              reduce using rule 12 (statement -> forStatement Marker .)
    USE             reduce using rule 12 (statement -> forStatement Marker .)
    UNTIL           reduce using rule 12 (statement -> forStatement Marker .)
    DO              reduce using rule 12 (statement -> forStatement Marker .)
    SWITCH          reduce using rule 12 (statement -> forStatement Marker .)
    $end            reduce using rule 12 (statement -> forStatement Marker .)
    BLOCK_ENDS      reduce using rule 12 (statement -> forStatement Marker .)
=======
    (23) switchStatement -> SWITCH . expression BLOCK_BEGIN caselist BLOCK_ENDS
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 94
    empty                          shift and go to state 55

state 41

<<<<<<< HEAD
    (96) Marker -> empty .

    VARIABLE        reduce using rule 96 (Marker -> empty .)
    LOCAL           reduce using rule 96 (Marker -> empty .)
    PRIVATE         reduce using rule 96 (Marker -> empty .)
    RETURN          reduce using rule 96 (Marker -> empty .)
    IDENTIFIER      reduce using rule 96 (Marker -> empty .)
    WHILE           reduce using rule 96 (Marker -> empty .)
    FOR             reduce using rule 96 (Marker -> empty .)
    PRINT           reduce using rule 96 (Marker -> empty .)
    SUB             reduce using rule 96 (Marker -> empty .)
    LAST            reduce using rule 96 (Marker -> empty .)
    NEXT            reduce using rule 96 (Marker -> empty .)
    IF              reduce using rule 96 (Marker -> empty .)
    USE             reduce using rule 96 (Marker -> empty .)
    UNTIL           reduce using rule 96 (Marker -> empty .)
    DO              reduce using rule 96 (Marker -> empty .)
    SWITCH          reduce using rule 96 (Marker -> empty .)
    $end            reduce using rule 96 (Marker -> empty .)
    BLOCK_ENDS      reduce using rule 96 (Marker -> empty .)
    PLUS_OP         reduce using rule 96 (Marker -> empty .)
    MINUS_OP        reduce using rule 96 (Marker -> empty .)
    BIT_FLIP        reduce using rule 96 (Marker -> empty .)
    NOT_OP          reduce using rule 96 (Marker -> empty .)
    OPEN_PARANTHESIS reduce using rule 96 (Marker -> empty .)
    NUMBER          reduce using rule 96 (Marker -> empty .)
    SCI_NOT         reduce using rule 96 (Marker -> empty .)
    FLOAT           reduce using rule 96 (Marker -> empty .)
    HEXADECIMAL     reduce using rule 96 (Marker -> empty .)
    OCTAL           reduce using rule 96 (Marker -> empty .)
    STRING          reduce using rule 96 (Marker -> empty .)
    RES_STRING      reduce using rule 96 (Marker -> empty .)
    OR_STR_OP       reduce using rule 96 (Marker -> empty .)
    XOR_STR_OP      reduce using rule 96 (Marker -> empty .)
    AND_STR_OP      reduce using rule 96 (Marker -> empty .)
    NOT_STR_OP      reduce using rule 96 (Marker -> empty .)
    COMPARE_OP      reduce using rule 96 (Marker -> empty .)
    BIT_OR          reduce using rule 96 (Marker -> empty .)
    BIT_XOR         reduce using rule 96 (Marker -> empty .)
    BIT_AND         reduce using rule 96 (Marker -> empty .)
    AND_OP          reduce using rule 96 (Marker -> empty .)
    OR_OP           reduce using rule 96 (Marker -> empty .)
    EQUALS_OP       reduce using rule 96 (Marker -> empty .)
    NOT_EQUALS_OP   reduce using rule 96 (Marker -> empty .)
    GREATER_OP      reduce using rule 96 (Marker -> empty .)
    LESS_OP         reduce using rule 96 (Marker -> empty .)
    GREATER_EQUAL_OP reduce using rule 96 (Marker -> empty .)
    LESS_EQUAL_OP   reduce using rule 96 (Marker -> empty .)
    MULTIPLICATION_OP reduce using rule 96 (Marker -> empty .)
    DIVISION_OP     reduce using rule 96 (Marker -> empty .)
    MODULUS_OP      reduce using rule 96 (Marker -> empty .)
    EXPONENT_OP     reduce using rule 96 (Marker -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 96 (Marker -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 96 (Marker -> empty .)
    CONCATENATE     reduce using rule 96 (Marker -> empty .)
    REP_OP          reduce using rule 96 (Marker -> empty .)
    COMMA           reduce using rule 96 (Marker -> empty .)
    ASSOCIATE_OP    reduce using rule 96 (Marker -> empty .)
    RANGE_OP        reduce using rule 96 (Marker -> empty .)
    SEARCH_MODIFY   reduce using rule 96 (Marker -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 96 (Marker -> empty .)
    SEMICOLON       reduce using rule 96 (Marker -> empty .)
    BLOCK_BEGIN     reduce using rule 96 (Marker -> empty .)
    CLOSE_PARANTHESIS reduce using rule 96 (Marker -> empty .)
=======
    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 42

<<<<<<< HEAD
    (24) useStatement -> USE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 99
=======
    (13) statement -> forStatement Marker .

    VARIABLE        reduce using rule 13 (statement -> forStatement Marker .)
    ARRAY           reduce using rule 13 (statement -> forStatement Marker .)
    LOCAL           reduce using rule 13 (statement -> forStatement Marker .)
    PRIVATE         reduce using rule 13 (statement -> forStatement Marker .)
    RETURN          reduce using rule 13 (statement -> forStatement Marker .)
    IDENTIFIER      reduce using rule 13 (statement -> forStatement Marker .)
    WHILE           reduce using rule 13 (statement -> forStatement Marker .)
    FOR             reduce using rule 13 (statement -> forStatement Marker .)
    PRINT           reduce using rule 13 (statement -> forStatement Marker .)
    SUB             reduce using rule 13 (statement -> forStatement Marker .)
    LAST            reduce using rule 13 (statement -> forStatement Marker .)
    NEXT            reduce using rule 13 (statement -> forStatement Marker .)
    IF              reduce using rule 13 (statement -> forStatement Marker .)
    USE             reduce using rule 13 (statement -> forStatement Marker .)
    SWITCH          reduce using rule 13 (statement -> forStatement Marker .)
    $end            reduce using rule 13 (statement -> forStatement Marker .)
    BLOCK_ENDS      reduce using rule 13 (statement -> forStatement Marker .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 43

<<<<<<< HEAD
    (14) statement -> functionStatement Marker .

    VARIABLE        reduce using rule 14 (statement -> functionStatement Marker .)
    LOCAL           reduce using rule 14 (statement -> functionStatement Marker .)
    PRIVATE         reduce using rule 14 (statement -> functionStatement Marker .)
    RETURN          reduce using rule 14 (statement -> functionStatement Marker .)
    IDENTIFIER      reduce using rule 14 (statement -> functionStatement Marker .)
    WHILE           reduce using rule 14 (statement -> functionStatement Marker .)
    FOR             reduce using rule 14 (statement -> functionStatement Marker .)
    PRINT           reduce using rule 14 (statement -> functionStatement Marker .)
    SUB             reduce using rule 14 (statement -> functionStatement Marker .)
    LAST            reduce using rule 14 (statement -> functionStatement Marker .)
    NEXT            reduce using rule 14 (statement -> functionStatement Marker .)
    IF              reduce using rule 14 (statement -> functionStatement Marker .)
    USE             reduce using rule 14 (statement -> functionStatement Marker .)
    UNTIL           reduce using rule 14 (statement -> functionStatement Marker .)
    DO              reduce using rule 14 (statement -> functionStatement Marker .)
    SWITCH          reduce using rule 14 (statement -> functionStatement Marker .)
    $end            reduce using rule 14 (statement -> functionStatement Marker .)
    BLOCK_ENDS      reduce using rule 14 (statement -> functionStatement Marker .)
=======
    (94) Marker -> empty .

    VARIABLE        reduce using rule 94 (Marker -> empty .)
    ARRAY           reduce using rule 94 (Marker -> empty .)
    LOCAL           reduce using rule 94 (Marker -> empty .)
    PRIVATE         reduce using rule 94 (Marker -> empty .)
    RETURN          reduce using rule 94 (Marker -> empty .)
    IDENTIFIER      reduce using rule 94 (Marker -> empty .)
    WHILE           reduce using rule 94 (Marker -> empty .)
    FOR             reduce using rule 94 (Marker -> empty .)
    PRINT           reduce using rule 94 (Marker -> empty .)
    SUB             reduce using rule 94 (Marker -> empty .)
    LAST            reduce using rule 94 (Marker -> empty .)
    NEXT            reduce using rule 94 (Marker -> empty .)
    IF              reduce using rule 94 (Marker -> empty .)
    USE             reduce using rule 94 (Marker -> empty .)
    SWITCH          reduce using rule 94 (Marker -> empty .)
    $end            reduce using rule 94 (Marker -> empty .)
    BLOCK_ENDS      reduce using rule 94 (Marker -> empty .)
    PLUS_OP         reduce using rule 94 (Marker -> empty .)
    MINUS_OP        reduce using rule 94 (Marker -> empty .)
    BIT_FLIP        reduce using rule 94 (Marker -> empty .)
    NOT_OP          reduce using rule 94 (Marker -> empty .)
    OPEN_PARANTHESIS reduce using rule 94 (Marker -> empty .)
    NUMBER          reduce using rule 94 (Marker -> empty .)
    SCI_NOT         reduce using rule 94 (Marker -> empty .)
    FLOAT           reduce using rule 94 (Marker -> empty .)
    HEXADECIMAL     reduce using rule 94 (Marker -> empty .)
    OCTAL           reduce using rule 94 (Marker -> empty .)
    STRING          reduce using rule 94 (Marker -> empty .)
    RES_STRING      reduce using rule 94 (Marker -> empty .)
    OR_STR_OP       reduce using rule 94 (Marker -> empty .)
    XOR_STR_OP      reduce using rule 94 (Marker -> empty .)
    AND_STR_OP      reduce using rule 94 (Marker -> empty .)
    NOT_STR_OP      reduce using rule 94 (Marker -> empty .)
    COMPARE_OP      reduce using rule 94 (Marker -> empty .)
    BIT_OR          reduce using rule 94 (Marker -> empty .)
    BIT_XOR         reduce using rule 94 (Marker -> empty .)
    BIT_AND         reduce using rule 94 (Marker -> empty .)
    AND_OP          reduce using rule 94 (Marker -> empty .)
    OR_OP           reduce using rule 94 (Marker -> empty .)
    EQUALS_OP       reduce using rule 94 (Marker -> empty .)
    NOT_EQUALS_OP   reduce using rule 94 (Marker -> empty .)
    GREATER_OP      reduce using rule 94 (Marker -> empty .)
    LESS_OP         reduce using rule 94 (Marker -> empty .)
    GREATER_EQUAL_OP reduce using rule 94 (Marker -> empty .)
    LESS_EQUAL_OP   reduce using rule 94 (Marker -> empty .)
    MULTIPLICATION_OP reduce using rule 94 (Marker -> empty .)
    DIVISION_OP     reduce using rule 94 (Marker -> empty .)
    MODULUS_OP      reduce using rule 94 (Marker -> empty .)
    EXPONENT_OP     reduce using rule 94 (Marker -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 94 (Marker -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 94 (Marker -> empty .)
    CONCATENATE     reduce using rule 94 (Marker -> empty .)
    REP_OP          reduce using rule 94 (Marker -> empty .)
    ASSOCIATE_OP    reduce using rule 94 (Marker -> empty .)
    RANGE_OP        reduce using rule 94 (Marker -> empty .)
    SEARCH_MODIFY   reduce using rule 94 (Marker -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 94 (Marker -> empty .)
    SEMICOLON       reduce using rule 94 (Marker -> empty .)
    BLOCK_BEGIN     reduce using rule 94 (Marker -> empty .)
    CLOSE_PARANTHESIS reduce using rule 94 (Marker -> empty .)
    COMMA           reduce using rule 94 (Marker -> empty .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 44

<<<<<<< HEAD
    (48) dowhileStatement -> DO block . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON

    WHILE           shift and go to state 100


state 45

    (23) statement -> switchStatement Marker .

    VARIABLE        reduce using rule 23 (statement -> switchStatement Marker .)
    LOCAL           reduce using rule 23 (statement -> switchStatement Marker .)
    PRIVATE         reduce using rule 23 (statement -> switchStatement Marker .)
    RETURN          reduce using rule 23 (statement -> switchStatement Marker .)
    IDENTIFIER      reduce using rule 23 (statement -> switchStatement Marker .)
    WHILE           reduce using rule 23 (statement -> switchStatement Marker .)
    FOR             reduce using rule 23 (statement -> switchStatement Marker .)
    PRINT           reduce using rule 23 (statement -> switchStatement Marker .)
    SUB             reduce using rule 23 (statement -> switchStatement Marker .)
    LAST            reduce using rule 23 (statement -> switchStatement Marker .)
    NEXT            reduce using rule 23 (statement -> switchStatement Marker .)
    IF              reduce using rule 23 (statement -> switchStatement Marker .)
    USE             reduce using rule 23 (statement -> switchStatement Marker .)
    UNTIL           reduce using rule 23 (statement -> switchStatement Marker .)
    DO              reduce using rule 23 (statement -> switchStatement Marker .)
    SWITCH          reduce using rule 23 (statement -> switchStatement Marker .)
    $end            reduce using rule 23 (statement -> switchStatement Marker .)
    BLOCK_ENDS      reduce using rule 23 (statement -> switchStatement Marker .)


state 46
=======
    (22) useStatement -> USE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 95

>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 40

<<<<<<< HEAD
    BLOCK_ENDS      shift and go to state 101
=======
    (15) statement -> functionStatement Marker .

    VARIABLE        reduce using rule 15 (statement -> functionStatement Marker .)
    ARRAY           reduce using rule 15 (statement -> functionStatement Marker .)
    LOCAL           reduce using rule 15 (statement -> functionStatement Marker .)
    PRIVATE         reduce using rule 15 (statement -> functionStatement Marker .)
    RETURN          reduce using rule 15 (statement -> functionStatement Marker .)
    IDENTIFIER      reduce using rule 15 (statement -> functionStatement Marker .)
    WHILE           reduce using rule 15 (statement -> functionStatement Marker .)
    FOR             reduce using rule 15 (statement -> functionStatement Marker .)
    PRINT           reduce using rule 15 (statement -> functionStatement Marker .)
    SUB             reduce using rule 15 (statement -> functionStatement Marker .)
    LAST            reduce using rule 15 (statement -> functionStatement Marker .)
    NEXT            reduce using rule 15 (statement -> functionStatement Marker .)
    IF              reduce using rule 15 (statement -> functionStatement Marker .)
    USE             reduce using rule 15 (statement -> functionStatement Marker .)
    SWITCH          reduce using rule 15 (statement -> functionStatement Marker .)
    $end            reduce using rule 15 (statement -> functionStatement Marker .)
    BLOCK_ENDS      reduce using rule 15 (statement -> functionStatement Marker .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 47

<<<<<<< HEAD
    (50) untillStatement -> UNTIL Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block

    OPEN_PARANTHESIS shift and go to state 102
=======
    (40) assignment -> ARRAY OPEN_BRACKET . NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON

    NUMBER          shift and go to state 96
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


state 48

    (46) whileStatement -> WHILE Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block

    OPEN_PARANTHESIS shift and go to state 103


state 49

    (22) statement -> inputStatement Marker .

    VARIABLE        reduce using rule 22 (statement -> inputStatement Marker .)
    LOCAL           reduce using rule 22 (statement -> inputStatement Marker .)
    PRIVATE         reduce using rule 22 (statement -> inputStatement Marker .)
    RETURN          reduce using rule 22 (statement -> inputStatement Marker .)
    IDENTIFIER      reduce using rule 22 (statement -> inputStatement Marker .)
    WHILE           reduce using rule 22 (statement -> inputStatement Marker .)
    FOR             reduce using rule 22 (statement -> inputStatement Marker .)
    PRINT           reduce using rule 22 (statement -> inputStatement Marker .)
    SUB             reduce using rule 22 (statement -> inputStatement Marker .)
    LAST            reduce using rule 22 (statement -> inputStatement Marker .)
    NEXT            reduce using rule 22 (statement -> inputStatement Marker .)
    IF              reduce using rule 22 (statement -> inputStatement Marker .)
    USE             reduce using rule 22 (statement -> inputStatement Marker .)
    UNTIL           reduce using rule 22 (statement -> inputStatement Marker .)
    DO              reduce using rule 22 (statement -> inputStatement Marker .)
    SWITCH          reduce using rule 22 (statement -> inputStatement Marker .)
    $end            reduce using rule 22 (statement -> inputStatement Marker .)
    BLOCK_ENDS      reduce using rule 22 (statement -> inputStatement Marker .)


state 50

<<<<<<< HEAD
    (39) printStatement -> PRINT OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS SEMICOLON
    (73) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    (69) array_assignment -> ARRAY ASSIGNMENT_OP . OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS shift and go to state 97


state 43

    (21) statement -> switchStatement Marker .

    VARIABLE        reduce using rule 21 (statement -> switchStatement Marker .)
    ARRAY           reduce using rule 21 (statement -> switchStatement Marker .)
    LOCAL           reduce using rule 21 (statement -> switchStatement Marker .)
    PRIVATE         reduce using rule 21 (statement -> switchStatement Marker .)
    RETURN          reduce using rule 21 (statement -> switchStatement Marker .)
    IDENTIFIER      reduce using rule 21 (statement -> switchStatement Marker .)
    WHILE           reduce using rule 21 (statement -> switchStatement Marker .)
    FOR             reduce using rule 21 (statement -> switchStatement Marker .)
    PRINT           reduce using rule 21 (statement -> switchStatement Marker .)
    SUB             reduce using rule 21 (statement -> switchStatement Marker .)
    LAST            reduce using rule 21 (statement -> switchStatement Marker .)
    NEXT            reduce using rule 21 (statement -> switchStatement Marker .)
    IF              reduce using rule 21 (statement -> switchStatement Marker .)
    USE             reduce using rule 21 (statement -> switchStatement Marker .)
    SWITCH          reduce using rule 21 (statement -> switchStatement Marker .)
    $end            reduce using rule 21 (statement -> switchStatement Marker .)
    BLOCK_ENDS      reduce using rule 21 (statement -> switchStatement Marker .)


state 44

    (3) block -> BLOCK_BEGIN statements . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 98


state 45

    (50) whileStatement -> WHILE Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block

    OPEN_PARANTHESIS shift and go to state 99


state 46

    (36) printStatement -> PRINT OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS SEMICOLON
    (67) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 104
    empty                          shift and go to state 58

state 51

    (75) expression -> MINUS_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 100
    empty                          shift and go to state 55

state 47

    (73) expression -> MINUS_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 105
    empty                          shift and go to state 58

state 52

    (70) term -> number .

    OR_STR_OP       reduce using rule 70 (term -> number .)
    XOR_STR_OP      reduce using rule 70 (term -> number .)
    AND_STR_OP      reduce using rule 70 (term -> number .)
    NOT_STR_OP      reduce using rule 70 (term -> number .)
    COMPARE_OP      reduce using rule 70 (term -> number .)
    BIT_OR          reduce using rule 70 (term -> number .)
    BIT_XOR         reduce using rule 70 (term -> number .)
    BIT_AND         reduce using rule 70 (term -> number .)
    AND_OP          reduce using rule 70 (term -> number .)
    OR_OP           reduce using rule 70 (term -> number .)
    EQUALS_OP       reduce using rule 70 (term -> number .)
    NOT_EQUALS_OP   reduce using rule 70 (term -> number .)
    GREATER_OP      reduce using rule 70 (term -> number .)
    LESS_OP         reduce using rule 70 (term -> number .)
    GREATER_EQUAL_OP reduce using rule 70 (term -> number .)
    LESS_EQUAL_OP   reduce using rule 70 (term -> number .)
    PLUS_OP         reduce using rule 70 (term -> number .)
    MINUS_OP        reduce using rule 70 (term -> number .)
    MULTIPLICATION_OP reduce using rule 70 (term -> number .)
    DIVISION_OP     reduce using rule 70 (term -> number .)
    MODULUS_OP      reduce using rule 70 (term -> number .)
    EXPONENT_OP     reduce using rule 70 (term -> number .)
    BIT_RIGHT_SHIFT reduce using rule 70 (term -> number .)
    BIT_LEFT_SHIFT  reduce using rule 70 (term -> number .)
    CONCATENATE     reduce using rule 70 (term -> number .)
    REP_OP          reduce using rule 70 (term -> number .)
    COMMA           reduce using rule 70 (term -> number .)
    ASSOCIATE_OP    reduce using rule 70 (term -> number .)
    RANGE_OP        reduce using rule 70 (term -> number .)
    SEARCH_MODIFY   reduce using rule 70 (term -> number .)
    SEARCH_MODIFY_NEG reduce using rule 70 (term -> number .)
    SEMICOLON       reduce using rule 70 (term -> number .)
    BLOCK_BEGIN     reduce using rule 70 (term -> number .)
    CLOSE_PARANTHESIS reduce using rule 70 (term -> number .)


state 53

    (77) expression -> NOT_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 101
    empty                          shift and go to state 55

state 48

    (64) term -> number .

    OR_STR_OP       reduce using rule 64 (term -> number .)
    XOR_STR_OP      reduce using rule 64 (term -> number .)
    AND_STR_OP      reduce using rule 64 (term -> number .)
    NOT_STR_OP      reduce using rule 64 (term -> number .)
    COMPARE_OP      reduce using rule 64 (term -> number .)
    BIT_OR          reduce using rule 64 (term -> number .)
    BIT_XOR         reduce using rule 64 (term -> number .)
    BIT_AND         reduce using rule 64 (term -> number .)
    AND_OP          reduce using rule 64 (term -> number .)
    OR_OP           reduce using rule 64 (term -> number .)
    EQUALS_OP       reduce using rule 64 (term -> number .)
    NOT_EQUALS_OP   reduce using rule 64 (term -> number .)
    GREATER_OP      reduce using rule 64 (term -> number .)
    LESS_OP         reduce using rule 64 (term -> number .)
    GREATER_EQUAL_OP reduce using rule 64 (term -> number .)
    LESS_EQUAL_OP   reduce using rule 64 (term -> number .)
    PLUS_OP         reduce using rule 64 (term -> number .)
    MINUS_OP        reduce using rule 64 (term -> number .)
    MULTIPLICATION_OP reduce using rule 64 (term -> number .)
    DIVISION_OP     reduce using rule 64 (term -> number .)
    MODULUS_OP      reduce using rule 64 (term -> number .)
    EXPONENT_OP     reduce using rule 64 (term -> number .)
    BIT_RIGHT_SHIFT reduce using rule 64 (term -> number .)
    BIT_LEFT_SHIFT  reduce using rule 64 (term -> number .)
    CONCATENATE     reduce using rule 64 (term -> number .)
    REP_OP          reduce using rule 64 (term -> number .)
    ASSOCIATE_OP    reduce using rule 64 (term -> number .)
    RANGE_OP        reduce using rule 64 (term -> number .)
    SEARCH_MODIFY   reduce using rule 64 (term -> number .)
    SEARCH_MODIFY_NEG reduce using rule 64 (term -> number .)
    SEMICOLON       reduce using rule 64 (term -> number .)
    BLOCK_BEGIN     reduce using rule 64 (term -> number .)
    CLOSE_PARANTHESIS reduce using rule 64 (term -> number .)
    COMMA           reduce using rule 64 (term -> number .)


state 49

    (57) string -> STRING .

    OR_STR_OP       reduce using rule 57 (string -> STRING .)
    XOR_STR_OP      reduce using rule 57 (string -> STRING .)
    AND_STR_OP      reduce using rule 57 (string -> STRING .)
    NOT_STR_OP      reduce using rule 57 (string -> STRING .)
    COMPARE_OP      reduce using rule 57 (string -> STRING .)
    BIT_OR          reduce using rule 57 (string -> STRING .)
    BIT_XOR         reduce using rule 57 (string -> STRING .)
    BIT_AND         reduce using rule 57 (string -> STRING .)
    AND_OP          reduce using rule 57 (string -> STRING .)
    OR_OP           reduce using rule 57 (string -> STRING .)
    EQUALS_OP       reduce using rule 57 (string -> STRING .)
    NOT_EQUALS_OP   reduce using rule 57 (string -> STRING .)
    GREATER_OP      reduce using rule 57 (string -> STRING .)
    LESS_OP         reduce using rule 57 (string -> STRING .)
    GREATER_EQUAL_OP reduce using rule 57 (string -> STRING .)
    LESS_EQUAL_OP   reduce using rule 57 (string -> STRING .)
    PLUS_OP         reduce using rule 57 (string -> STRING .)
    MINUS_OP        reduce using rule 57 (string -> STRING .)
    MULTIPLICATION_OP reduce using rule 57 (string -> STRING .)
    DIVISION_OP     reduce using rule 57 (string -> STRING .)
    MODULUS_OP      reduce using rule 57 (string -> STRING .)
    EXPONENT_OP     reduce using rule 57 (string -> STRING .)
    BIT_RIGHT_SHIFT reduce using rule 57 (string -> STRING .)
    BIT_LEFT_SHIFT  reduce using rule 57 (string -> STRING .)
    CONCATENATE     reduce using rule 57 (string -> STRING .)
    REP_OP          reduce using rule 57 (string -> STRING .)
    ASSOCIATE_OP    reduce using rule 57 (string -> STRING .)
    RANGE_OP        reduce using rule 57 (string -> STRING .)
    SEARCH_MODIFY   reduce using rule 57 (string -> STRING .)
    SEARCH_MODIFY_NEG reduce using rule 57 (string -> STRING .)
    SEMICOLON       reduce using rule 57 (string -> STRING .)
    BLOCK_BEGIN     reduce using rule 57 (string -> STRING .)
    CLOSE_PARANTHESIS reduce using rule 57 (string -> STRING .)
    COMMA           reduce using rule 57 (string -> STRING .)


state 50

    (75) expression -> NOT_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 106
    empty                          shift and go to state 58

state 54

    (68) number -> HEXADECIMAL .

    OR_STR_OP       reduce using rule 68 (number -> HEXADECIMAL .)
    XOR_STR_OP      reduce using rule 68 (number -> HEXADECIMAL .)
    AND_STR_OP      reduce using rule 68 (number -> HEXADECIMAL .)
    NOT_STR_OP      reduce using rule 68 (number -> HEXADECIMAL .)
    COMPARE_OP      reduce using rule 68 (number -> HEXADECIMAL .)
    BIT_OR          reduce using rule 68 (number -> HEXADECIMAL .)
    BIT_XOR         reduce using rule 68 (number -> HEXADECIMAL .)
    BIT_AND         reduce using rule 68 (number -> HEXADECIMAL .)
    AND_OP          reduce using rule 68 (number -> HEXADECIMAL .)
    OR_OP           reduce using rule 68 (number -> HEXADECIMAL .)
    EQUALS_OP       reduce using rule 68 (number -> HEXADECIMAL .)
    NOT_EQUALS_OP   reduce using rule 68 (number -> HEXADECIMAL .)
    GREATER_OP      reduce using rule 68 (number -> HEXADECIMAL .)
    LESS_OP         reduce using rule 68 (number -> HEXADECIMAL .)
    GREATER_EQUAL_OP reduce using rule 68 (number -> HEXADECIMAL .)
    LESS_EQUAL_OP   reduce using rule 68 (number -> HEXADECIMAL .)
    PLUS_OP         reduce using rule 68 (number -> HEXADECIMAL .)
    MINUS_OP        reduce using rule 68 (number -> HEXADECIMAL .)
    MULTIPLICATION_OP reduce using rule 68 (number -> HEXADECIMAL .)
    DIVISION_OP     reduce using rule 68 (number -> HEXADECIMAL .)
    MODULUS_OP      reduce using rule 68 (number -> HEXADECIMAL .)
    EXPONENT_OP     reduce using rule 68 (number -> HEXADECIMAL .)
    BIT_RIGHT_SHIFT reduce using rule 68 (number -> HEXADECIMAL .)
    BIT_LEFT_SHIFT  reduce using rule 68 (number -> HEXADECIMAL .)
    CONCATENATE     reduce using rule 68 (number -> HEXADECIMAL .)
    REP_OP          reduce using rule 68 (number -> HEXADECIMAL .)
    COMMA           reduce using rule 68 (number -> HEXADECIMAL .)
    ASSOCIATE_OP    reduce using rule 68 (number -> HEXADECIMAL .)
    RANGE_OP        reduce using rule 68 (number -> HEXADECIMAL .)
    SEARCH_MODIFY   reduce using rule 68 (number -> HEXADECIMAL .)
    SEARCH_MODIFY_NEG reduce using rule 68 (number -> HEXADECIMAL .)
    SEMICOLON       reduce using rule 68 (number -> HEXADECIMAL .)
    BLOCK_BEGIN     reduce using rule 68 (number -> HEXADECIMAL .)
    CLOSE_PARANTHESIS reduce using rule 68 (number -> HEXADECIMAL .)


state 55

    (71) term -> string .

    OR_STR_OP       reduce using rule 71 (term -> string .)
    XOR_STR_OP      reduce using rule 71 (term -> string .)
    AND_STR_OP      reduce using rule 71 (term -> string .)
    NOT_STR_OP      reduce using rule 71 (term -> string .)
    COMPARE_OP      reduce using rule 71 (term -> string .)
    BIT_OR          reduce using rule 71 (term -> string .)
    BIT_XOR         reduce using rule 71 (term -> string .)
    BIT_AND         reduce using rule 71 (term -> string .)
    AND_OP          reduce using rule 71 (term -> string .)
    OR_OP           reduce using rule 71 (term -> string .)
    EQUALS_OP       reduce using rule 71 (term -> string .)
    NOT_EQUALS_OP   reduce using rule 71 (term -> string .)
    GREATER_OP      reduce using rule 71 (term -> string .)
    LESS_OP         reduce using rule 71 (term -> string .)
    GREATER_EQUAL_OP reduce using rule 71 (term -> string .)
    LESS_EQUAL_OP   reduce using rule 71 (term -> string .)
    PLUS_OP         reduce using rule 71 (term -> string .)
    MINUS_OP        reduce using rule 71 (term -> string .)
    MULTIPLICATION_OP reduce using rule 71 (term -> string .)
    DIVISION_OP     reduce using rule 71 (term -> string .)
    MODULUS_OP      reduce using rule 71 (term -> string .)
    EXPONENT_OP     reduce using rule 71 (term -> string .)
    BIT_RIGHT_SHIFT reduce using rule 71 (term -> string .)
    BIT_LEFT_SHIFT  reduce using rule 71 (term -> string .)
    CONCATENATE     reduce using rule 71 (term -> string .)
    REP_OP          reduce using rule 71 (term -> string .)
    COMMA           reduce using rule 71 (term -> string .)
    ASSOCIATE_OP    reduce using rule 71 (term -> string .)
    RANGE_OP        reduce using rule 71 (term -> string .)
    SEARCH_MODIFY   reduce using rule 71 (term -> string .)
    SEARCH_MODIFY_NEG reduce using rule 71 (term -> string .)
    SEMICOLON       reduce using rule 71 (term -> string .)
    BLOCK_BEGIN     reduce using rule 71 (term -> string .)
    CLOSE_PARANTHESIS reduce using rule 71 (term -> string .)


state 56

    (76) expression -> BIT_FLIP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 102
    empty                          shift and go to state 55

state 51

    (62) number -> HEXADECIMAL .

    OR_STR_OP       reduce using rule 62 (number -> HEXADECIMAL .)
    XOR_STR_OP      reduce using rule 62 (number -> HEXADECIMAL .)
    AND_STR_OP      reduce using rule 62 (number -> HEXADECIMAL .)
    NOT_STR_OP      reduce using rule 62 (number -> HEXADECIMAL .)
    COMPARE_OP      reduce using rule 62 (number -> HEXADECIMAL .)
    BIT_OR          reduce using rule 62 (number -> HEXADECIMAL .)
    BIT_XOR         reduce using rule 62 (number -> HEXADECIMAL .)
    BIT_AND         reduce using rule 62 (number -> HEXADECIMAL .)
    AND_OP          reduce using rule 62 (number -> HEXADECIMAL .)
    OR_OP           reduce using rule 62 (number -> HEXADECIMAL .)
    EQUALS_OP       reduce using rule 62 (number -> HEXADECIMAL .)
    NOT_EQUALS_OP   reduce using rule 62 (number -> HEXADECIMAL .)
    GREATER_OP      reduce using rule 62 (number -> HEXADECIMAL .)
    LESS_OP         reduce using rule 62 (number -> HEXADECIMAL .)
    GREATER_EQUAL_OP reduce using rule 62 (number -> HEXADECIMAL .)
    LESS_EQUAL_OP   reduce using rule 62 (number -> HEXADECIMAL .)
    PLUS_OP         reduce using rule 62 (number -> HEXADECIMAL .)
    MINUS_OP        reduce using rule 62 (number -> HEXADECIMAL .)
    MULTIPLICATION_OP reduce using rule 62 (number -> HEXADECIMAL .)
    DIVISION_OP     reduce using rule 62 (number -> HEXADECIMAL .)
    MODULUS_OP      reduce using rule 62 (number -> HEXADECIMAL .)
    EXPONENT_OP     reduce using rule 62 (number -> HEXADECIMAL .)
    BIT_RIGHT_SHIFT reduce using rule 62 (number -> HEXADECIMAL .)
    BIT_LEFT_SHIFT  reduce using rule 62 (number -> HEXADECIMAL .)
    CONCATENATE     reduce using rule 62 (number -> HEXADECIMAL .)
    REP_OP          reduce using rule 62 (number -> HEXADECIMAL .)
    ASSOCIATE_OP    reduce using rule 62 (number -> HEXADECIMAL .)
    RANGE_OP        reduce using rule 62 (number -> HEXADECIMAL .)
    SEARCH_MODIFY   reduce using rule 62 (number -> HEXADECIMAL .)
    SEARCH_MODIFY_NEG reduce using rule 62 (number -> HEXADECIMAL .)
    SEMICOLON       reduce using rule 62 (number -> HEXADECIMAL .)
    BLOCK_BEGIN     reduce using rule 62 (number -> HEXADECIMAL .)
    CLOSE_PARANTHESIS reduce using rule 62 (number -> HEXADECIMAL .)
    COMMA           reduce using rule 62 (number -> HEXADECIMAL .)


state 52

    (65) term -> string .

    OR_STR_OP       reduce using rule 65 (term -> string .)
    XOR_STR_OP      reduce using rule 65 (term -> string .)
    AND_STR_OP      reduce using rule 65 (term -> string .)
    NOT_STR_OP      reduce using rule 65 (term -> string .)
    COMPARE_OP      reduce using rule 65 (term -> string .)
    BIT_OR          reduce using rule 65 (term -> string .)
    BIT_XOR         reduce using rule 65 (term -> string .)
    BIT_AND         reduce using rule 65 (term -> string .)
    AND_OP          reduce using rule 65 (term -> string .)
    OR_OP           reduce using rule 65 (term -> string .)
    EQUALS_OP       reduce using rule 65 (term -> string .)
    NOT_EQUALS_OP   reduce using rule 65 (term -> string .)
    GREATER_OP      reduce using rule 65 (term -> string .)
    LESS_OP         reduce using rule 65 (term -> string .)
    GREATER_EQUAL_OP reduce using rule 65 (term -> string .)
    LESS_EQUAL_OP   reduce using rule 65 (term -> string .)
    PLUS_OP         reduce using rule 65 (term -> string .)
    MINUS_OP        reduce using rule 65 (term -> string .)
    MULTIPLICATION_OP reduce using rule 65 (term -> string .)
    DIVISION_OP     reduce using rule 65 (term -> string .)
    MODULUS_OP      reduce using rule 65 (term -> string .)
    EXPONENT_OP     reduce using rule 65 (term -> string .)
    BIT_RIGHT_SHIFT reduce using rule 65 (term -> string .)
    BIT_LEFT_SHIFT  reduce using rule 65 (term -> string .)
    CONCATENATE     reduce using rule 65 (term -> string .)
    REP_OP          reduce using rule 65 (term -> string .)
    ASSOCIATE_OP    reduce using rule 65 (term -> string .)
    RANGE_OP        reduce using rule 65 (term -> string .)
    SEARCH_MODIFY   reduce using rule 65 (term -> string .)
    SEARCH_MODIFY_NEG reduce using rule 65 (term -> string .)
    SEMICOLON       reduce using rule 65 (term -> string .)
    BLOCK_BEGIN     reduce using rule 65 (term -> string .)
    CLOSE_PARANTHESIS reduce using rule 65 (term -> string .)
    COMMA           reduce using rule 65 (term -> string .)


state 53

    (74) expression -> BIT_FLIP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 107
    empty                          shift and go to state 58

state 57

    (63) string -> STRING .

    CLOSE_PARANTHESIS reduce using rule 63 (string -> STRING .)
    OR_STR_OP       reduce using rule 63 (string -> STRING .)
    XOR_STR_OP      reduce using rule 63 (string -> STRING .)
    AND_STR_OP      reduce using rule 63 (string -> STRING .)
    NOT_STR_OP      reduce using rule 63 (string -> STRING .)
    COMPARE_OP      reduce using rule 63 (string -> STRING .)
    BIT_OR          reduce using rule 63 (string -> STRING .)
    BIT_XOR         reduce using rule 63 (string -> STRING .)
    BIT_AND         reduce using rule 63 (string -> STRING .)
    AND_OP          reduce using rule 63 (string -> STRING .)
    OR_OP           reduce using rule 63 (string -> STRING .)
    EQUALS_OP       reduce using rule 63 (string -> STRING .)
    NOT_EQUALS_OP   reduce using rule 63 (string -> STRING .)
    GREATER_OP      reduce using rule 63 (string -> STRING .)
    LESS_OP         reduce using rule 63 (string -> STRING .)
    GREATER_EQUAL_OP reduce using rule 63 (string -> STRING .)
    LESS_EQUAL_OP   reduce using rule 63 (string -> STRING .)
    PLUS_OP         reduce using rule 63 (string -> STRING .)
    MINUS_OP        reduce using rule 63 (string -> STRING .)
    MULTIPLICATION_OP reduce using rule 63 (string -> STRING .)
    DIVISION_OP     reduce using rule 63 (string -> STRING .)
    MODULUS_OP      reduce using rule 63 (string -> STRING .)
    EXPONENT_OP     reduce using rule 63 (string -> STRING .)
    BIT_RIGHT_SHIFT reduce using rule 63 (string -> STRING .)
    BIT_LEFT_SHIFT  reduce using rule 63 (string -> STRING .)
    CONCATENATE     reduce using rule 63 (string -> STRING .)
    REP_OP          reduce using rule 63 (string -> STRING .)
    COMMA           reduce using rule 63 (string -> STRING .)
    ASSOCIATE_OP    reduce using rule 63 (string -> STRING .)
    RANGE_OP        reduce using rule 63 (string -> STRING .)
    SEARCH_MODIFY   reduce using rule 63 (string -> STRING .)
    SEARCH_MODIFY_NEG reduce using rule 63 (string -> STRING .)
    SEMICOLON       reduce using rule 63 (string -> STRING .)
    BLOCK_BEGIN     reduce using rule 63 (string -> STRING .)
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 103
    empty                          shift and go to state 55

state 54

    (68) term -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    OPEN_BRACKET    shift and go to state 104

<<<<<<< HEAD
state 58

    (78) expression -> empty .

    SEMICOLON       reduce using rule 78 (expression -> empty .)
    OR_STR_OP       reduce using rule 78 (expression -> empty .)
    XOR_STR_OP      reduce using rule 78 (expression -> empty .)
    AND_STR_OP      reduce using rule 78 (expression -> empty .)
    NOT_STR_OP      reduce using rule 78 (expression -> empty .)
    COMPARE_OP      reduce using rule 78 (expression -> empty .)
    BIT_OR          reduce using rule 78 (expression -> empty .)
    BIT_XOR         reduce using rule 78 (expression -> empty .)
    BIT_AND         reduce using rule 78 (expression -> empty .)
    AND_OP          reduce using rule 78 (expression -> empty .)
    OR_OP           reduce using rule 78 (expression -> empty .)
    EQUALS_OP       reduce using rule 78 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 78 (expression -> empty .)
    GREATER_OP      reduce using rule 78 (expression -> empty .)
    LESS_OP         reduce using rule 78 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 78 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 78 (expression -> empty .)
    PLUS_OP         reduce using rule 78 (expression -> empty .)
    MINUS_OP        reduce using rule 78 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 78 (expression -> empty .)
    DIVISION_OP     reduce using rule 78 (expression -> empty .)
    MODULUS_OP      reduce using rule 78 (expression -> empty .)
    EXPONENT_OP     reduce using rule 78 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 78 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 78 (expression -> empty .)
    CONCATENATE     reduce using rule 78 (expression -> empty .)
    REP_OP          reduce using rule 78 (expression -> empty .)
    COMMA           reduce using rule 78 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 78 (expression -> empty .)
    RANGE_OP        reduce using rule 78 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 78 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 78 (expression -> empty .)
    BLOCK_BEGIN     reduce using rule 78 (expression -> empty .)
    CLOSE_PARANTHESIS reduce using rule 78 (expression -> empty .)
=======

state 55
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (76) expression -> empty .

    OR_STR_OP       reduce using rule 76 (expression -> empty .)
    XOR_STR_OP      reduce using rule 76 (expression -> empty .)
    AND_STR_OP      reduce using rule 76 (expression -> empty .)
    NOT_STR_OP      reduce using rule 76 (expression -> empty .)
    COMPARE_OP      reduce using rule 76 (expression -> empty .)
    BIT_OR          reduce using rule 76 (expression -> empty .)
    BIT_XOR         reduce using rule 76 (expression -> empty .)
    BIT_AND         reduce using rule 76 (expression -> empty .)
    AND_OP          reduce using rule 76 (expression -> empty .)
    OR_OP           reduce using rule 76 (expression -> empty .)
    EQUALS_OP       reduce using rule 76 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 76 (expression -> empty .)
    GREATER_OP      reduce using rule 76 (expression -> empty .)
    LESS_OP         reduce using rule 76 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 76 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 76 (expression -> empty .)
    PLUS_OP         reduce using rule 76 (expression -> empty .)
    MINUS_OP        reduce using rule 76 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 76 (expression -> empty .)
    DIVISION_OP     reduce using rule 76 (expression -> empty .)
    MODULUS_OP      reduce using rule 76 (expression -> empty .)
    EXPONENT_OP     reduce using rule 76 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 76 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 76 (expression -> empty .)
    CONCATENATE     reduce using rule 76 (expression -> empty .)
    REP_OP          reduce using rule 76 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 76 (expression -> empty .)
    RANGE_OP        reduce using rule 76 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 76 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 76 (expression -> empty .)
    SEMICOLON       reduce using rule 76 (expression -> empty .)
    BLOCK_BEGIN     reduce using rule 76 (expression -> empty .)
    CLOSE_PARANTHESIS reduce using rule 76 (expression -> empty .)
    COMMA           reduce using rule 76 (expression -> empty .)

<<<<<<< HEAD
state 59

    (64) string -> RES_STRING .

    CLOSE_PARANTHESIS reduce using rule 64 (string -> RES_STRING .)
    OR_STR_OP       reduce using rule 64 (string -> RES_STRING .)
    XOR_STR_OP      reduce using rule 64 (string -> RES_STRING .)
    AND_STR_OP      reduce using rule 64 (string -> RES_STRING .)
    NOT_STR_OP      reduce using rule 64 (string -> RES_STRING .)
    COMPARE_OP      reduce using rule 64 (string -> RES_STRING .)
    BIT_OR          reduce using rule 64 (string -> RES_STRING .)
    BIT_XOR         reduce using rule 64 (string -> RES_STRING .)
    BIT_AND         reduce using rule 64 (string -> RES_STRING .)
    AND_OP          reduce using rule 64 (string -> RES_STRING .)
    OR_OP           reduce using rule 64 (string -> RES_STRING .)
    EQUALS_OP       reduce using rule 64 (string -> RES_STRING .)
    NOT_EQUALS_OP   reduce using rule 64 (string -> RES_STRING .)
    GREATER_OP      reduce using rule 64 (string -> RES_STRING .)
    LESS_OP         reduce using rule 64 (string -> RES_STRING .)
    GREATER_EQUAL_OP reduce using rule 64 (string -> RES_STRING .)
    LESS_EQUAL_OP   reduce using rule 64 (string -> RES_STRING .)
    PLUS_OP         reduce using rule 64 (string -> RES_STRING .)
    MINUS_OP        reduce using rule 64 (string -> RES_STRING .)
    MULTIPLICATION_OP reduce using rule 64 (string -> RES_STRING .)
    DIVISION_OP     reduce using rule 64 (string -> RES_STRING .)
    MODULUS_OP      reduce using rule 64 (string -> RES_STRING .)
    EXPONENT_OP     reduce using rule 64 (string -> RES_STRING .)
    BIT_RIGHT_SHIFT reduce using rule 64 (string -> RES_STRING .)
    BIT_LEFT_SHIFT  reduce using rule 64 (string -> RES_STRING .)
    CONCATENATE     reduce using rule 64 (string -> RES_STRING .)
    REP_OP          reduce using rule 64 (string -> RES_STRING .)
    COMMA           reduce using rule 64 (string -> RES_STRING .)
    ASSOCIATE_OP    reduce using rule 64 (string -> RES_STRING .)
    RANGE_OP        reduce using rule 64 (string -> RES_STRING .)
    SEARCH_MODIFY   reduce using rule 64 (string -> RES_STRING .)
    SEARCH_MODIFY_NEG reduce using rule 64 (string -> RES_STRING .)
    SEMICOLON       reduce using rule 64 (string -> RES_STRING .)
    BLOCK_BEGIN     reduce using rule 64 (string -> RES_STRING .)
=======

state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (58) string -> RES_STRING .

    OR_STR_OP       reduce using rule 58 (string -> RES_STRING .)
    XOR_STR_OP      reduce using rule 58 (string -> RES_STRING .)
    AND_STR_OP      reduce using rule 58 (string -> RES_STRING .)
    NOT_STR_OP      reduce using rule 58 (string -> RES_STRING .)
    COMPARE_OP      reduce using rule 58 (string -> RES_STRING .)
    BIT_OR          reduce using rule 58 (string -> RES_STRING .)
    BIT_XOR         reduce using rule 58 (string -> RES_STRING .)
    BIT_AND         reduce using rule 58 (string -> RES_STRING .)
    AND_OP          reduce using rule 58 (string -> RES_STRING .)
    OR_OP           reduce using rule 58 (string -> RES_STRING .)
    EQUALS_OP       reduce using rule 58 (string -> RES_STRING .)
    NOT_EQUALS_OP   reduce using rule 58 (string -> RES_STRING .)
    GREATER_OP      reduce using rule 58 (string -> RES_STRING .)
    LESS_OP         reduce using rule 58 (string -> RES_STRING .)
    GREATER_EQUAL_OP reduce using rule 58 (string -> RES_STRING .)
    LESS_EQUAL_OP   reduce using rule 58 (string -> RES_STRING .)
    PLUS_OP         reduce using rule 58 (string -> RES_STRING .)
    MINUS_OP        reduce using rule 58 (string -> RES_STRING .)
    MULTIPLICATION_OP reduce using rule 58 (string -> RES_STRING .)
    DIVISION_OP     reduce using rule 58 (string -> RES_STRING .)
    MODULUS_OP      reduce using rule 58 (string -> RES_STRING .)
    EXPONENT_OP     reduce using rule 58 (string -> RES_STRING .)
    BIT_RIGHT_SHIFT reduce using rule 58 (string -> RES_STRING .)
    BIT_LEFT_SHIFT  reduce using rule 58 (string -> RES_STRING .)
    CONCATENATE     reduce using rule 58 (string -> RES_STRING .)
    REP_OP          reduce using rule 58 (string -> RES_STRING .)
    ASSOCIATE_OP    reduce using rule 58 (string -> RES_STRING .)
    RANGE_OP        reduce using rule 58 (string -> RES_STRING .)
    SEARCH_MODIFY   reduce using rule 58 (string -> RES_STRING .)
    SEARCH_MODIFY_NEG reduce using rule 58 (string -> RES_STRING .)
    SEMICOLON       reduce using rule 58 (string -> RES_STRING .)
    BLOCK_BEGIN     reduce using rule 58 (string -> RES_STRING .)
    CLOSE_PARANTHESIS reduce using rule 58 (string -> RES_STRING .)
    COMMA           reduce using rule 58 (string -> RES_STRING .)

<<<<<<< HEAD
state 60

    (65) number -> NUMBER .

    OR_STR_OP       reduce using rule 65 (number -> NUMBER .)
    XOR_STR_OP      reduce using rule 65 (number -> NUMBER .)
    AND_STR_OP      reduce using rule 65 (number -> NUMBER .)
    NOT_STR_OP      reduce using rule 65 (number -> NUMBER .)
    COMPARE_OP      reduce using rule 65 (number -> NUMBER .)
    BIT_OR          reduce using rule 65 (number -> NUMBER .)
    BIT_XOR         reduce using rule 65 (number -> NUMBER .)
    BIT_AND         reduce using rule 65 (number -> NUMBER .)
    AND_OP          reduce using rule 65 (number -> NUMBER .)
    OR_OP           reduce using rule 65 (number -> NUMBER .)
    EQUALS_OP       reduce using rule 65 (number -> NUMBER .)
    NOT_EQUALS_OP   reduce using rule 65 (number -> NUMBER .)
    GREATER_OP      reduce using rule 65 (number -> NUMBER .)
    LESS_OP         reduce using rule 65 (number -> NUMBER .)
    GREATER_EQUAL_OP reduce using rule 65 (number -> NUMBER .)
    LESS_EQUAL_OP   reduce using rule 65 (number -> NUMBER .)
    PLUS_OP         reduce using rule 65 (number -> NUMBER .)
    MINUS_OP        reduce using rule 65 (number -> NUMBER .)
    MULTIPLICATION_OP reduce using rule 65 (number -> NUMBER .)
    DIVISION_OP     reduce using rule 65 (number -> NUMBER .)
    MODULUS_OP      reduce using rule 65 (number -> NUMBER .)
    EXPONENT_OP     reduce using rule 65 (number -> NUMBER .)
    BIT_RIGHT_SHIFT reduce using rule 65 (number -> NUMBER .)
    BIT_LEFT_SHIFT  reduce using rule 65 (number -> NUMBER .)
    CONCATENATE     reduce using rule 65 (number -> NUMBER .)
    REP_OP          reduce using rule 65 (number -> NUMBER .)
    COMMA           reduce using rule 65 (number -> NUMBER .)
    ASSOCIATE_OP    reduce using rule 65 (number -> NUMBER .)
    RANGE_OP        reduce using rule 65 (number -> NUMBER .)
    SEARCH_MODIFY   reduce using rule 65 (number -> NUMBER .)
    SEARCH_MODIFY_NEG reduce using rule 65 (number -> NUMBER .)
    SEMICOLON       reduce using rule 65 (number -> NUMBER .)
    BLOCK_BEGIN     reduce using rule 65 (number -> NUMBER .)
    CLOSE_PARANTHESIS reduce using rule 65 (number -> NUMBER .)
=======

state 57
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (59) number -> NUMBER .

    OR_STR_OP       reduce using rule 59 (number -> NUMBER .)
    XOR_STR_OP      reduce using rule 59 (number -> NUMBER .)
    AND_STR_OP      reduce using rule 59 (number -> NUMBER .)
    NOT_STR_OP      reduce using rule 59 (number -> NUMBER .)
    COMPARE_OP      reduce using rule 59 (number -> NUMBER .)
    BIT_OR          reduce using rule 59 (number -> NUMBER .)
    BIT_XOR         reduce using rule 59 (number -> NUMBER .)
    BIT_AND         reduce using rule 59 (number -> NUMBER .)
    AND_OP          reduce using rule 59 (number -> NUMBER .)
    OR_OP           reduce using rule 59 (number -> NUMBER .)
    EQUALS_OP       reduce using rule 59 (number -> NUMBER .)
    NOT_EQUALS_OP   reduce using rule 59 (number -> NUMBER .)
    GREATER_OP      reduce using rule 59 (number -> NUMBER .)
    LESS_OP         reduce using rule 59 (number -> NUMBER .)
    GREATER_EQUAL_OP reduce using rule 59 (number -> NUMBER .)
    LESS_EQUAL_OP   reduce using rule 59 (number -> NUMBER .)
    PLUS_OP         reduce using rule 59 (number -> NUMBER .)
    MINUS_OP        reduce using rule 59 (number -> NUMBER .)
    MULTIPLICATION_OP reduce using rule 59 (number -> NUMBER .)
    DIVISION_OP     reduce using rule 59 (number -> NUMBER .)
    MODULUS_OP      reduce using rule 59 (number -> NUMBER .)
    EXPONENT_OP     reduce using rule 59 (number -> NUMBER .)
    BIT_RIGHT_SHIFT reduce using rule 59 (number -> NUMBER .)
    BIT_LEFT_SHIFT  reduce using rule 59 (number -> NUMBER .)
    CONCATENATE     reduce using rule 59 (number -> NUMBER .)
    REP_OP          reduce using rule 59 (number -> NUMBER .)
    ASSOCIATE_OP    reduce using rule 59 (number -> NUMBER .)
    RANGE_OP        reduce using rule 59 (number -> NUMBER .)
    SEARCH_MODIFY   reduce using rule 59 (number -> NUMBER .)
    SEARCH_MODIFY_NEG reduce using rule 59 (number -> NUMBER .)
    SEMICOLON       reduce using rule 59 (number -> NUMBER .)
    BLOCK_BEGIN     reduce using rule 59 (number -> NUMBER .)
    CLOSE_PARANTHESIS reduce using rule 59 (number -> NUMBER .)
    COMMA           reduce using rule 59 (number -> NUMBER .)

<<<<<<< HEAD
state 61

    (62) term -> functionCall .

    OR_STR_OP       reduce using rule 62 (term -> functionCall .)
    XOR_STR_OP      reduce using rule 62 (term -> functionCall .)
    AND_STR_OP      reduce using rule 62 (term -> functionCall .)
    NOT_STR_OP      reduce using rule 62 (term -> functionCall .)
    COMPARE_OP      reduce using rule 62 (term -> functionCall .)
    BIT_OR          reduce using rule 62 (term -> functionCall .)
    BIT_XOR         reduce using rule 62 (term -> functionCall .)
    BIT_AND         reduce using rule 62 (term -> functionCall .)
    AND_OP          reduce using rule 62 (term -> functionCall .)
    OR_OP           reduce using rule 62 (term -> functionCall .)
    EQUALS_OP       reduce using rule 62 (term -> functionCall .)
    NOT_EQUALS_OP   reduce using rule 62 (term -> functionCall .)
    GREATER_OP      reduce using rule 62 (term -> functionCall .)
    LESS_OP         reduce using rule 62 (term -> functionCall .)
    GREATER_EQUAL_OP reduce using rule 62 (term -> functionCall .)
    LESS_EQUAL_OP   reduce using rule 62 (term -> functionCall .)
    PLUS_OP         reduce using rule 62 (term -> functionCall .)
    MINUS_OP        reduce using rule 62 (term -> functionCall .)
    MULTIPLICATION_OP reduce using rule 62 (term -> functionCall .)
    DIVISION_OP     reduce using rule 62 (term -> functionCall .)
    MODULUS_OP      reduce using rule 62 (term -> functionCall .)
    EXPONENT_OP     reduce using rule 62 (term -> functionCall .)
    BIT_RIGHT_SHIFT reduce using rule 62 (term -> functionCall .)
    BIT_LEFT_SHIFT  reduce using rule 62 (term -> functionCall .)
    CONCATENATE     reduce using rule 62 (term -> functionCall .)
    REP_OP          reduce using rule 62 (term -> functionCall .)
    COMMA           reduce using rule 62 (term -> functionCall .)
    ASSOCIATE_OP    reduce using rule 62 (term -> functionCall .)
    RANGE_OP        reduce using rule 62 (term -> functionCall .)
    SEARCH_MODIFY   reduce using rule 62 (term -> functionCall .)
    SEARCH_MODIFY_NEG reduce using rule 62 (term -> functionCall .)
    SEMICOLON       reduce using rule 62 (term -> functionCall .)
    BLOCK_BEGIN     reduce using rule 62 (term -> functionCall .)
    CLOSE_PARANTHESIS reduce using rule 62 (term -> functionCall .)
=======

state 58
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (49) term -> functionCall .

    OR_STR_OP       reduce using rule 49 (term -> functionCall .)
    XOR_STR_OP      reduce using rule 49 (term -> functionCall .)
    AND_STR_OP      reduce using rule 49 (term -> functionCall .)
    NOT_STR_OP      reduce using rule 49 (term -> functionCall .)
    COMPARE_OP      reduce using rule 49 (term -> functionCall .)
    BIT_OR          reduce using rule 49 (term -> functionCall .)
    BIT_XOR         reduce using rule 49 (term -> functionCall .)
    BIT_AND         reduce using rule 49 (term -> functionCall .)
    AND_OP          reduce using rule 49 (term -> functionCall .)
    OR_OP           reduce using rule 49 (term -> functionCall .)
    EQUALS_OP       reduce using rule 49 (term -> functionCall .)
    NOT_EQUALS_OP   reduce using rule 49 (term -> functionCall .)
    GREATER_OP      reduce using rule 49 (term -> functionCall .)
    LESS_OP         reduce using rule 49 (term -> functionCall .)
    GREATER_EQUAL_OP reduce using rule 49 (term -> functionCall .)
    LESS_EQUAL_OP   reduce using rule 49 (term -> functionCall .)
    PLUS_OP         reduce using rule 49 (term -> functionCall .)
    MINUS_OP        reduce using rule 49 (term -> functionCall .)
    MULTIPLICATION_OP reduce using rule 49 (term -> functionCall .)
    DIVISION_OP     reduce using rule 49 (term -> functionCall .)
    MODULUS_OP      reduce using rule 49 (term -> functionCall .)
    EXPONENT_OP     reduce using rule 49 (term -> functionCall .)
    BIT_RIGHT_SHIFT reduce using rule 49 (term -> functionCall .)
    BIT_LEFT_SHIFT  reduce using rule 49 (term -> functionCall .)
    CONCATENATE     reduce using rule 49 (term -> functionCall .)
    REP_OP          reduce using rule 49 (term -> functionCall .)
    ASSOCIATE_OP    reduce using rule 49 (term -> functionCall .)
    RANGE_OP        reduce using rule 49 (term -> functionCall .)
    SEARCH_MODIFY   reduce using rule 49 (term -> functionCall .)
    SEARCH_MODIFY_NEG reduce using rule 49 (term -> functionCall .)
    SEMICOLON       reduce using rule 49 (term -> functionCall .)
    BLOCK_BEGIN     reduce using rule 49 (term -> functionCall .)
    CLOSE_PARANTHESIS reduce using rule 49 (term -> functionCall .)
    COMMA           reduce using rule 49 (term -> functionCall .)

<<<<<<< HEAD
state 62

    (66) number -> SCI_NOT .

    OR_STR_OP       reduce using rule 66 (number -> SCI_NOT .)
    XOR_STR_OP      reduce using rule 66 (number -> SCI_NOT .)
    AND_STR_OP      reduce using rule 66 (number -> SCI_NOT .)
    NOT_STR_OP      reduce using rule 66 (number -> SCI_NOT .)
    COMPARE_OP      reduce using rule 66 (number -> SCI_NOT .)
    BIT_OR          reduce using rule 66 (number -> SCI_NOT .)
    BIT_XOR         reduce using rule 66 (number -> SCI_NOT .)
    BIT_AND         reduce using rule 66 (number -> SCI_NOT .)
    AND_OP          reduce using rule 66 (number -> SCI_NOT .)
    OR_OP           reduce using rule 66 (number -> SCI_NOT .)
    EQUALS_OP       reduce using rule 66 (number -> SCI_NOT .)
    NOT_EQUALS_OP   reduce using rule 66 (number -> SCI_NOT .)
    GREATER_OP      reduce using rule 66 (number -> SCI_NOT .)
    LESS_OP         reduce using rule 66 (number -> SCI_NOT .)
    GREATER_EQUAL_OP reduce using rule 66 (number -> SCI_NOT .)
    LESS_EQUAL_OP   reduce using rule 66 (number -> SCI_NOT .)
    PLUS_OP         reduce using rule 66 (number -> SCI_NOT .)
    MINUS_OP        reduce using rule 66 (number -> SCI_NOT .)
    MULTIPLICATION_OP reduce using rule 66 (number -> SCI_NOT .)
    DIVISION_OP     reduce using rule 66 (number -> SCI_NOT .)
    MODULUS_OP      reduce using rule 66 (number -> SCI_NOT .)
    EXPONENT_OP     reduce using rule 66 (number -> SCI_NOT .)
    BIT_RIGHT_SHIFT reduce using rule 66 (number -> SCI_NOT .)
    BIT_LEFT_SHIFT  reduce using rule 66 (number -> SCI_NOT .)
    CONCATENATE     reduce using rule 66 (number -> SCI_NOT .)
    REP_OP          reduce using rule 66 (number -> SCI_NOT .)
    COMMA           reduce using rule 66 (number -> SCI_NOT .)
    ASSOCIATE_OP    reduce using rule 66 (number -> SCI_NOT .)
    RANGE_OP        reduce using rule 66 (number -> SCI_NOT .)
    SEARCH_MODIFY   reduce using rule 66 (number -> SCI_NOT .)
    SEARCH_MODIFY_NEG reduce using rule 66 (number -> SCI_NOT .)
    SEMICOLON       reduce using rule 66 (number -> SCI_NOT .)
    BLOCK_BEGIN     reduce using rule 66 (number -> SCI_NOT .)
    CLOSE_PARANTHESIS reduce using rule 66 (number -> SCI_NOT .)
=======

state 59
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (60) number -> SCI_NOT .

    OR_STR_OP       reduce using rule 60 (number -> SCI_NOT .)
    XOR_STR_OP      reduce using rule 60 (number -> SCI_NOT .)
    AND_STR_OP      reduce using rule 60 (number -> SCI_NOT .)
    NOT_STR_OP      reduce using rule 60 (number -> SCI_NOT .)
    COMPARE_OP      reduce using rule 60 (number -> SCI_NOT .)
    BIT_OR          reduce using rule 60 (number -> SCI_NOT .)
    BIT_XOR         reduce using rule 60 (number -> SCI_NOT .)
    BIT_AND         reduce using rule 60 (number -> SCI_NOT .)
    AND_OP          reduce using rule 60 (number -> SCI_NOT .)
    OR_OP           reduce using rule 60 (number -> SCI_NOT .)
    EQUALS_OP       reduce using rule 60 (number -> SCI_NOT .)
    NOT_EQUALS_OP   reduce using rule 60 (number -> SCI_NOT .)
    GREATER_OP      reduce using rule 60 (number -> SCI_NOT .)
    LESS_OP         reduce using rule 60 (number -> SCI_NOT .)
    GREATER_EQUAL_OP reduce using rule 60 (number -> SCI_NOT .)
    LESS_EQUAL_OP   reduce using rule 60 (number -> SCI_NOT .)
    PLUS_OP         reduce using rule 60 (number -> SCI_NOT .)
    MINUS_OP        reduce using rule 60 (number -> SCI_NOT .)
    MULTIPLICATION_OP reduce using rule 60 (number -> SCI_NOT .)
    DIVISION_OP     reduce using rule 60 (number -> SCI_NOT .)
    MODULUS_OP      reduce using rule 60 (number -> SCI_NOT .)
    EXPONENT_OP     reduce using rule 60 (number -> SCI_NOT .)
    BIT_RIGHT_SHIFT reduce using rule 60 (number -> SCI_NOT .)
    BIT_LEFT_SHIFT  reduce using rule 60 (number -> SCI_NOT .)
    CONCATENATE     reduce using rule 60 (number -> SCI_NOT .)
    REP_OP          reduce using rule 60 (number -> SCI_NOT .)
    ASSOCIATE_OP    reduce using rule 60 (number -> SCI_NOT .)
    RANGE_OP        reduce using rule 60 (number -> SCI_NOT .)
    SEARCH_MODIFY   reduce using rule 60 (number -> SCI_NOT .)
    SEARCH_MODIFY_NEG reduce using rule 60 (number -> SCI_NOT .)
    SEMICOLON       reduce using rule 60 (number -> SCI_NOT .)
    BLOCK_BEGIN     reduce using rule 60 (number -> SCI_NOT .)
    CLOSE_PARANTHESIS reduce using rule 60 (number -> SCI_NOT .)
    COMMA           reduce using rule 60 (number -> SCI_NOT .)

<<<<<<< HEAD
state 63

    (72) term -> VARIABLE .

    OR_STR_OP       reduce using rule 72 (term -> VARIABLE .)
    XOR_STR_OP      reduce using rule 72 (term -> VARIABLE .)
    AND_STR_OP      reduce using rule 72 (term -> VARIABLE .)
    NOT_STR_OP      reduce using rule 72 (term -> VARIABLE .)
    COMPARE_OP      reduce using rule 72 (term -> VARIABLE .)
    BIT_OR          reduce using rule 72 (term -> VARIABLE .)
    BIT_XOR         reduce using rule 72 (term -> VARIABLE .)
    BIT_AND         reduce using rule 72 (term -> VARIABLE .)
    AND_OP          reduce using rule 72 (term -> VARIABLE .)
    OR_OP           reduce using rule 72 (term -> VARIABLE .)
    EQUALS_OP       reduce using rule 72 (term -> VARIABLE .)
    NOT_EQUALS_OP   reduce using rule 72 (term -> VARIABLE .)
    GREATER_OP      reduce using rule 72 (term -> VARIABLE .)
    LESS_OP         reduce using rule 72 (term -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 72 (term -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 72 (term -> VARIABLE .)
    PLUS_OP         reduce using rule 72 (term -> VARIABLE .)
    MINUS_OP        reduce using rule 72 (term -> VARIABLE .)
    MULTIPLICATION_OP reduce using rule 72 (term -> VARIABLE .)
    DIVISION_OP     reduce using rule 72 (term -> VARIABLE .)
    MODULUS_OP      reduce using rule 72 (term -> VARIABLE .)
    EXPONENT_OP     reduce using rule 72 (term -> VARIABLE .)
    BIT_RIGHT_SHIFT reduce using rule 72 (term -> VARIABLE .)
    BIT_LEFT_SHIFT  reduce using rule 72 (term -> VARIABLE .)
    CONCATENATE     reduce using rule 72 (term -> VARIABLE .)
    REP_OP          reduce using rule 72 (term -> VARIABLE .)
    COMMA           reduce using rule 72 (term -> VARIABLE .)
    ASSOCIATE_OP    reduce using rule 72 (term -> VARIABLE .)
    RANGE_OP        reduce using rule 72 (term -> VARIABLE .)
    SEARCH_MODIFY   reduce using rule 72 (term -> VARIABLE .)
    SEARCH_MODIFY_NEG reduce using rule 72 (term -> VARIABLE .)
    SEMICOLON       reduce using rule 72 (term -> VARIABLE .)
    BLOCK_BEGIN     reduce using rule 72 (term -> VARIABLE .)
    CLOSE_PARANTHESIS reduce using rule 72 (term -> VARIABLE .)
=======

state 60
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (66) term -> VARIABLE .

    OR_STR_OP       reduce using rule 66 (term -> VARIABLE .)
    XOR_STR_OP      reduce using rule 66 (term -> VARIABLE .)
    AND_STR_OP      reduce using rule 66 (term -> VARIABLE .)
    NOT_STR_OP      reduce using rule 66 (term -> VARIABLE .)
    COMPARE_OP      reduce using rule 66 (term -> VARIABLE .)
    BIT_OR          reduce using rule 66 (term -> VARIABLE .)
    BIT_XOR         reduce using rule 66 (term -> VARIABLE .)
    BIT_AND         reduce using rule 66 (term -> VARIABLE .)
    AND_OP          reduce using rule 66 (term -> VARIABLE .)
    OR_OP           reduce using rule 66 (term -> VARIABLE .)
    EQUALS_OP       reduce using rule 66 (term -> VARIABLE .)
    NOT_EQUALS_OP   reduce using rule 66 (term -> VARIABLE .)
    GREATER_OP      reduce using rule 66 (term -> VARIABLE .)
    LESS_OP         reduce using rule 66 (term -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 66 (term -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 66 (term -> VARIABLE .)
    PLUS_OP         reduce using rule 66 (term -> VARIABLE .)
    MINUS_OP        reduce using rule 66 (term -> VARIABLE .)
    MULTIPLICATION_OP reduce using rule 66 (term -> VARIABLE .)
    DIVISION_OP     reduce using rule 66 (term -> VARIABLE .)
    MODULUS_OP      reduce using rule 66 (term -> VARIABLE .)
    EXPONENT_OP     reduce using rule 66 (term -> VARIABLE .)
    BIT_RIGHT_SHIFT reduce using rule 66 (term -> VARIABLE .)
    BIT_LEFT_SHIFT  reduce using rule 66 (term -> VARIABLE .)
    CONCATENATE     reduce using rule 66 (term -> VARIABLE .)
    REP_OP          reduce using rule 66 (term -> VARIABLE .)
    ASSOCIATE_OP    reduce using rule 66 (term -> VARIABLE .)
    RANGE_OP        reduce using rule 66 (term -> VARIABLE .)
    SEARCH_MODIFY   reduce using rule 66 (term -> VARIABLE .)
    SEARCH_MODIFY_NEG reduce using rule 66 (term -> VARIABLE .)
    SEMICOLON       reduce using rule 66 (term -> VARIABLE .)
    BLOCK_BEGIN     reduce using rule 66 (term -> VARIABLE .)
    CLOSE_PARANTHESIS reduce using rule 66 (term -> VARIABLE .)
    COMMA           reduce using rule 66 (term -> VARIABLE .)

<<<<<<< HEAD
state 64

    (79) expression -> term .

    SEMICOLON       reduce using rule 79 (expression -> term .)
    OR_STR_OP       reduce using rule 79 (expression -> term .)
    XOR_STR_OP      reduce using rule 79 (expression -> term .)
    AND_STR_OP      reduce using rule 79 (expression -> term .)
    NOT_STR_OP      reduce using rule 79 (expression -> term .)
    COMPARE_OP      reduce using rule 79 (expression -> term .)
    BIT_OR          reduce using rule 79 (expression -> term .)
    BIT_XOR         reduce using rule 79 (expression -> term .)
    BIT_AND         reduce using rule 79 (expression -> term .)
    AND_OP          reduce using rule 79 (expression -> term .)
    OR_OP           reduce using rule 79 (expression -> term .)
    EQUALS_OP       reduce using rule 79 (expression -> term .)
    NOT_EQUALS_OP   reduce using rule 79 (expression -> term .)
    GREATER_OP      reduce using rule 79 (expression -> term .)
    LESS_OP         reduce using rule 79 (expression -> term .)
    GREATER_EQUAL_OP reduce using rule 79 (expression -> term .)
    LESS_EQUAL_OP   reduce using rule 79 (expression -> term .)
    PLUS_OP         reduce using rule 79 (expression -> term .)
    MINUS_OP        reduce using rule 79 (expression -> term .)
    MULTIPLICATION_OP reduce using rule 79 (expression -> term .)
    DIVISION_OP     reduce using rule 79 (expression -> term .)
    MODULUS_OP      reduce using rule 79 (expression -> term .)
    EXPONENT_OP     reduce using rule 79 (expression -> term .)
    BIT_RIGHT_SHIFT reduce using rule 79 (expression -> term .)
    BIT_LEFT_SHIFT  reduce using rule 79 (expression -> term .)
    CONCATENATE     reduce using rule 79 (expression -> term .)
    REP_OP          reduce using rule 79 (expression -> term .)
    COMMA           reduce using rule 79 (expression -> term .)
    ASSOCIATE_OP    reduce using rule 79 (expression -> term .)
    RANGE_OP        reduce using rule 79 (expression -> term .)
    SEARCH_MODIFY   reduce using rule 79 (expression -> term .)
    SEARCH_MODIFY_NEG reduce using rule 79 (expression -> term .)
    BLOCK_BEGIN     reduce using rule 79 (expression -> term .)
    CLOSE_PARANTHESIS reduce using rule 79 (expression -> term .)
=======

state 61
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (77) expression -> term .

    OR_STR_OP       reduce using rule 77 (expression -> term .)
    XOR_STR_OP      reduce using rule 77 (expression -> term .)
    AND_STR_OP      reduce using rule 77 (expression -> term .)
    NOT_STR_OP      reduce using rule 77 (expression -> term .)
    COMPARE_OP      reduce using rule 77 (expression -> term .)
    BIT_OR          reduce using rule 77 (expression -> term .)
    BIT_XOR         reduce using rule 77 (expression -> term .)
    BIT_AND         reduce using rule 77 (expression -> term .)
    AND_OP          reduce using rule 77 (expression -> term .)
    OR_OP           reduce using rule 77 (expression -> term .)
    EQUALS_OP       reduce using rule 77 (expression -> term .)
    NOT_EQUALS_OP   reduce using rule 77 (expression -> term .)
    GREATER_OP      reduce using rule 77 (expression -> term .)
    LESS_OP         reduce using rule 77 (expression -> term .)
    GREATER_EQUAL_OP reduce using rule 77 (expression -> term .)
    LESS_EQUAL_OP   reduce using rule 77 (expression -> term .)
    PLUS_OP         reduce using rule 77 (expression -> term .)
    MINUS_OP        reduce using rule 77 (expression -> term .)
    MULTIPLICATION_OP reduce using rule 77 (expression -> term .)
    DIVISION_OP     reduce using rule 77 (expression -> term .)
    MODULUS_OP      reduce using rule 77 (expression -> term .)
    EXPONENT_OP     reduce using rule 77 (expression -> term .)
    BIT_RIGHT_SHIFT reduce using rule 77 (expression -> term .)
    BIT_LEFT_SHIFT  reduce using rule 77 (expression -> term .)
    CONCATENATE     reduce using rule 77 (expression -> term .)
    REP_OP          reduce using rule 77 (expression -> term .)
    ASSOCIATE_OP    reduce using rule 77 (expression -> term .)
    RANGE_OP        reduce using rule 77 (expression -> term .)
    SEARCH_MODIFY   reduce using rule 77 (expression -> term .)
    SEARCH_MODIFY_NEG reduce using rule 77 (expression -> term .)
    SEMICOLON       reduce using rule 77 (expression -> term .)
    BLOCK_BEGIN     reduce using rule 77 (expression -> term .)
    CLOSE_PARANTHESIS reduce using rule 77 (expression -> term .)
    COMMA           reduce using rule 77 (expression -> term .)

<<<<<<< HEAD
state 65

    (69) number -> OCTAL .

    OR_STR_OP       reduce using rule 69 (number -> OCTAL .)
    XOR_STR_OP      reduce using rule 69 (number -> OCTAL .)
    AND_STR_OP      reduce using rule 69 (number -> OCTAL .)
    NOT_STR_OP      reduce using rule 69 (number -> OCTAL .)
    COMPARE_OP      reduce using rule 69 (number -> OCTAL .)
    BIT_OR          reduce using rule 69 (number -> OCTAL .)
    BIT_XOR         reduce using rule 69 (number -> OCTAL .)
    BIT_AND         reduce using rule 69 (number -> OCTAL .)
    AND_OP          reduce using rule 69 (number -> OCTAL .)
    OR_OP           reduce using rule 69 (number -> OCTAL .)
    EQUALS_OP       reduce using rule 69 (number -> OCTAL .)
    NOT_EQUALS_OP   reduce using rule 69 (number -> OCTAL .)
    GREATER_OP      reduce using rule 69 (number -> OCTAL .)
    LESS_OP         reduce using rule 69 (number -> OCTAL .)
    GREATER_EQUAL_OP reduce using rule 69 (number -> OCTAL .)
    LESS_EQUAL_OP   reduce using rule 69 (number -> OCTAL .)
    PLUS_OP         reduce using rule 69 (number -> OCTAL .)
    MINUS_OP        reduce using rule 69 (number -> OCTAL .)
    MULTIPLICATION_OP reduce using rule 69 (number -> OCTAL .)
    DIVISION_OP     reduce using rule 69 (number -> OCTAL .)
    MODULUS_OP      reduce using rule 69 (number -> OCTAL .)
    EXPONENT_OP     reduce using rule 69 (number -> OCTAL .)
    BIT_RIGHT_SHIFT reduce using rule 69 (number -> OCTAL .)
    BIT_LEFT_SHIFT  reduce using rule 69 (number -> OCTAL .)
    CONCATENATE     reduce using rule 69 (number -> OCTAL .)
    REP_OP          reduce using rule 69 (number -> OCTAL .)
    COMMA           reduce using rule 69 (number -> OCTAL .)
    ASSOCIATE_OP    reduce using rule 69 (number -> OCTAL .)
    RANGE_OP        reduce using rule 69 (number -> OCTAL .)
    SEARCH_MODIFY   reduce using rule 69 (number -> OCTAL .)
    SEARCH_MODIFY_NEG reduce using rule 69 (number -> OCTAL .)
    SEMICOLON       reduce using rule 69 (number -> OCTAL .)
    BLOCK_BEGIN     reduce using rule 69 (number -> OCTAL .)
    CLOSE_PARANTHESIS reduce using rule 69 (number -> OCTAL .)
=======

state 62
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (63) number -> OCTAL .

    OR_STR_OP       reduce using rule 63 (number -> OCTAL .)
    XOR_STR_OP      reduce using rule 63 (number -> OCTAL .)
    AND_STR_OP      reduce using rule 63 (number -> OCTAL .)
    NOT_STR_OP      reduce using rule 63 (number -> OCTAL .)
    COMPARE_OP      reduce using rule 63 (number -> OCTAL .)
    BIT_OR          reduce using rule 63 (number -> OCTAL .)
    BIT_XOR         reduce using rule 63 (number -> OCTAL .)
    BIT_AND         reduce using rule 63 (number -> OCTAL .)
    AND_OP          reduce using rule 63 (number -> OCTAL .)
    OR_OP           reduce using rule 63 (number -> OCTAL .)
    EQUALS_OP       reduce using rule 63 (number -> OCTAL .)
    NOT_EQUALS_OP   reduce using rule 63 (number -> OCTAL .)
    GREATER_OP      reduce using rule 63 (number -> OCTAL .)
    LESS_OP         reduce using rule 63 (number -> OCTAL .)
    GREATER_EQUAL_OP reduce using rule 63 (number -> OCTAL .)
    LESS_EQUAL_OP   reduce using rule 63 (number -> OCTAL .)
    PLUS_OP         reduce using rule 63 (number -> OCTAL .)
    MINUS_OP        reduce using rule 63 (number -> OCTAL .)
    MULTIPLICATION_OP reduce using rule 63 (number -> OCTAL .)
    DIVISION_OP     reduce using rule 63 (number -> OCTAL .)
    MODULUS_OP      reduce using rule 63 (number -> OCTAL .)
    EXPONENT_OP     reduce using rule 63 (number -> OCTAL .)
    BIT_RIGHT_SHIFT reduce using rule 63 (number -> OCTAL .)
    BIT_LEFT_SHIFT  reduce using rule 63 (number -> OCTAL .)
    CONCATENATE     reduce using rule 63 (number -> OCTAL .)
    REP_OP          reduce using rule 63 (number -> OCTAL .)
    ASSOCIATE_OP    reduce using rule 63 (number -> OCTAL .)
    RANGE_OP        reduce using rule 63 (number -> OCTAL .)
    SEARCH_MODIFY   reduce using rule 63 (number -> OCTAL .)
    SEARCH_MODIFY_NEG reduce using rule 63 (number -> OCTAL .)
    SEMICOLON       reduce using rule 63 (number -> OCTAL .)
    BLOCK_BEGIN     reduce using rule 63 (number -> OCTAL .)
    CLOSE_PARANTHESIS reduce using rule 63 (number -> OCTAL .)
    COMMA           reduce using rule 63 (number -> OCTAL .)

<<<<<<< HEAD
state 66

    (67) number -> FLOAT .

    OR_STR_OP       reduce using rule 67 (number -> FLOAT .)
    XOR_STR_OP      reduce using rule 67 (number -> FLOAT .)
    AND_STR_OP      reduce using rule 67 (number -> FLOAT .)
    NOT_STR_OP      reduce using rule 67 (number -> FLOAT .)
    COMPARE_OP      reduce using rule 67 (number -> FLOAT .)
    BIT_OR          reduce using rule 67 (number -> FLOAT .)
    BIT_XOR         reduce using rule 67 (number -> FLOAT .)
    BIT_AND         reduce using rule 67 (number -> FLOAT .)
    AND_OP          reduce using rule 67 (number -> FLOAT .)
    OR_OP           reduce using rule 67 (number -> FLOAT .)
    EQUALS_OP       reduce using rule 67 (number -> FLOAT .)
    NOT_EQUALS_OP   reduce using rule 67 (number -> FLOAT .)
    GREATER_OP      reduce using rule 67 (number -> FLOAT .)
    LESS_OP         reduce using rule 67 (number -> FLOAT .)
    GREATER_EQUAL_OP reduce using rule 67 (number -> FLOAT .)
    LESS_EQUAL_OP   reduce using rule 67 (number -> FLOAT .)
    PLUS_OP         reduce using rule 67 (number -> FLOAT .)
    MINUS_OP        reduce using rule 67 (number -> FLOAT .)
    MULTIPLICATION_OP reduce using rule 67 (number -> FLOAT .)
    DIVISION_OP     reduce using rule 67 (number -> FLOAT .)
    MODULUS_OP      reduce using rule 67 (number -> FLOAT .)
    EXPONENT_OP     reduce using rule 67 (number -> FLOAT .)
    BIT_RIGHT_SHIFT reduce using rule 67 (number -> FLOAT .)
    BIT_LEFT_SHIFT  reduce using rule 67 (number -> FLOAT .)
    CONCATENATE     reduce using rule 67 (number -> FLOAT .)
    REP_OP          reduce using rule 67 (number -> FLOAT .)
    COMMA           reduce using rule 67 (number -> FLOAT .)
    ASSOCIATE_OP    reduce using rule 67 (number -> FLOAT .)
    RANGE_OP        reduce using rule 67 (number -> FLOAT .)
    SEARCH_MODIFY   reduce using rule 67 (number -> FLOAT .)
    SEARCH_MODIFY_NEG reduce using rule 67 (number -> FLOAT .)
    SEMICOLON       reduce using rule 67 (number -> FLOAT .)
    BLOCK_BEGIN     reduce using rule 67 (number -> FLOAT .)
    CLOSE_PARANTHESIS reduce using rule 67 (number -> FLOAT .)
=======

state 63
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (61) number -> FLOAT .

    OR_STR_OP       reduce using rule 61 (number -> FLOAT .)
    XOR_STR_OP      reduce using rule 61 (number -> FLOAT .)
    AND_STR_OP      reduce using rule 61 (number -> FLOAT .)
    NOT_STR_OP      reduce using rule 61 (number -> FLOAT .)
    COMPARE_OP      reduce using rule 61 (number -> FLOAT .)
    BIT_OR          reduce using rule 61 (number -> FLOAT .)
    BIT_XOR         reduce using rule 61 (number -> FLOAT .)
    BIT_AND         reduce using rule 61 (number -> FLOAT .)
    AND_OP          reduce using rule 61 (number -> FLOAT .)
    OR_OP           reduce using rule 61 (number -> FLOAT .)
    EQUALS_OP       reduce using rule 61 (number -> FLOAT .)
    NOT_EQUALS_OP   reduce using rule 61 (number -> FLOAT .)
    GREATER_OP      reduce using rule 61 (number -> FLOAT .)
    LESS_OP         reduce using rule 61 (number -> FLOAT .)
    GREATER_EQUAL_OP reduce using rule 61 (number -> FLOAT .)
    LESS_EQUAL_OP   reduce using rule 61 (number -> FLOAT .)
    PLUS_OP         reduce using rule 61 (number -> FLOAT .)
    MINUS_OP        reduce using rule 61 (number -> FLOAT .)
    MULTIPLICATION_OP reduce using rule 61 (number -> FLOAT .)
    DIVISION_OP     reduce using rule 61 (number -> FLOAT .)
    MODULUS_OP      reduce using rule 61 (number -> FLOAT .)
    EXPONENT_OP     reduce using rule 61 (number -> FLOAT .)
    BIT_RIGHT_SHIFT reduce using rule 61 (number -> FLOAT .)
    BIT_LEFT_SHIFT  reduce using rule 61 (number -> FLOAT .)
    CONCATENATE     reduce using rule 61 (number -> FLOAT .)
    REP_OP          reduce using rule 61 (number -> FLOAT .)
    ASSOCIATE_OP    reduce using rule 61 (number -> FLOAT .)
    RANGE_OP        reduce using rule 61 (number -> FLOAT .)
    SEARCH_MODIFY   reduce using rule 61 (number -> FLOAT .)
    SEARCH_MODIFY_NEG reduce using rule 61 (number -> FLOAT .)
    SEMICOLON       reduce using rule 61 (number -> FLOAT .)
    BLOCK_BEGIN     reduce using rule 61 (number -> FLOAT .)
    CLOSE_PARANTHESIS reduce using rule 61 (number -> FLOAT .)
    COMMA           reduce using rule 61 (number -> FLOAT .)

<<<<<<< HEAD
state 67

    (74) expression -> PLUS_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======

state 64

    (72) expression -> PLUS_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 108
    empty                          shift and go to state 58

state 68

    (40) printStatement -> PRINT expression . SEMICOLON
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 120
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 69

    (73) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 105
    empty                          shift and go to state 55

state 65

    (37) printStatement -> PRINT expression . SEMICOLON
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 117
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 66

    (67) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 141
    empty                          shift and go to state 58

state 70

    (41) returnStatement -> RETURN expression . SEMICOLON
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 142
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 71

    (17) statement -> ifthen Marker .

    VARIABLE        reduce using rule 17 (statement -> ifthen Marker .)
    LOCAL           reduce using rule 17 (statement -> ifthen Marker .)
    PRIVATE         reduce using rule 17 (statement -> ifthen Marker .)
    RETURN          reduce using rule 17 (statement -> ifthen Marker .)
    IDENTIFIER      reduce using rule 17 (statement -> ifthen Marker .)
    WHILE           reduce using rule 17 (statement -> ifthen Marker .)
    FOR             reduce using rule 17 (statement -> ifthen Marker .)
    PRINT           reduce using rule 17 (statement -> ifthen Marker .)
    SUB             reduce using rule 17 (statement -> ifthen Marker .)
    LAST            reduce using rule 17 (statement -> ifthen Marker .)
    NEXT            reduce using rule 17 (statement -> ifthen Marker .)
    IF              reduce using rule 17 (statement -> ifthen Marker .)
    USE             reduce using rule 17 (statement -> ifthen Marker .)
    UNTIL           reduce using rule 17 (statement -> ifthen Marker .)
    DO              reduce using rule 17 (statement -> ifthen Marker .)
    SWITCH          reduce using rule 17 (statement -> ifthen Marker .)
    $end            reduce using rule 17 (statement -> ifthen Marker .)
    BLOCK_ENDS      reduce using rule 17 (statement -> ifthen Marker .)


state 72

    (36) functionStatement -> SUB IDENTIFIER . Markerscope block
    (37) Markerscope -> . empty
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 137
    empty                          shift and go to state 55

state 67

    (38) returnStatement -> RETURN expression . SEMICOLON
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 138
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 68

    (18) statement -> ifthen Marker .

    VARIABLE        reduce using rule 18 (statement -> ifthen Marker .)
    ARRAY           reduce using rule 18 (statement -> ifthen Marker .)
    LOCAL           reduce using rule 18 (statement -> ifthen Marker .)
    PRIVATE         reduce using rule 18 (statement -> ifthen Marker .)
    RETURN          reduce using rule 18 (statement -> ifthen Marker .)
    IDENTIFIER      reduce using rule 18 (statement -> ifthen Marker .)
    WHILE           reduce using rule 18 (statement -> ifthen Marker .)
    FOR             reduce using rule 18 (statement -> ifthen Marker .)
    PRINT           reduce using rule 18 (statement -> ifthen Marker .)
    SUB             reduce using rule 18 (statement -> ifthen Marker .)
    LAST            reduce using rule 18 (statement -> ifthen Marker .)
    NEXT            reduce using rule 18 (statement -> ifthen Marker .)
    IF              reduce using rule 18 (statement -> ifthen Marker .)
    USE             reduce using rule 18 (statement -> ifthen Marker .)
    SWITCH          reduce using rule 18 (statement -> ifthen Marker .)
    $end            reduce using rule 18 (statement -> ifthen Marker .)
    BLOCK_ENDS      reduce using rule 18 (statement -> ifthen Marker .)


state 69

    (33) functionStatement -> SUB IDENTIFIER . Markerscope block
    (34) Markerscope -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Markerscope                    shift and go to state 143
    empty                          shift and go to state 144

state 73

    (34) lastStatement -> LAST SEMICOLON .

    VARIABLE        reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    LOCAL           reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    PRIVATE         reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    RETURN          reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    WHILE           reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    FOR             reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    PRINT           reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    SUB             reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    LAST            reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    NEXT            reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    IF              reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    USE             reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    UNTIL           reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    DO              reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    SWITCH          reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    $end            reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
    BLOCK_ENDS      reduce using rule 34 (lastStatement -> LAST SEMICOLON .)
=======
    Markerscope                    shift and go to state 139
    empty                          shift and go to state 140
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 70

<<<<<<< HEAD
state 74

    (21) statement -> dowhileStatement Marker .

    VARIABLE        reduce using rule 21 (statement -> dowhileStatement Marker .)
    LOCAL           reduce using rule 21 (statement -> dowhileStatement Marker .)
    PRIVATE         reduce using rule 21 (statement -> dowhileStatement Marker .)
    RETURN          reduce using rule 21 (statement -> dowhileStatement Marker .)
    IDENTIFIER      reduce using rule 21 (statement -> dowhileStatement Marker .)
    WHILE           reduce using rule 21 (statement -> dowhileStatement Marker .)
    FOR             reduce using rule 21 (statement -> dowhileStatement Marker .)
    PRINT           reduce using rule 21 (statement -> dowhileStatement Marker .)
    SUB             reduce using rule 21 (statement -> dowhileStatement Marker .)
    LAST            reduce using rule 21 (statement -> dowhileStatement Marker .)
    NEXT            reduce using rule 21 (statement -> dowhileStatement Marker .)
    IF              reduce using rule 21 (statement -> dowhileStatement Marker .)
    USE             reduce using rule 21 (statement -> dowhileStatement Marker .)
    UNTIL           reduce using rule 21 (statement -> dowhileStatement Marker .)
    DO              reduce using rule 21 (statement -> dowhileStatement Marker .)
    SWITCH          reduce using rule 21 (statement -> dowhileStatement Marker .)
    $end            reduce using rule 21 (statement -> dowhileStatement Marker .)
    BLOCK_ENDS      reduce using rule 21 (statement -> dowhileStatement Marker .)


state 75

    (16) statement -> nextStatement Marker .

    VARIABLE        reduce using rule 16 (statement -> nextStatement Marker .)
    LOCAL           reduce using rule 16 (statement -> nextStatement Marker .)
    PRIVATE         reduce using rule 16 (statement -> nextStatement Marker .)
    RETURN          reduce using rule 16 (statement -> nextStatement Marker .)
    IDENTIFIER      reduce using rule 16 (statement -> nextStatement Marker .)
    WHILE           reduce using rule 16 (statement -> nextStatement Marker .)
    FOR             reduce using rule 16 (statement -> nextStatement Marker .)
    PRINT           reduce using rule 16 (statement -> nextStatement Marker .)
    SUB             reduce using rule 16 (statement -> nextStatement Marker .)
    LAST            reduce using rule 16 (statement -> nextStatement Marker .)
    NEXT            reduce using rule 16 (statement -> nextStatement Marker .)
    IF              reduce using rule 16 (statement -> nextStatement Marker .)
    USE             reduce using rule 16 (statement -> nextStatement Marker .)
    UNTIL           reduce using rule 16 (statement -> nextStatement Marker .)
    DO              reduce using rule 16 (statement -> nextStatement Marker .)
    SWITCH          reduce using rule 16 (statement -> nextStatement Marker .)
    $end            reduce using rule 16 (statement -> nextStatement Marker .)
    BLOCK_ENDS      reduce using rule 16 (statement -> nextStatement Marker .)


state 76

    (25) switchStatement -> SWITCH expression . BLOCK_BEGIN caselist BLOCK_ENDS
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    BLOCK_BEGIN     shift and go to state 145
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 77

    (44) assignment -> PRIVATE VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (58) declaration -> PRIVATE VARIABLE . decList SEMICOLON
    (60) decList -> . COMMA VARIABLE decList
    (61) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 147
    COMMA           shift and go to state 93
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 95
    decList                        shift and go to state 146

state 78

    (35) nextStatement -> NEXT SEMICOLON .

    VARIABLE        reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    LOCAL           reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    PRIVATE         reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    RETURN          reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    WHILE           reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    FOR             reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    PRINT           reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    SUB             reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    LAST            reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    NEXT            reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    IF              reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    USE             reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    UNTIL           reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    DO              reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    SWITCH          reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    $end            reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)
    BLOCK_ENDS      reduce using rule 35 (nextStatement -> NEXT SEMICOLON .)


state 79

    (15) statement -> lastStatement Marker .

    VARIABLE        reduce using rule 15 (statement -> lastStatement Marker .)
    LOCAL           reduce using rule 15 (statement -> lastStatement Marker .)
    PRIVATE         reduce using rule 15 (statement -> lastStatement Marker .)
    RETURN          reduce using rule 15 (statement -> lastStatement Marker .)
    IDENTIFIER      reduce using rule 15 (statement -> lastStatement Marker .)
    WHILE           reduce using rule 15 (statement -> lastStatement Marker .)
    FOR             reduce using rule 15 (statement -> lastStatement Marker .)
    PRINT           reduce using rule 15 (statement -> lastStatement Marker .)
    SUB             reduce using rule 15 (statement -> lastStatement Marker .)
    LAST            reduce using rule 15 (statement -> lastStatement Marker .)
    NEXT            reduce using rule 15 (statement -> lastStatement Marker .)
    IF              reduce using rule 15 (statement -> lastStatement Marker .)
    USE             reduce using rule 15 (statement -> lastStatement Marker .)
    UNTIL           reduce using rule 15 (statement -> lastStatement Marker .)
    DO              reduce using rule 15 (statement -> lastStatement Marker .)
    SWITCH          reduce using rule 15 (statement -> lastStatement Marker .)
    $end            reduce using rule 15 (statement -> lastStatement Marker .)
    BLOCK_ENDS      reduce using rule 15 (statement -> lastStatement Marker .)


state 80

    (19) statement -> useStatement Marker .

    VARIABLE        reduce using rule 19 (statement -> useStatement Marker .)
    LOCAL           reduce using rule 19 (statement -> useStatement Marker .)
    PRIVATE         reduce using rule 19 (statement -> useStatement Marker .)
    RETURN          reduce using rule 19 (statement -> useStatement Marker .)
    IDENTIFIER      reduce using rule 19 (statement -> useStatement Marker .)
    WHILE           reduce using rule 19 (statement -> useStatement Marker .)
    FOR             reduce using rule 19 (statement -> useStatement Marker .)
    PRINT           reduce using rule 19 (statement -> useStatement Marker .)
    SUB             reduce using rule 19 (statement -> useStatement Marker .)
    LAST            reduce using rule 19 (statement -> useStatement Marker .)
    NEXT            reduce using rule 19 (statement -> useStatement Marker .)
    IF              reduce using rule 19 (statement -> useStatement Marker .)
    USE             reduce using rule 19 (statement -> useStatement Marker .)
    UNTIL           reduce using rule 19 (statement -> useStatement Marker .)
    DO              reduce using rule 19 (statement -> useStatement Marker .)
    SWITCH          reduce using rule 19 (statement -> useStatement Marker .)
    $end            reduce using rule 19 (statement -> useStatement Marker .)
    BLOCK_ENDS      reduce using rule 19 (statement -> useStatement Marker .)


state 81
=======
    (31) lastStatement -> LAST SEMICOLON .

    VARIABLE        reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    ARRAY           reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    LOCAL           reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    PRIVATE         reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    RETURN          reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    WHILE           reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    FOR             reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    PRINT           reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    SUB             reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    LAST            reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    NEXT            reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    IF              reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    USE             reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    SWITCH          reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    $end            reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    BLOCK_ENDS      reduce using rule 31 (lastStatement -> LAST SEMICOLON .)


state 71

    (17) statement -> nextStatement Marker .

    VARIABLE        reduce using rule 17 (statement -> nextStatement Marker .)
    ARRAY           reduce using rule 17 (statement -> nextStatement Marker .)
    LOCAL           reduce using rule 17 (statement -> nextStatement Marker .)
    PRIVATE         reduce using rule 17 (statement -> nextStatement Marker .)
    RETURN          reduce using rule 17 (statement -> nextStatement Marker .)
    IDENTIFIER      reduce using rule 17 (statement -> nextStatement Marker .)
    WHILE           reduce using rule 17 (statement -> nextStatement Marker .)
    FOR             reduce using rule 17 (statement -> nextStatement Marker .)
    PRINT           reduce using rule 17 (statement -> nextStatement Marker .)
    SUB             reduce using rule 17 (statement -> nextStatement Marker .)
    LAST            reduce using rule 17 (statement -> nextStatement Marker .)
    NEXT            reduce using rule 17 (statement -> nextStatement Marker .)
    IF              reduce using rule 17 (statement -> nextStatement Marker .)
    USE             reduce using rule 17 (statement -> nextStatement Marker .)
    SWITCH          reduce using rule 17 (statement -> nextStatement Marker .)
    $end            reduce using rule 17 (statement -> nextStatement Marker .)
    BLOCK_ENDS      reduce using rule 17 (statement -> nextStatement Marker .)


state 72

    (42) assignment -> PRIVATE VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (45) declaration -> PRIVATE VARIABLE . decList SEMICOLON
    (47) decList -> . COMMA VARIABLE decList
    (48) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 142
    COMMA           shift and go to state 88
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 90
    decList                        shift and go to state 141

state 73

    (32) nextStatement -> NEXT SEMICOLON .

    VARIABLE        reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    ARRAY           reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    LOCAL           reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    PRIVATE         reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    RETURN          reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    WHILE           reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    FOR             reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    PRINT           reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    SUB             reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    LAST            reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    NEXT            reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    IF              reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    USE             reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    SWITCH          reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    $end            reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    BLOCK_ENDS      reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)


state 74

    (16) statement -> lastStatement Marker .

    VARIABLE        reduce using rule 16 (statement -> lastStatement Marker .)
    ARRAY           reduce using rule 16 (statement -> lastStatement Marker .)
    LOCAL           reduce using rule 16 (statement -> lastStatement Marker .)
    PRIVATE         reduce using rule 16 (statement -> lastStatement Marker .)
    RETURN          reduce using rule 16 (statement -> lastStatement Marker .)
    IDENTIFIER      reduce using rule 16 (statement -> lastStatement Marker .)
    WHILE           reduce using rule 16 (statement -> lastStatement Marker .)
    FOR             reduce using rule 16 (statement -> lastStatement Marker .)
    PRINT           reduce using rule 16 (statement -> lastStatement Marker .)
    SUB             reduce using rule 16 (statement -> lastStatement Marker .)
    LAST            reduce using rule 16 (statement -> lastStatement Marker .)
    NEXT            reduce using rule 16 (statement -> lastStatement Marker .)
    IF              reduce using rule 16 (statement -> lastStatement Marker .)
    USE             reduce using rule 16 (statement -> lastStatement Marker .)
    SWITCH          reduce using rule 16 (statement -> lastStatement Marker .)
    $end            reduce using rule 16 (statement -> lastStatement Marker .)
    BLOCK_ENDS      reduce using rule 16 (statement -> lastStatement Marker .)


state 75

    (20) statement -> useStatement Marker .

    VARIABLE        reduce using rule 20 (statement -> useStatement Marker .)
    ARRAY           reduce using rule 20 (statement -> useStatement Marker .)
    LOCAL           reduce using rule 20 (statement -> useStatement Marker .)
    PRIVATE         reduce using rule 20 (statement -> useStatement Marker .)
    RETURN          reduce using rule 20 (statement -> useStatement Marker .)
    IDENTIFIER      reduce using rule 20 (statement -> useStatement Marker .)
    WHILE           reduce using rule 20 (statement -> useStatement Marker .)
    FOR             reduce using rule 20 (statement -> useStatement Marker .)
    PRINT           reduce using rule 20 (statement -> useStatement Marker .)
    SUB             reduce using rule 20 (statement -> useStatement Marker .)
    LAST            reduce using rule 20 (statement -> useStatement Marker .)
    NEXT            reduce using rule 20 (statement -> useStatement Marker .)
    IF              reduce using rule 20 (statement -> useStatement Marker .)
    USE             reduce using rule 20 (statement -> useStatement Marker .)
    SWITCH          reduce using rule 20 (statement -> useStatement Marker .)
    $end            reduce using rule 20 (statement -> useStatement Marker .)
    BLOCK_ENDS      reduce using rule 20 (statement -> useStatement Marker .)


state 76
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (4) statements -> statement statements .

    BLOCK_ENDS      reduce using rule 4 (statements -> statement statements .)
    $end            reduce using rule 4 (statements -> statement statements .)


<<<<<<< HEAD
state 82

    (13) statement -> printStatement Marker .

    VARIABLE        reduce using rule 13 (statement -> printStatement Marker .)
    LOCAL           reduce using rule 13 (statement -> printStatement Marker .)
    PRIVATE         reduce using rule 13 (statement -> printStatement Marker .)
    RETURN          reduce using rule 13 (statement -> printStatement Marker .)
    IDENTIFIER      reduce using rule 13 (statement -> printStatement Marker .)
    WHILE           reduce using rule 13 (statement -> printStatement Marker .)
    FOR             reduce using rule 13 (statement -> printStatement Marker .)
    PRINT           reduce using rule 13 (statement -> printStatement Marker .)
    SUB             reduce using rule 13 (statement -> printStatement Marker .)
    LAST            reduce using rule 13 (statement -> printStatement Marker .)
    NEXT            reduce using rule 13 (statement -> printStatement Marker .)
    IF              reduce using rule 13 (statement -> printStatement Marker .)
    USE             reduce using rule 13 (statement -> printStatement Marker .)
    UNTIL           reduce using rule 13 (statement -> printStatement Marker .)
    DO              reduce using rule 13 (statement -> printStatement Marker .)
    SWITCH          reduce using rule 13 (statement -> printStatement Marker .)
    $end            reduce using rule 13 (statement -> printStatement Marker .)
    BLOCK_ENDS      reduce using rule 13 (statement -> printStatement Marker .)


state 83

    (38) functionCall -> IDENTIFIER OPEN_PARANTHESIS . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS shift and go to state 148


state 84

    (20) statement -> untillStatement Marker .

    VARIABLE        reduce using rule 20 (statement -> untillStatement Marker .)
    LOCAL           reduce using rule 20 (statement -> untillStatement Marker .)
    PRIVATE         reduce using rule 20 (statement -> untillStatement Marker .)
    RETURN          reduce using rule 20 (statement -> untillStatement Marker .)
    IDENTIFIER      reduce using rule 20 (statement -> untillStatement Marker .)
    WHILE           reduce using rule 20 (statement -> untillStatement Marker .)
    FOR             reduce using rule 20 (statement -> untillStatement Marker .)
    PRINT           reduce using rule 20 (statement -> untillStatement Marker .)
    SUB             reduce using rule 20 (statement -> untillStatement Marker .)
    LAST            reduce using rule 20 (statement -> untillStatement Marker .)
    NEXT            reduce using rule 20 (statement -> untillStatement Marker .)
    IF              reduce using rule 20 (statement -> untillStatement Marker .)
    USE             reduce using rule 20 (statement -> untillStatement Marker .)
    UNTIL           reduce using rule 20 (statement -> untillStatement Marker .)
    DO              reduce using rule 20 (statement -> untillStatement Marker .)
    SWITCH          reduce using rule 20 (statement -> untillStatement Marker .)
    $end            reduce using rule 20 (statement -> untillStatement Marker .)
    BLOCK_ENDS      reduce using rule 20 (statement -> untillStatement Marker .)


state 85

    (18) statement -> ifthenelse Marker .

    VARIABLE        reduce using rule 18 (statement -> ifthenelse Marker .)
    LOCAL           reduce using rule 18 (statement -> ifthenelse Marker .)
    PRIVATE         reduce using rule 18 (statement -> ifthenelse Marker .)
    RETURN          reduce using rule 18 (statement -> ifthenelse Marker .)
    IDENTIFIER      reduce using rule 18 (statement -> ifthenelse Marker .)
    WHILE           reduce using rule 18 (statement -> ifthenelse Marker .)
    FOR             reduce using rule 18 (statement -> ifthenelse Marker .)
    PRINT           reduce using rule 18 (statement -> ifthenelse Marker .)
    SUB             reduce using rule 18 (statement -> ifthenelse Marker .)
    LAST            reduce using rule 18 (statement -> ifthenelse Marker .)
    NEXT            reduce using rule 18 (statement -> ifthenelse Marker .)
    IF              reduce using rule 18 (statement -> ifthenelse Marker .)
    USE             reduce using rule 18 (statement -> ifthenelse Marker .)
    UNTIL           reduce using rule 18 (statement -> ifthenelse Marker .)
    DO              reduce using rule 18 (statement -> ifthenelse Marker .)
    SWITCH          reduce using rule 18 (statement -> ifthenelse Marker .)
    $end            reduce using rule 18 (statement -> ifthenelse Marker .)
    BLOCK_ENDS      reduce using rule 18 (statement -> ifthenelse Marker .)


state 86

    (52) forStatement -> FOR OPEN_PARANTHESIS . assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS . assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (42) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (44) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (45) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
=======
state 77

    (14) statement -> printStatement Marker .

    VARIABLE        reduce using rule 14 (statement -> printStatement Marker .)
    ARRAY           reduce using rule 14 (statement -> printStatement Marker .)
    LOCAL           reduce using rule 14 (statement -> printStatement Marker .)
    PRIVATE         reduce using rule 14 (statement -> printStatement Marker .)
    RETURN          reduce using rule 14 (statement -> printStatement Marker .)
    IDENTIFIER      reduce using rule 14 (statement -> printStatement Marker .)
    WHILE           reduce using rule 14 (statement -> printStatement Marker .)
    FOR             reduce using rule 14 (statement -> printStatement Marker .)
    PRINT           reduce using rule 14 (statement -> printStatement Marker .)
    SUB             reduce using rule 14 (statement -> printStatement Marker .)
    LAST            reduce using rule 14 (statement -> printStatement Marker .)
    NEXT            reduce using rule 14 (statement -> printStatement Marker .)
    IF              reduce using rule 14 (statement -> printStatement Marker .)
    USE             reduce using rule 14 (statement -> printStatement Marker .)
    SWITCH          reduce using rule 14 (statement -> printStatement Marker .)
    $end            reduce using rule 14 (statement -> printStatement Marker .)
    BLOCK_ENDS      reduce using rule 14 (statement -> printStatement Marker .)


state 78

    (35) functionCall -> IDENTIFIER OPEN_PARANTHESIS . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS shift and go to state 143


state 79

    (19) statement -> ifthenelse Marker .

    VARIABLE        reduce using rule 19 (statement -> ifthenelse Marker .)
    ARRAY           reduce using rule 19 (statement -> ifthenelse Marker .)
    LOCAL           reduce using rule 19 (statement -> ifthenelse Marker .)
    PRIVATE         reduce using rule 19 (statement -> ifthenelse Marker .)
    RETURN          reduce using rule 19 (statement -> ifthenelse Marker .)
    IDENTIFIER      reduce using rule 19 (statement -> ifthenelse Marker .)
    WHILE           reduce using rule 19 (statement -> ifthenelse Marker .)
    FOR             reduce using rule 19 (statement -> ifthenelse Marker .)
    PRINT           reduce using rule 19 (statement -> ifthenelse Marker .)
    SUB             reduce using rule 19 (statement -> ifthenelse Marker .)
    LAST            reduce using rule 19 (statement -> ifthenelse Marker .)
    NEXT            reduce using rule 19 (statement -> ifthenelse Marker .)
    IF              reduce using rule 19 (statement -> ifthenelse Marker .)
    USE             reduce using rule 19 (statement -> ifthenelse Marker .)
    SWITCH          reduce using rule 19 (statement -> ifthenelse Marker .)
    $end            reduce using rule 19 (statement -> ifthenelse Marker .)
    BLOCK_ENDS      reduce using rule 19 (statement -> ifthenelse Marker .)


state 80

    (52) forStatement -> FOR OPEN_PARANTHESIS . assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS . assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (39) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (42) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (56) assignment -> . empty
    (6) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
<<<<<<< HEAD
    VARIABLE        shift and go to state 151
    LOCAL           shift and go to state 150
    PRIVATE         shift and go to state 152
=======
  ! shift/reduce conflict for ARRAY resolved as shift
    VARIABLE        shift and go to state 146
    ARRAY           shift and go to state 148
    LOCAL           shift and go to state 145
    PRIVATE         shift and go to state 147
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)

  ! VARIABLE        [ reduce using rule 6 (empty -> .) ]
  ! ARRAY           [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    assignment                     shift and go to state 149
    empty                          shift and go to state 38

state 87
=======
    assignment                     shift and go to state 144
    empty                          shift and go to state 34

state 81
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (7) statement -> assignment Marker .

    VARIABLE        reduce using rule 7 (statement -> assignment Marker .)
    ARRAY           reduce using rule 7 (statement -> assignment Marker .)
    LOCAL           reduce using rule 7 (statement -> assignment Marker .)
    PRIVATE         reduce using rule 7 (statement -> assignment Marker .)
    RETURN          reduce using rule 7 (statement -> assignment Marker .)
    IDENTIFIER      reduce using rule 7 (statement -> assignment Marker .)
    WHILE           reduce using rule 7 (statement -> assignment Marker .)
    FOR             reduce using rule 7 (statement -> assignment Marker .)
    PRINT           reduce using rule 7 (statement -> assignment Marker .)
    SUB             reduce using rule 7 (statement -> assignment Marker .)
    LAST            reduce using rule 7 (statement -> assignment Marker .)
    NEXT            reduce using rule 7 (statement -> assignment Marker .)
    IF              reduce using rule 7 (statement -> assignment Marker .)
    USE             reduce using rule 7 (statement -> assignment Marker .)
    UNTIL           reduce using rule 7 (statement -> assignment Marker .)
    DO              reduce using rule 7 (statement -> assignment Marker .)
    SWITCH          reduce using rule 7 (statement -> assignment Marker .)
    $end            reduce using rule 7 (statement -> assignment Marker .)
    BLOCK_ENDS      reduce using rule 7 (statement -> assignment Marker .)


<<<<<<< HEAD
state 88

    (11) statement -> whileStatement Marker .

    VARIABLE        reduce using rule 11 (statement -> whileStatement Marker .)
    LOCAL           reduce using rule 11 (statement -> whileStatement Marker .)
    PRIVATE         reduce using rule 11 (statement -> whileStatement Marker .)
    RETURN          reduce using rule 11 (statement -> whileStatement Marker .)
    IDENTIFIER      reduce using rule 11 (statement -> whileStatement Marker .)
    WHILE           reduce using rule 11 (statement -> whileStatement Marker .)
    FOR             reduce using rule 11 (statement -> whileStatement Marker .)
    PRINT           reduce using rule 11 (statement -> whileStatement Marker .)
    SUB             reduce using rule 11 (statement -> whileStatement Marker .)
    LAST            reduce using rule 11 (statement -> whileStatement Marker .)
    NEXT            reduce using rule 11 (statement -> whileStatement Marker .)
    IF              reduce using rule 11 (statement -> whileStatement Marker .)
    USE             reduce using rule 11 (statement -> whileStatement Marker .)
    UNTIL           reduce using rule 11 (statement -> whileStatement Marker .)
    DO              reduce using rule 11 (statement -> whileStatement Marker .)
    SWITCH          reduce using rule 11 (statement -> whileStatement Marker .)
    $end            reduce using rule 11 (statement -> whileStatement Marker .)
    BLOCK_ENDS      reduce using rule 11 (statement -> whileStatement Marker .)


state 89
=======
state 82

    (12) statement -> whileStatement Marker .

    VARIABLE        reduce using rule 12 (statement -> whileStatement Marker .)
    ARRAY           reduce using rule 12 (statement -> whileStatement Marker .)
    LOCAL           reduce using rule 12 (statement -> whileStatement Marker .)
    PRIVATE         reduce using rule 12 (statement -> whileStatement Marker .)
    RETURN          reduce using rule 12 (statement -> whileStatement Marker .)
    IDENTIFIER      reduce using rule 12 (statement -> whileStatement Marker .)
    WHILE           reduce using rule 12 (statement -> whileStatement Marker .)
    FOR             reduce using rule 12 (statement -> whileStatement Marker .)
    PRINT           reduce using rule 12 (statement -> whileStatement Marker .)
    SUB             reduce using rule 12 (statement -> whileStatement Marker .)
    LAST            reduce using rule 12 (statement -> whileStatement Marker .)
    NEXT            reduce using rule 12 (statement -> whileStatement Marker .)
    IF              reduce using rule 12 (statement -> whileStatement Marker .)
    USE             reduce using rule 12 (statement -> whileStatement Marker .)
    SWITCH          reduce using rule 12 (statement -> whileStatement Marker .)
    $end            reduce using rule 12 (statement -> whileStatement Marker .)
    BLOCK_ENDS      reduce using rule 12 (statement -> whileStatement Marker .)


state 83
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (9) statement -> array_assignment Marker .

    VARIABLE        reduce using rule 9 (statement -> array_assignment Marker .)
    ARRAY           reduce using rule 9 (statement -> array_assignment Marker .)
    LOCAL           reduce using rule 9 (statement -> array_assignment Marker .)
    PRIVATE         reduce using rule 9 (statement -> array_assignment Marker .)
    RETURN          reduce using rule 9 (statement -> array_assignment Marker .)
    IDENTIFIER      reduce using rule 9 (statement -> array_assignment Marker .)
    WHILE           reduce using rule 9 (statement -> array_assignment Marker .)
    FOR             reduce using rule 9 (statement -> array_assignment Marker .)
    PRINT           reduce using rule 9 (statement -> array_assignment Marker .)
    SUB             reduce using rule 9 (statement -> array_assignment Marker .)
    LAST            reduce using rule 9 (statement -> array_assignment Marker .)
    NEXT            reduce using rule 9 (statement -> array_assignment Marker .)
    IF              reduce using rule 9 (statement -> array_assignment Marker .)
    USE             reduce using rule 9 (statement -> array_assignment Marker .)
    SWITCH          reduce using rule 9 (statement -> array_assignment Marker .)
    $end            reduce using rule 9 (statement -> array_assignment Marker .)
    BLOCK_ENDS      reduce using rule 9 (statement -> array_assignment Marker .)

<<<<<<< HEAD
    SEMICOLON       shift and go to state 153
=======
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 84

<<<<<<< HEAD
state 90
=======
    (11) statement -> functionCall Marker . SEMICOLON

    SEMICOLON       shift and go to state 149


state 85
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (8) statement -> declaration Marker .

    VARIABLE        reduce using rule 8 (statement -> declaration Marker .)
    ARRAY           reduce using rule 8 (statement -> declaration Marker .)
    LOCAL           reduce using rule 8 (statement -> declaration Marker .)
    PRIVATE         reduce using rule 8 (statement -> declaration Marker .)
    RETURN          reduce using rule 8 (statement -> declaration Marker .)
    IDENTIFIER      reduce using rule 8 (statement -> declaration Marker .)
    WHILE           reduce using rule 8 (statement -> declaration Marker .)
    FOR             reduce using rule 8 (statement -> declaration Marker .)
    PRINT           reduce using rule 8 (statement -> declaration Marker .)
    SUB             reduce using rule 8 (statement -> declaration Marker .)
    LAST            reduce using rule 8 (statement -> declaration Marker .)
    NEXT            reduce using rule 8 (statement -> declaration Marker .)
    IF              reduce using rule 8 (statement -> declaration Marker .)
    USE             reduce using rule 8 (statement -> declaration Marker .)
    UNTIL           reduce using rule 8 (statement -> declaration Marker .)
    DO              reduce using rule 8 (statement -> declaration Marker .)
    SWITCH          reduce using rule 8 (statement -> declaration Marker .)
    $end            reduce using rule 8 (statement -> declaration Marker .)
    BLOCK_ENDS      reduce using rule 8 (statement -> declaration Marker .)


<<<<<<< HEAD
state 91

    (57) declaration -> VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 154


state 92

    (45) assignment -> VARIABLE ADV_ASSIGNMENT_OP . expression SEMICOLON
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
state 86

    (44) declaration -> VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 150


state 87

    (43) assignment -> VARIABLE ADV_ASSIGNMENT_OP . expression SEMICOLON
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 155
    empty                          shift and go to state 58

state 93

    (60) decList -> COMMA . VARIABLE decList

    VARIABLE        shift and go to state 156


state 94

    (42) assignment -> VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (29) inputStatement -> VARIABLE ASSIGNMENT_OP . USER_INPUT_OP SEMICOLON
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    USER_INPUT_OP   shift and go to state 157
    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 151
    empty                          shift and go to state 55

state 88

    (47) decList -> COMMA . VARIABLE decList

    VARIABLE        shift and go to state 152


state 89

    (39) assignment -> VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 158
    empty                          shift and go to state 58

state 95

    (61) decList -> empty .

    SEMICOLON       reduce using rule 61 (decList -> empty .)


state 96

    (9) statement -> returnStatement Marker .

    VARIABLE        reduce using rule 9 (statement -> returnStatement Marker .)
    LOCAL           reduce using rule 9 (statement -> returnStatement Marker .)
    PRIVATE         reduce using rule 9 (statement -> returnStatement Marker .)
    RETURN          reduce using rule 9 (statement -> returnStatement Marker .)
    IDENTIFIER      reduce using rule 9 (statement -> returnStatement Marker .)
    WHILE           reduce using rule 9 (statement -> returnStatement Marker .)
    FOR             reduce using rule 9 (statement -> returnStatement Marker .)
    PRINT           reduce using rule 9 (statement -> returnStatement Marker .)
    SUB             reduce using rule 9 (statement -> returnStatement Marker .)
    LAST            reduce using rule 9 (statement -> returnStatement Marker .)
    NEXT            reduce using rule 9 (statement -> returnStatement Marker .)
    IF              reduce using rule 9 (statement -> returnStatement Marker .)
    USE             reduce using rule 9 (statement -> returnStatement Marker .)
    UNTIL           reduce using rule 9 (statement -> returnStatement Marker .)
    DO              reduce using rule 9 (statement -> returnStatement Marker .)
    SWITCH          reduce using rule 9 (statement -> returnStatement Marker .)
    $end            reduce using rule 9 (statement -> returnStatement Marker .)
    BLOCK_ENDS      reduce using rule 9 (statement -> returnStatement Marker .)


state 97

    (43) assignment -> LOCAL VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (59) declaration -> LOCAL VARIABLE . decList SEMICOLON
    (60) decList -> . COMMA VARIABLE decList
    (61) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 160
    COMMA           shift and go to state 93
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 95
    decList                        shift and go to state 159

state 98

    (30) ifthen -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif Marker block
    (31) ifthenelse -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 153
    empty                          shift and go to state 55

state 90

    (48) decList -> empty .

    SEMICOLON       reduce using rule 48 (decList -> empty .)


state 91

    (10) statement -> returnStatement Marker .

    VARIABLE        reduce using rule 10 (statement -> returnStatement Marker .)
    ARRAY           reduce using rule 10 (statement -> returnStatement Marker .)
    LOCAL           reduce using rule 10 (statement -> returnStatement Marker .)
    PRIVATE         reduce using rule 10 (statement -> returnStatement Marker .)
    RETURN          reduce using rule 10 (statement -> returnStatement Marker .)
    IDENTIFIER      reduce using rule 10 (statement -> returnStatement Marker .)
    WHILE           reduce using rule 10 (statement -> returnStatement Marker .)
    FOR             reduce using rule 10 (statement -> returnStatement Marker .)
    PRINT           reduce using rule 10 (statement -> returnStatement Marker .)
    SUB             reduce using rule 10 (statement -> returnStatement Marker .)
    LAST            reduce using rule 10 (statement -> returnStatement Marker .)
    NEXT            reduce using rule 10 (statement -> returnStatement Marker .)
    IF              reduce using rule 10 (statement -> returnStatement Marker .)
    USE             reduce using rule 10 (statement -> returnStatement Marker .)
    SWITCH          reduce using rule 10 (statement -> returnStatement Marker .)
    $end            reduce using rule 10 (statement -> returnStatement Marker .)
    BLOCK_ENDS      reduce using rule 10 (statement -> returnStatement Marker .)


state 92

    (41) assignment -> LOCAL VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (46) declaration -> LOCAL VARIABLE . decList SEMICOLON
    (47) decList -> . COMMA VARIABLE decList
    (48) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 155
    COMMA           shift and go to state 88
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 90
    decList                        shift and go to state 154

state 93

    (27) ifthen -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 161
    empty                          shift and go to state 58

state 99

    (24) useStatement -> USE IDENTIFIER SEMICOLON .

    VARIABLE        reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LOCAL           reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SUB             reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LAST            reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NEXT            reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    USE             reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    UNTIL           reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    DO              reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    $end            reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BLOCK_ENDS      reduce using rule 24 (useStatement -> USE IDENTIFIER SEMICOLON .)


state 100

    (48) dowhileStatement -> DO block WHILE . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (96) Marker -> . empty
    (6) empty -> .

    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 162
    empty                          shift and go to state 41

state 101
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 156
    empty                          shift and go to state 55

state 94

    (23) switchStatement -> SWITCH expression . BLOCK_BEGIN caselist BLOCK_ENDS
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    BLOCK_BEGIN     shift and go to state 157
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 95

    (22) useStatement -> USE IDENTIFIER SEMICOLON .

    VARIABLE        reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    ARRAY           reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LOCAL           reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SUB             reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LAST            reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NEXT            reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    USE             reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BLOCK_ENDS      reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    $end            reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)


state 96

    (40) assignment -> ARRAY OPEN_BRACKET NUMBER . CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON

    CLOSE_BRACKET   shift and go to state 158


state 97

    (69) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS . expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 159
    empty                          shift and go to state 55

state 98
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (3) block -> BLOCK_BEGIN statements BLOCK_ENDS .

    VARIABLE        reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ARRAY           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LOCAL           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRIVATE         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    RETURN          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    WHILE           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    FOR             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRINT           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SUB             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LAST            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NEXT            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IF              reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    USE             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    UNTIL           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    DO              reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SWITCH          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    $end            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
<<<<<<< HEAD
    CASE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ELSE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)


state 102

    (50) untillStatement -> UNTIL Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markeruntil block
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    ELSE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    CASE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)


state 99

    (50) whileStatement -> WHILE Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerwhile block
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 163
    empty                          shift and go to state 58

state 103

    (46) whileStatement -> WHILE Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerwhile block
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 160
    empty                          shift and go to state 55

state 100

    (36) printStatement -> PRINT OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS SEMICOLON
    (67) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 161
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 164
    empty                          shift and go to state 58

<<<<<<< HEAD
state 104

    (39) printStatement -> PRINT OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS SEMICOLON
    (73) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 165
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 105

    (75) expression -> MINUS_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 75 (expression -> MINUS_OP expression .)
    OR_STR_OP       reduce using rule 75 (expression -> MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 75 (expression -> MINUS_OP expression .)
    AND_STR_OP      reduce using rule 75 (expression -> MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 75 (expression -> MINUS_OP expression .)
    COMPARE_OP      reduce using rule 75 (expression -> MINUS_OP expression .)
    BIT_OR          reduce using rule 75 (expression -> MINUS_OP expression .)
    BIT_XOR         reduce using rule 75 (expression -> MINUS_OP expression .)
    BIT_AND         reduce using rule 75 (expression -> MINUS_OP expression .)
    AND_OP          reduce using rule 75 (expression -> MINUS_OP expression .)
    OR_OP           reduce using rule 75 (expression -> MINUS_OP expression .)
    EQUALS_OP       reduce using rule 75 (expression -> MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 75 (expression -> MINUS_OP expression .)
    GREATER_OP      reduce using rule 75 (expression -> MINUS_OP expression .)
    LESS_OP         reduce using rule 75 (expression -> MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 75 (expression -> MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 75 (expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 75 (expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 75 (expression -> MINUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 75 (expression -> MINUS_OP expression .)
    DIVISION_OP     reduce using rule 75 (expression -> MINUS_OP expression .)
    MODULUS_OP      reduce using rule 75 (expression -> MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 75 (expression -> MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 75 (expression -> MINUS_OP expression .)
    CONCATENATE     reduce using rule 75 (expression -> MINUS_OP expression .)
    REP_OP          reduce using rule 75 (expression -> MINUS_OP expression .)
    COMMA           reduce using rule 75 (expression -> MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 75 (expression -> MINUS_OP expression .)
    RANGE_OP        reduce using rule 75 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 75 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 75 (expression -> MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 75 (expression -> MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 75 (expression -> MINUS_OP expression .)
    EXPONENT_OP     shift and go to state 114

  ! EXPONENT_OP     [ reduce using rule 75 (expression -> MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
  ! SEARCH_MODIFY   [ shift and go to state 109 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 139 ]


state 106

    (77) expression -> NOT_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 77 (expression -> NOT_OP expression .)
    OR_STR_OP       reduce using rule 77 (expression -> NOT_OP expression .)
    XOR_STR_OP      reduce using rule 77 (expression -> NOT_OP expression .)
    AND_STR_OP      reduce using rule 77 (expression -> NOT_OP expression .)
    NOT_STR_OP      reduce using rule 77 (expression -> NOT_OP expression .)
    COMPARE_OP      reduce using rule 77 (expression -> NOT_OP expression .)
    BIT_OR          reduce using rule 77 (expression -> NOT_OP expression .)
    BIT_XOR         reduce using rule 77 (expression -> NOT_OP expression .)
    BIT_AND         reduce using rule 77 (expression -> NOT_OP expression .)
    AND_OP          reduce using rule 77 (expression -> NOT_OP expression .)
    OR_OP           reduce using rule 77 (expression -> NOT_OP expression .)
    EQUALS_OP       reduce using rule 77 (expression -> NOT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 77 (expression -> NOT_OP expression .)
    GREATER_OP      reduce using rule 77 (expression -> NOT_OP expression .)
    LESS_OP         reduce using rule 77 (expression -> NOT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 77 (expression -> NOT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 77 (expression -> NOT_OP expression .)
    PLUS_OP         reduce using rule 77 (expression -> NOT_OP expression .)
    MINUS_OP        reduce using rule 77 (expression -> NOT_OP expression .)
    MULTIPLICATION_OP reduce using rule 77 (expression -> NOT_OP expression .)
    DIVISION_OP     reduce using rule 77 (expression -> NOT_OP expression .)
    MODULUS_OP      reduce using rule 77 (expression -> NOT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 77 (expression -> NOT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 77 (expression -> NOT_OP expression .)
    CONCATENATE     reduce using rule 77 (expression -> NOT_OP expression .)
    REP_OP          reduce using rule 77 (expression -> NOT_OP expression .)
    COMMA           reduce using rule 77 (expression -> NOT_OP expression .)
    ASSOCIATE_OP    reduce using rule 77 (expression -> NOT_OP expression .)
    RANGE_OP        reduce using rule 77 (expression -> NOT_OP expression .)
    SEARCH_MODIFY   reduce using rule 77 (expression -> NOT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 77 (expression -> NOT_OP expression .)
    BLOCK_BEGIN     reduce using rule 77 (expression -> NOT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 77 (expression -> NOT_OP expression .)
    EXPONENT_OP     shift and go to state 114

  ! EXPONENT_OP     [ reduce using rule 77 (expression -> NOT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
  ! SEARCH_MODIFY   [ shift and go to state 109 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 139 ]


state 107

    (76) expression -> BIT_FLIP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 76 (expression -> BIT_FLIP expression .)
    OR_STR_OP       reduce using rule 76 (expression -> BIT_FLIP expression .)
    XOR_STR_OP      reduce using rule 76 (expression -> BIT_FLIP expression .)
    AND_STR_OP      reduce using rule 76 (expression -> BIT_FLIP expression .)
    NOT_STR_OP      reduce using rule 76 (expression -> BIT_FLIP expression .)
    COMPARE_OP      reduce using rule 76 (expression -> BIT_FLIP expression .)
    BIT_OR          reduce using rule 76 (expression -> BIT_FLIP expression .)
    BIT_XOR         reduce using rule 76 (expression -> BIT_FLIP expression .)
    BIT_AND         reduce using rule 76 (expression -> BIT_FLIP expression .)
    AND_OP          reduce using rule 76 (expression -> BIT_FLIP expression .)
    OR_OP           reduce using rule 76 (expression -> BIT_FLIP expression .)
    EQUALS_OP       reduce using rule 76 (expression -> BIT_FLIP expression .)
    NOT_EQUALS_OP   reduce using rule 76 (expression -> BIT_FLIP expression .)
    GREATER_OP      reduce using rule 76 (expression -> BIT_FLIP expression .)
    LESS_OP         reduce using rule 76 (expression -> BIT_FLIP expression .)
    GREATER_EQUAL_OP reduce using rule 76 (expression -> BIT_FLIP expression .)
    LESS_EQUAL_OP   reduce using rule 76 (expression -> BIT_FLIP expression .)
    PLUS_OP         reduce using rule 76 (expression -> BIT_FLIP expression .)
    MINUS_OP        reduce using rule 76 (expression -> BIT_FLIP expression .)
    MULTIPLICATION_OP reduce using rule 76 (expression -> BIT_FLIP expression .)
    DIVISION_OP     reduce using rule 76 (expression -> BIT_FLIP expression .)
    MODULUS_OP      reduce using rule 76 (expression -> BIT_FLIP expression .)
    BIT_RIGHT_SHIFT reduce using rule 76 (expression -> BIT_FLIP expression .)
    BIT_LEFT_SHIFT  reduce using rule 76 (expression -> BIT_FLIP expression .)
    CONCATENATE     reduce using rule 76 (expression -> BIT_FLIP expression .)
    REP_OP          reduce using rule 76 (expression -> BIT_FLIP expression .)
    COMMA           reduce using rule 76 (expression -> BIT_FLIP expression .)
    ASSOCIATE_OP    reduce using rule 76 (expression -> BIT_FLIP expression .)
    RANGE_OP        reduce using rule 76 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY   reduce using rule 76 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY_NEG reduce using rule 76 (expression -> BIT_FLIP expression .)
    BLOCK_BEGIN     reduce using rule 76 (expression -> BIT_FLIP expression .)
    CLOSE_PARANTHESIS reduce using rule 76 (expression -> BIT_FLIP expression .)
    EXPONENT_OP     shift and go to state 114

  ! EXPONENT_OP     [ reduce using rule 76 (expression -> BIT_FLIP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
  ! SEARCH_MODIFY   [ shift and go to state 109 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 139 ]
=======
state 101

    (73) expression -> MINUS_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 73 (expression -> MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 73 (expression -> MINUS_OP expression .)
    AND_STR_OP      reduce using rule 73 (expression -> MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 73 (expression -> MINUS_OP expression .)
    COMPARE_OP      reduce using rule 73 (expression -> MINUS_OP expression .)
    BIT_OR          reduce using rule 73 (expression -> MINUS_OP expression .)
    BIT_XOR         reduce using rule 73 (expression -> MINUS_OP expression .)
    BIT_AND         reduce using rule 73 (expression -> MINUS_OP expression .)
    AND_OP          reduce using rule 73 (expression -> MINUS_OP expression .)
    OR_OP           reduce using rule 73 (expression -> MINUS_OP expression .)
    EQUALS_OP       reduce using rule 73 (expression -> MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 73 (expression -> MINUS_OP expression .)
    GREATER_OP      reduce using rule 73 (expression -> MINUS_OP expression .)
    LESS_OP         reduce using rule 73 (expression -> MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 73 (expression -> MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 73 (expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 73 (expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 73 (expression -> MINUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 73 (expression -> MINUS_OP expression .)
    DIVISION_OP     reduce using rule 73 (expression -> MINUS_OP expression .)
    MODULUS_OP      reduce using rule 73 (expression -> MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 73 (expression -> MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 73 (expression -> MINUS_OP expression .)
    CONCATENATE     reduce using rule 73 (expression -> MINUS_OP expression .)
    REP_OP          reduce using rule 73 (expression -> MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 73 (expression -> MINUS_OP expression .)
    RANGE_OP        reduce using rule 73 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 73 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 73 (expression -> MINUS_OP expression .)
    SEMICOLON       reduce using rule 73 (expression -> MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 73 (expression -> MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 73 (expression -> MINUS_OP expression .)
    COMMA           reduce using rule 73 (expression -> MINUS_OP expression .)
    EXPONENT_OP     shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 73 (expression -> MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
  ! SEARCH_MODIFY   [ shift and go to state 106 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 135 ]


state 102

    (75) expression -> NOT_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 75 (expression -> NOT_OP expression .)
    XOR_STR_OP      reduce using rule 75 (expression -> NOT_OP expression .)
    AND_STR_OP      reduce using rule 75 (expression -> NOT_OP expression .)
    NOT_STR_OP      reduce using rule 75 (expression -> NOT_OP expression .)
    COMPARE_OP      reduce using rule 75 (expression -> NOT_OP expression .)
    BIT_OR          reduce using rule 75 (expression -> NOT_OP expression .)
    BIT_XOR         reduce using rule 75 (expression -> NOT_OP expression .)
    BIT_AND         reduce using rule 75 (expression -> NOT_OP expression .)
    AND_OP          reduce using rule 75 (expression -> NOT_OP expression .)
    OR_OP           reduce using rule 75 (expression -> NOT_OP expression .)
    EQUALS_OP       reduce using rule 75 (expression -> NOT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 75 (expression -> NOT_OP expression .)
    GREATER_OP      reduce using rule 75 (expression -> NOT_OP expression .)
    LESS_OP         reduce using rule 75 (expression -> NOT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 75 (expression -> NOT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 75 (expression -> NOT_OP expression .)
    PLUS_OP         reduce using rule 75 (expression -> NOT_OP expression .)
    MINUS_OP        reduce using rule 75 (expression -> NOT_OP expression .)
    MULTIPLICATION_OP reduce using rule 75 (expression -> NOT_OP expression .)
    DIVISION_OP     reduce using rule 75 (expression -> NOT_OP expression .)
    MODULUS_OP      reduce using rule 75 (expression -> NOT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 75 (expression -> NOT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 75 (expression -> NOT_OP expression .)
    CONCATENATE     reduce using rule 75 (expression -> NOT_OP expression .)
    REP_OP          reduce using rule 75 (expression -> NOT_OP expression .)
    ASSOCIATE_OP    reduce using rule 75 (expression -> NOT_OP expression .)
    RANGE_OP        reduce using rule 75 (expression -> NOT_OP expression .)
    SEARCH_MODIFY   reduce using rule 75 (expression -> NOT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 75 (expression -> NOT_OP expression .)
    SEMICOLON       reduce using rule 75 (expression -> NOT_OP expression .)
    BLOCK_BEGIN     reduce using rule 75 (expression -> NOT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 75 (expression -> NOT_OP expression .)
    COMMA           reduce using rule 75 (expression -> NOT_OP expression .)
    EXPONENT_OP     shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 75 (expression -> NOT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
  ! SEARCH_MODIFY   [ shift and go to state 106 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 135 ]


state 103

    (74) expression -> BIT_FLIP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 74 (expression -> BIT_FLIP expression .)
    XOR_STR_OP      reduce using rule 74 (expression -> BIT_FLIP expression .)
    AND_STR_OP      reduce using rule 74 (expression -> BIT_FLIP expression .)
    NOT_STR_OP      reduce using rule 74 (expression -> BIT_FLIP expression .)
    COMPARE_OP      reduce using rule 74 (expression -> BIT_FLIP expression .)
    BIT_OR          reduce using rule 74 (expression -> BIT_FLIP expression .)
    BIT_XOR         reduce using rule 74 (expression -> BIT_FLIP expression .)
    BIT_AND         reduce using rule 74 (expression -> BIT_FLIP expression .)
    AND_OP          reduce using rule 74 (expression -> BIT_FLIP expression .)
    OR_OP           reduce using rule 74 (expression -> BIT_FLIP expression .)
    EQUALS_OP       reduce using rule 74 (expression -> BIT_FLIP expression .)
    NOT_EQUALS_OP   reduce using rule 74 (expression -> BIT_FLIP expression .)
    GREATER_OP      reduce using rule 74 (expression -> BIT_FLIP expression .)
    LESS_OP         reduce using rule 74 (expression -> BIT_FLIP expression .)
    GREATER_EQUAL_OP reduce using rule 74 (expression -> BIT_FLIP expression .)
    LESS_EQUAL_OP   reduce using rule 74 (expression -> BIT_FLIP expression .)
    PLUS_OP         reduce using rule 74 (expression -> BIT_FLIP expression .)
    MINUS_OP        reduce using rule 74 (expression -> BIT_FLIP expression .)
    MULTIPLICATION_OP reduce using rule 74 (expression -> BIT_FLIP expression .)
    DIVISION_OP     reduce using rule 74 (expression -> BIT_FLIP expression .)
    MODULUS_OP      reduce using rule 74 (expression -> BIT_FLIP expression .)
    BIT_RIGHT_SHIFT reduce using rule 74 (expression -> BIT_FLIP expression .)
    BIT_LEFT_SHIFT  reduce using rule 74 (expression -> BIT_FLIP expression .)
    CONCATENATE     reduce using rule 74 (expression -> BIT_FLIP expression .)
    REP_OP          reduce using rule 74 (expression -> BIT_FLIP expression .)
    ASSOCIATE_OP    reduce using rule 74 (expression -> BIT_FLIP expression .)
    RANGE_OP        reduce using rule 74 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY   reduce using rule 74 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY_NEG reduce using rule 74 (expression -> BIT_FLIP expression .)
    SEMICOLON       reduce using rule 74 (expression -> BIT_FLIP expression .)
    BLOCK_BEGIN     reduce using rule 74 (expression -> BIT_FLIP expression .)
    CLOSE_PARANTHESIS reduce using rule 74 (expression -> BIT_FLIP expression .)
    COMMA           reduce using rule 74 (expression -> BIT_FLIP expression .)
    EXPONENT_OP     shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 74 (expression -> BIT_FLIP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
  ! SEARCH_MODIFY   [ shift and go to state 106 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 135 ]


state 104

    (68) term -> ARRAY OPEN_BRACKET . NUMBER CLOSE_BRACKET
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    NUMBER          shift and go to state 162

<<<<<<< HEAD
state 108

    (74) expression -> PLUS_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 74 (expression -> PLUS_OP expression .)
    OR_STR_OP       reduce using rule 74 (expression -> PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 74 (expression -> PLUS_OP expression .)
    AND_STR_OP      reduce using rule 74 (expression -> PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 74 (expression -> PLUS_OP expression .)
    COMPARE_OP      reduce using rule 74 (expression -> PLUS_OP expression .)
    BIT_OR          reduce using rule 74 (expression -> PLUS_OP expression .)
    BIT_XOR         reduce using rule 74 (expression -> PLUS_OP expression .)
    BIT_AND         reduce using rule 74 (expression -> PLUS_OP expression .)
    AND_OP          reduce using rule 74 (expression -> PLUS_OP expression .)
    OR_OP           reduce using rule 74 (expression -> PLUS_OP expression .)
    EQUALS_OP       reduce using rule 74 (expression -> PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 74 (expression -> PLUS_OP expression .)
    GREATER_OP      reduce using rule 74 (expression -> PLUS_OP expression .)
    LESS_OP         reduce using rule 74 (expression -> PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 74 (expression -> PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 74 (expression -> PLUS_OP expression .)
    PLUS_OP         reduce using rule 74 (expression -> PLUS_OP expression .)
    MINUS_OP        reduce using rule 74 (expression -> PLUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 74 (expression -> PLUS_OP expression .)
    DIVISION_OP     reduce using rule 74 (expression -> PLUS_OP expression .)
    MODULUS_OP      reduce using rule 74 (expression -> PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 74 (expression -> PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 74 (expression -> PLUS_OP expression .)
    CONCATENATE     reduce using rule 74 (expression -> PLUS_OP expression .)
    REP_OP          reduce using rule 74 (expression -> PLUS_OP expression .)
    COMMA           reduce using rule 74 (expression -> PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 74 (expression -> PLUS_OP expression .)
    RANGE_OP        reduce using rule 74 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 74 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 74 (expression -> PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 74 (expression -> PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 74 (expression -> PLUS_OP expression .)
    EXPONENT_OP     shift and go to state 114

  ! EXPONENT_OP     [ reduce using rule 74 (expression -> PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
  ! SEARCH_MODIFY   [ shift and go to state 109 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 139 ]


state 109

    (110) expression -> expression SEARCH_MODIFY . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======

state 105

    (72) expression -> PLUS_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 72 (expression -> PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 72 (expression -> PLUS_OP expression .)
    AND_STR_OP      reduce using rule 72 (expression -> PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 72 (expression -> PLUS_OP expression .)
    COMPARE_OP      reduce using rule 72 (expression -> PLUS_OP expression .)
    BIT_OR          reduce using rule 72 (expression -> PLUS_OP expression .)
    BIT_XOR         reduce using rule 72 (expression -> PLUS_OP expression .)
    BIT_AND         reduce using rule 72 (expression -> PLUS_OP expression .)
    AND_OP          reduce using rule 72 (expression -> PLUS_OP expression .)
    OR_OP           reduce using rule 72 (expression -> PLUS_OP expression .)
    EQUALS_OP       reduce using rule 72 (expression -> PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 72 (expression -> PLUS_OP expression .)
    GREATER_OP      reduce using rule 72 (expression -> PLUS_OP expression .)
    LESS_OP         reduce using rule 72 (expression -> PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 72 (expression -> PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 72 (expression -> PLUS_OP expression .)
    PLUS_OP         reduce using rule 72 (expression -> PLUS_OP expression .)
    MINUS_OP        reduce using rule 72 (expression -> PLUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 72 (expression -> PLUS_OP expression .)
    DIVISION_OP     reduce using rule 72 (expression -> PLUS_OP expression .)
    MODULUS_OP      reduce using rule 72 (expression -> PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 72 (expression -> PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 72 (expression -> PLUS_OP expression .)
    CONCATENATE     reduce using rule 72 (expression -> PLUS_OP expression .)
    REP_OP          reduce using rule 72 (expression -> PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 72 (expression -> PLUS_OP expression .)
    RANGE_OP        reduce using rule 72 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 72 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 72 (expression -> PLUS_OP expression .)
    SEMICOLON       reduce using rule 72 (expression -> PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 72 (expression -> PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 72 (expression -> PLUS_OP expression .)
    COMMA           reduce using rule 72 (expression -> PLUS_OP expression .)
    EXPONENT_OP     shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 72 (expression -> PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
  ! SEARCH_MODIFY   [ shift and go to state 106 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 135 ]


state 106

    (107) expression -> expression SEARCH_MODIFY . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 166
    empty                          shift and go to state 58

state 110

    (95) expression -> expression LESS_EQUAL_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 163
    empty                          shift and go to state 55

state 107

    (93) expression -> expression LESS_EQUAL_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 167
    empty                          shift and go to state 58

state 111

    (98) expression -> expression MINUS_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 164
    empty                          shift and go to state 55

state 108

    (96) expression -> expression MINUS_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 168
    empty                          shift and go to state 58

state 112

    (84) expression -> expression COMPARE_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 165
    empty                          shift and go to state 55

state 109

    (82) expression -> expression COMPARE_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 169
    empty                          shift and go to state 58

state 113

    (91) expression -> expression NOT_EQUALS_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 166
    empty                          shift and go to state 55

state 110

    (89) expression -> expression NOT_EQUALS_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 170
    empty                          shift and go to state 58

state 114

    (102) expression -> expression EXPONENT_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 167
    empty                          shift and go to state 55

state 111

    (100) expression -> expression EXPONENT_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 171
    empty                          shift and go to state 58

state 115

    (83) expression -> expression NOT_STR_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 168
    empty                          shift and go to state 55

state 112

    (81) expression -> expression NOT_STR_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 172
    empty                          shift and go to state 58

state 116

    (100) expression -> expression DIVISION_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 169
    empty                          shift and go to state 55

state 113

    (98) expression -> expression DIVISION_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 173
    empty                          shift and go to state 58

state 117

    (109) expression -> expression RANGE_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 170
    empty                          shift and go to state 55

state 114

    (106) expression -> expression RANGE_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 174
    empty                          shift and go to state 58

state 118

    (86) expression -> expression BIT_XOR . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 171
    empty                          shift and go to state 55

state 115

    (84) expression -> expression BIT_XOR . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 175
    empty                          shift and go to state 58

state 119

    (90) expression -> expression EQUALS_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 172
    empty                          shift and go to state 55

state 116

    (88) expression -> expression EQUALS_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 176
    empty                          shift and go to state 58

state 120

    (40) printStatement -> PRINT expression SEMICOLON .

    VARIABLE        reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    LOCAL           reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    PRIVATE         reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    RETURN          reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    WHILE           reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    FOR             reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    PRINT           reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    SUB             reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    LAST            reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    NEXT            reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    IF              reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    USE             reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    UNTIL           reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    DO              reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    SWITCH          reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    $end            reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 40 (printStatement -> PRINT expression SEMICOLON .)


state 121

    (82) expression -> expression AND_STR_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 173
    empty                          shift and go to state 55

state 117

    (37) printStatement -> PRINT expression SEMICOLON .

    VARIABLE        reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    ARRAY           reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    LOCAL           reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    PRIVATE         reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    RETURN          reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    WHILE           reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    FOR             reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    PRINT           reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    SUB             reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    LAST            reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    NEXT            reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    IF              reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    USE             reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    SWITCH          reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)
    $end            reduce using rule 37 (printStatement -> PRINT expression SEMICOLON .)


state 118

    (80) expression -> expression AND_STR_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 177
    empty                          shift and go to state 58

state 122

    (89) expression -> expression OR_OP . Marker expression
    (96) Marker -> . empty
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 174
    empty                          shift and go to state 55

state 119

    (87) expression -> expression OR_OP . Marker expression
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 178
    empty                          shift and go to state 41

state 123

    (93) expression -> expression LESS_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    Marker                         shift and go to state 175
    empty                          shift and go to state 38

state 120

    (91) expression -> expression LESS_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 179
    empty                          shift and go to state 58

state 124

    (107) expression -> expression COMMA . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 176
    empty                          shift and go to state 55

state 121

    (99) expression -> expression MODULUS_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 180
    empty                          shift and go to state 58

state 125

    (101) expression -> expression MODULUS_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 177
    empty                          shift and go to state 55

state 122

    (92) expression -> expression GREATER_EQUAL_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 181
    empty                          shift and go to state 58

state 126

    (94) expression -> expression GREATER_EQUAL_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 178
    empty                          shift and go to state 55

state 123

    (79) expression -> expression XOR_STR_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 182
    empty                          shift and go to state 58

state 127

    (81) expression -> expression XOR_STR_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 179
    empty                          shift and go to state 55

state 124

    (85) expression -> expression BIT_AND . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 183
    empty                          shift and go to state 58

state 128

    (87) expression -> expression BIT_AND . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 180
    empty                          shift and go to state 55

state 125

    (97) expression -> expression MULTIPLICATION_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 184
    empty                          shift and go to state 58

state 129

    (99) expression -> expression MULTIPLICATION_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 181
    empty                          shift and go to state 55

state 126

    (105) expression -> expression ASSOCIATE_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 185
    empty                          shift and go to state 58

state 130

    (108) expression -> expression ASSOCIATE_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 182
    empty                          shift and go to state 55

state 127

    (78) expression -> expression OR_STR_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 186
    empty                          shift and go to state 58

state 131

    (80) expression -> expression OR_STR_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 183
    empty                          shift and go to state 55

state 128

    (86) expression -> expression AND_OP . Marker expression
    (94) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    Marker                         shift and go to state 184
    empty                          shift and go to state 38

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 187
    empty                          shift and go to state 58

state 132

    (88) expression -> expression AND_OP . Marker expression
    (96) Marker -> . empty
=======
state 129

    (102) expression -> expression BIT_LEFT_SHIFT . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD

    Marker                         shift and go to state 188
    empty                          shift and go to state 41

state 133

    (104) expression -> expression BIT_LEFT_SHIFT . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 189
    empty                          shift and go to state 58

state 134

    (106) expression -> expression REP_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 185
    empty                          shift and go to state 55

state 130

    (104) expression -> expression REP_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 190
    empty                          shift and go to state 58

state 135

    (105) expression -> expression CONCATENATE . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 186
    empty                          shift and go to state 55

state 131

    (103) expression -> expression CONCATENATE . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 191
    empty                          shift and go to state 58

state 136

    (103) expression -> expression BIT_RIGHT_SHIFT . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 187
    empty                          shift and go to state 55

state 132

    (101) expression -> expression BIT_RIGHT_SHIFT . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 192
    empty                          shift and go to state 58

state 137

    (85) expression -> expression BIT_OR . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 188
    empty                          shift and go to state 55

state 133

    (83) expression -> expression BIT_OR . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 193
    empty                          shift and go to state 58

state 138

    (97) expression -> expression PLUS_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 189
    empty                          shift and go to state 55

state 134

    (95) expression -> expression PLUS_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 194
    empty                          shift and go to state 58

state 139

    (111) expression -> expression SEARCH_MODIFY_NEG . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 190
    empty                          shift and go to state 55

state 135

    (108) expression -> expression SEARCH_MODIFY_NEG . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 195
    empty                          shift and go to state 58

state 140

    (92) expression -> expression GREATER_OP . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 191
    empty                          shift and go to state 55

state 136

    (90) expression -> expression GREATER_OP . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 196
    empty                          shift and go to state 58

state 141

    (73) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 197
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 142

    (41) returnStatement -> RETURN expression SEMICOLON .

    VARIABLE        reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    LOCAL           reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    PRIVATE         reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    SUB             reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    LAST            reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    NEXT            reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    USE             reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    UNTIL           reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 41 (returnStatement -> RETURN expression SEMICOLON .)


state 143

    (36) functionStatement -> SUB IDENTIFIER Markerscope . block
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 192
    empty                          shift and go to state 55

state 137

    (67) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 193
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 138

    (38) returnStatement -> RETURN expression SEMICOLON .

    VARIABLE        reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    ARRAY           reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    LOCAL           reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    PRIVATE         reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    SUB             reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    LAST            reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    NEXT            reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    USE             reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 38 (returnStatement -> RETURN expression SEMICOLON .)


state 139

    (33) functionStatement -> SUB IDENTIFIER Markerscope . block
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

<<<<<<< HEAD
    block                          shift and go to state 198

state 144

    (37) Markerscope -> empty .

    BLOCK_BEGIN     reduce using rule 37 (Markerscope -> empty .)


state 145

    (25) switchStatement -> SWITCH expression BLOCK_BEGIN . caselist BLOCK_ENDS
    (26) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (27) caselist -> . ELSE block
    (28) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 199
    ELSE            shift and go to state 201
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 200
    empty                          shift and go to state 202

state 146

    (58) declaration -> PRIVATE VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 203


state 147

    (44) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    block                          shift and go to state 194

state 140

    (34) Markerscope -> empty .

    BLOCK_BEGIN     reduce using rule 34 (Markerscope -> empty .)


state 141

    (45) declaration -> PRIVATE VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 195


state 142

    (42) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 204
    empty                          shift and go to state 58

state 148

    (38) functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .

    SEMICOLON       reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    OR_STR_OP       reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 38 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)


state 149

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment . Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment . Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (96) Marker -> . empty
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 196
    empty                          shift and go to state 55

state 143

    (35) functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .

    CLOSE_PARANTHESIS reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    OR_STR_OP       reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    SEMICOLON       reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 35 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)


state 144

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment . Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment . Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 205
    empty                          shift and go to state 41

state 150

    (43) assignment -> LOCAL . VARIABLE ASSIGNMENT_OP expression SEMICOLON

    VARIABLE        shift and go to state 206


state 151

    (42) assignment -> VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (45) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP   shift and go to state 207
    ADV_ASSIGNMENT_OP shift and go to state 92


state 152

    (44) assignment -> PRIVATE . VARIABLE ASSIGNMENT_OP expression SEMICOLON

    VARIABLE        shift and go to state 208


state 153

    (10) statement -> functionCall Marker SEMICOLON .

    VARIABLE        reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    LOCAL           reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    PRIVATE         reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    FOR             reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    PRINT           reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    SUB             reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    LAST            reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    NEXT            reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    IF              reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    USE             reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    UNTIL           reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    DO              reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    SWITCH          reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    $end            reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
    BLOCK_ENDS      reduce using rule 10 (statement -> functionCall Marker SEMICOLON .)
=======
    Marker                         shift and go to state 197
    empty                          shift and go to state 38

state 145

    (41) assignment -> LOCAL . VARIABLE ASSIGNMENT_OP expression SEMICOLON

    VARIABLE        shift and go to state 198


state 146

    (39) assignment -> VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (43) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP   shift and go to state 89
    ADV_ASSIGNMENT_OP shift and go to state 87


state 147

    (42) assignment -> PRIVATE . VARIABLE ASSIGNMENT_OP expression SEMICOLON

    VARIABLE        shift and go to state 199


state 148

    (40) assignment -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    OPEN_BRACKET    shift and go to state 41

<<<<<<< HEAD
state 154

    (57) declaration -> VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    IF              reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    USE             reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    UNTIL           reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    DO              reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    $end            reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 57 (declaration -> VARIABLE decList SEMICOLON .)
=======

state 149
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (11) statement -> functionCall Marker SEMICOLON .

    VARIABLE        reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    ARRAY           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    LOCAL           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    PRIVATE         reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    FOR             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    PRINT           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SUB             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    LAST            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    NEXT            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    IF              reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    USE             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SWITCH          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    $end            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BLOCK_ENDS      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)

<<<<<<< HEAD
state 155

    (45) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression . SEMICOLON
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 209
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139
=======

state 150
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (44) declaration -> VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    IF              reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    USE             reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)
    $end            reduce using rule 44 (declaration -> VARIABLE decList SEMICOLON .)


state 151

    (43) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression . SEMICOLON
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 200
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

<<<<<<< HEAD
state 156

    (60) decList -> COMMA VARIABLE . decList
    (60) decList -> . COMMA VARIABLE decList
    (61) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 93
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 95
    decList                        shift and go to state 210

state 157

    (29) inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP . SEMICOLON
=======

state 152

    (47) decList -> COMMA VARIABLE . decList
    (47) decList -> . COMMA VARIABLE decList
    (48) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 88
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 90
    decList                        shift and go to state 201

state 153

    (39) assignment -> VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 202
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    SEMICOLON       shift and go to state 211

<<<<<<< HEAD

state 158

    (42) assignment -> VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 212
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 159

    (59) declaration -> LOCAL VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 213


state 160

    (43) assignment -> LOCAL VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
state 154

    (46) declaration -> LOCAL VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 203


state 155

    (41) assignment -> LOCAL VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 214
    empty                          shift and go to state 58

state 161

    (30) ifthen -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif Marker block
    (31) ifthenelse -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 215
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 162

    (48) dowhileStatement -> DO block WHILE Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON

    OPEN_PARANTHESIS shift and go to state 216


state 163

    (50) untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markeruntil block
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 204
    empty                          shift and go to state 55

state 156

    (27) ifthen -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 205
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 157

    (23) switchStatement -> SWITCH expression BLOCK_BEGIN . caselist BLOCK_ENDS
    (24) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (25) caselist -> . ELSE block
    (26) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 206
    ELSE            shift and go to state 208
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 207
    empty                          shift and go to state 209

state 158

    (40) assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET . ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP   shift and go to state 210


state 159

    (69) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression . arrayList CLOSE_PARANTHESIS SEMICOLON
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression
    (70) arrayList -> . COMMA expression arrayList
    (71) arrayList -> . COMMA expression

    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135
    COMMA           shift and go to state 211

    arrayList                      shift and go to state 212

state 160

    (50) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerwhile block
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 213
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 161

    (36) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . SEMICOLON
    (67) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 214
    OR_STR_OP       reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)

  ! SEMICOLON       [ reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .) ]
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    CLOSE_PARANTHESIS shift and go to state 217
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

<<<<<<< HEAD

state 164

    (46) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerwhile block
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 218
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 165

    (39) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . SEMICOLON
    (73) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 219
    OR_STR_OP       reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)

  ! SEMICOLON       [ reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .) ]


state 166

    (110) expression -> expression SEARCH_MODIFY expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    OR_STR_OP       reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    XOR_STR_OP      reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    AND_STR_OP      reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    NOT_STR_OP      reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    COMPARE_OP      reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    BIT_OR          reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    BIT_XOR         reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    BIT_AND         reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    AND_OP          reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    OR_OP           reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    EQUALS_OP       reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    NOT_EQUALS_OP   reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_OP      reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    LESS_OP         reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_EQUAL_OP reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    LESS_EQUAL_OP   reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    PLUS_OP         reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    MINUS_OP        reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    MULTIPLICATION_OP reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    DIVISION_OP     reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    MODULUS_OP      reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    BIT_RIGHT_SHIFT reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    BIT_LEFT_SHIFT  reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    CONCATENATE     reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    REP_OP          reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    COMMA           reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    ASSOCIATE_OP    reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    RANGE_OP        reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY   reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY_NEG reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    BLOCK_BEGIN     reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    CLOSE_PARANTHESIS reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .)
    EXPONENT_OP     shift and go to state 114

  ! EXPONENT_OP     [ reduce using rule 110 (expression -> expression SEARCH_MODIFY expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
  ! SEARCH_MODIFY   [ shift and go to state 109 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 139 ]


state 167

    (95) expression -> expression LESS_EQUAL_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    OR_STR_OP       reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_OR          reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_AND         reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    AND_OP          reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    OR_OP           reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_OP         reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    COMMA           reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! PLUS_OP         [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 95 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 168

    (98) expression -> expression MINUS_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 98 (expression -> expression MINUS_OP expression .)
    OR_STR_OP       reduce using rule 98 (expression -> expression MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 98 (expression -> expression MINUS_OP expression .)
    AND_STR_OP      reduce using rule 98 (expression -> expression MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 98 (expression -> expression MINUS_OP expression .)
    COMPARE_OP      reduce using rule 98 (expression -> expression MINUS_OP expression .)
    BIT_OR          reduce using rule 98 (expression -> expression MINUS_OP expression .)
    BIT_XOR         reduce using rule 98 (expression -> expression MINUS_OP expression .)
    BIT_AND         reduce using rule 98 (expression -> expression MINUS_OP expression .)
    AND_OP          reduce using rule 98 (expression -> expression MINUS_OP expression .)
    OR_OP           reduce using rule 98 (expression -> expression MINUS_OP expression .)
    EQUALS_OP       reduce using rule 98 (expression -> expression MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 98 (expression -> expression MINUS_OP expression .)
    GREATER_OP      reduce using rule 98 (expression -> expression MINUS_OP expression .)
    LESS_OP         reduce using rule 98 (expression -> expression MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 98 (expression -> expression MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 98 (expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 98 (expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 98 (expression -> expression MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 98 (expression -> expression MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 98 (expression -> expression MINUS_OP expression .)
    CONCATENATE     reduce using rule 98 (expression -> expression MINUS_OP expression .)
    COMMA           reduce using rule 98 (expression -> expression MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 98 (expression -> expression MINUS_OP expression .)
    RANGE_OP        reduce using rule 98 (expression -> expression MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 98 (expression -> expression MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 98 (expression -> expression MINUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! MULTIPLICATION_OP [ reduce using rule 98 (expression -> expression MINUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 98 (expression -> expression MINUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 98 (expression -> expression MINUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 98 (expression -> expression MINUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 98 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 98 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 98 (expression -> expression MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 169

    (84) expression -> expression COMPARE_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    OR_STR_OP       reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    XOR_STR_OP      reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    AND_STR_OP      reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    NOT_STR_OP      reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    COMPARE_OP      reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    BIT_OR          reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    BIT_XOR         reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    BIT_AND         reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    AND_OP          reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    OR_OP           reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    EQUALS_OP       reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    NOT_EQUALS_OP   reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    COMMA           reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    ASSOCIATE_OP    reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    RANGE_OP        reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    BLOCK_BEGIN     reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 84 (expression -> expression COMPARE_OP expression .)
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! GREATER_OP      [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! REP_OP          [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 84 (expression -> expression COMPARE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 170

    (91) expression -> expression NOT_EQUALS_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    OR_STR_OP       reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_OR          reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_XOR         reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_AND         reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    AND_OP          reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    OR_OP           reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    COMMA           reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    RANGE_OP        reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .)
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! GREATER_OP      [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 91 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 171

    (102) expression -> expression EXPONENT_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    OR_STR_OP       reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    XOR_STR_OP      reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    AND_STR_OP      reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    NOT_STR_OP      reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    COMPARE_OP      reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    BIT_OR          reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    BIT_XOR         reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    BIT_AND         reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    AND_OP          reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    OR_OP           reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    EQUALS_OP       reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    GREATER_OP      reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    LESS_OP         reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    PLUS_OP         reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    MINUS_OP        reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    MULTIPLICATION_OP reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    DIVISION_OP     reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    MODULUS_OP      reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    CONCATENATE     reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    REP_OP          reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    COMMA           reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    ASSOCIATE_OP    reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    RANGE_OP        reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY   reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    BLOCK_BEGIN     reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 102 (expression -> expression EXPONENT_OP expression .)
    EXPONENT_OP     shift and go to state 114

  ! EXPONENT_OP     [ reduce using rule 102 (expression -> expression EXPONENT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
  ! SEARCH_MODIFY   [ shift and go to state 109 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 139 ]


state 172

    (83) expression -> expression NOT_STR_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 83 (expression -> expression NOT_STR_OP expression .)
    OR_STR_OP       reduce using rule 83 (expression -> expression NOT_STR_OP expression .)
    XOR_STR_OP      reduce using rule 83 (expression -> expression NOT_STR_OP expression .)
    AND_STR_OP      reduce using rule 83 (expression -> expression NOT_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 83 (expression -> expression NOT_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 83 (expression -> expression NOT_STR_OP expression .)
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! NOT_STR_OP      [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 83 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]


state 173

    (100) expression -> expression DIVISION_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    OR_STR_OP       reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    XOR_STR_OP      reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    AND_STR_OP      reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    NOT_STR_OP      reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    COMPARE_OP      reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    BIT_OR          reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    BIT_XOR         reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    BIT_AND         reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    AND_OP          reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    OR_OP           reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    EQUALS_OP       reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    GREATER_OP      reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    LESS_OP         reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    PLUS_OP         reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    MINUS_OP        reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    MULTIPLICATION_OP reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    DIVISION_OP     reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    MODULUS_OP      reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    CONCATENATE     reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    REP_OP          reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    COMMA           reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    ASSOCIATE_OP    reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    RANGE_OP        reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    BLOCK_BEGIN     reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 100 (expression -> expression DIVISION_OP expression .)
    EXPONENT_OP     shift and go to state 114
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! EXPONENT_OP     [ reduce using rule 100 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 100 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 100 (expression -> expression DIVISION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 174

    (109) expression -> expression RANGE_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 109 (expression -> expression RANGE_OP expression .)
    OR_STR_OP       reduce using rule 109 (expression -> expression RANGE_OP expression .)
    XOR_STR_OP      reduce using rule 109 (expression -> expression RANGE_OP expression .)
    AND_STR_OP      reduce using rule 109 (expression -> expression RANGE_OP expression .)
    NOT_STR_OP      reduce using rule 109 (expression -> expression RANGE_OP expression .)
    COMMA           reduce using rule 109 (expression -> expression RANGE_OP expression .)
    ASSOCIATE_OP    reduce using rule 109 (expression -> expression RANGE_OP expression .)
    RANGE_OP        reduce using rule 109 (expression -> expression RANGE_OP expression .)
    BLOCK_BEGIN     reduce using rule 109 (expression -> expression RANGE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 109 (expression -> expression RANGE_OP expression .)
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! COMPARE_OP      [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! AND_OP          [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! OR_OP           [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! REP_OP          [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 109 (expression -> expression RANGE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
=======
state 162

    (68) term -> ARRAY OPEN_BRACKET NUMBER . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 215


state 163

    (107) expression -> expression SEARCH_MODIFY expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    XOR_STR_OP      reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    AND_STR_OP      reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    NOT_STR_OP      reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    COMPARE_OP      reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    BIT_OR          reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    BIT_XOR         reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    BIT_AND         reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    AND_OP          reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    OR_OP           reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    EQUALS_OP       reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    NOT_EQUALS_OP   reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_OP      reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    LESS_OP         reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_EQUAL_OP reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    LESS_EQUAL_OP   reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    PLUS_OP         reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    MINUS_OP        reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    MULTIPLICATION_OP reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    DIVISION_OP     reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    MODULUS_OP      reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    BIT_RIGHT_SHIFT reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    BIT_LEFT_SHIFT  reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    CONCATENATE     reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    REP_OP          reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    ASSOCIATE_OP    reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    RANGE_OP        reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY   reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY_NEG reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    SEMICOLON       reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    BLOCK_BEGIN     reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    CLOSE_PARANTHESIS reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    COMMA           reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .)
    EXPONENT_OP     shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 107 (expression -> expression SEARCH_MODIFY expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
  ! SEARCH_MODIFY   [ shift and go to state 106 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 135 ]


state 164

    (93) expression -> expression LESS_EQUAL_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_OR          reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_AND         reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    AND_OP          reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    OR_OP           reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_OP         reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    SEMICOLON       reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    COMMA           reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! PLUS_OP         [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 93 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 165

    (96) expression -> expression MINUS_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 96 (expression -> expression MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 96 (expression -> expression MINUS_OP expression .)
    AND_STR_OP      reduce using rule 96 (expression -> expression MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 96 (expression -> expression MINUS_OP expression .)
    COMPARE_OP      reduce using rule 96 (expression -> expression MINUS_OP expression .)
    BIT_OR          reduce using rule 96 (expression -> expression MINUS_OP expression .)
    BIT_XOR         reduce using rule 96 (expression -> expression MINUS_OP expression .)
    BIT_AND         reduce using rule 96 (expression -> expression MINUS_OP expression .)
    AND_OP          reduce using rule 96 (expression -> expression MINUS_OP expression .)
    OR_OP           reduce using rule 96 (expression -> expression MINUS_OP expression .)
    EQUALS_OP       reduce using rule 96 (expression -> expression MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 96 (expression -> expression MINUS_OP expression .)
    GREATER_OP      reduce using rule 96 (expression -> expression MINUS_OP expression .)
    LESS_OP         reduce using rule 96 (expression -> expression MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 96 (expression -> expression MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 96 (expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 96 (expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 96 (expression -> expression MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 96 (expression -> expression MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 96 (expression -> expression MINUS_OP expression .)
    CONCATENATE     reduce using rule 96 (expression -> expression MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 96 (expression -> expression MINUS_OP expression .)
    RANGE_OP        reduce using rule 96 (expression -> expression MINUS_OP expression .)
    SEMICOLON       reduce using rule 96 (expression -> expression MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 96 (expression -> expression MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 96 (expression -> expression MINUS_OP expression .)
    COMMA           reduce using rule 96 (expression -> expression MINUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! MULTIPLICATION_OP [ reduce using rule 96 (expression -> expression MINUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 96 (expression -> expression MINUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 96 (expression -> expression MINUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 96 (expression -> expression MINUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 96 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 96 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 96 (expression -> expression MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 166

    (82) expression -> expression COMPARE_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    XOR_STR_OP      reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    AND_STR_OP      reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    NOT_STR_OP      reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    COMPARE_OP      reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    BIT_OR          reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    BIT_XOR         reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    BIT_AND         reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    AND_OP          reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    OR_OP           reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    EQUALS_OP       reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    NOT_EQUALS_OP   reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    ASSOCIATE_OP    reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    RANGE_OP        reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    SEMICOLON       reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    BLOCK_BEGIN     reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    COMMA           reduce using rule 82 (expression -> expression COMPARE_OP expression .)
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! GREATER_OP      [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! REP_OP          [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 82 (expression -> expression COMPARE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 167

    (89) expression -> expression NOT_EQUALS_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_OR          reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_XOR         reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_AND         reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    AND_OP          reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    OR_OP           reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    RANGE_OP        reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    SEMICOLON       reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    COMMA           reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .)
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! GREATER_OP      [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 89 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 168

    (100) expression -> expression EXPONENT_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    XOR_STR_OP      reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    AND_STR_OP      reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    NOT_STR_OP      reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    COMPARE_OP      reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    BIT_OR          reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    BIT_XOR         reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    BIT_AND         reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    AND_OP          reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    OR_OP           reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    EQUALS_OP       reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    GREATER_OP      reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    LESS_OP         reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    PLUS_OP         reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    MINUS_OP        reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    MULTIPLICATION_OP reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    DIVISION_OP     reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    MODULUS_OP      reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    CONCATENATE     reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    REP_OP          reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    ASSOCIATE_OP    reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    RANGE_OP        reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY   reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    SEMICOLON       reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    BLOCK_BEGIN     reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    COMMA           reduce using rule 100 (expression -> expression EXPONENT_OP expression .)
    EXPONENT_OP     shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 100 (expression -> expression EXPONENT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
  ! SEARCH_MODIFY   [ shift and go to state 106 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 135 ]


state 169

    (81) expression -> expression NOT_STR_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 81 (expression -> expression NOT_STR_OP expression .)
    XOR_STR_OP      reduce using rule 81 (expression -> expression NOT_STR_OP expression .)
    AND_STR_OP      reduce using rule 81 (expression -> expression NOT_STR_OP expression .)
    SEMICOLON       reduce using rule 81 (expression -> expression NOT_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 81 (expression -> expression NOT_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 81 (expression -> expression NOT_STR_OP expression .)
    COMMA           reduce using rule 81 (expression -> expression NOT_STR_OP expression .)
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! NOT_STR_OP      [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 81 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]


state 170

    (98) expression -> expression DIVISION_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    XOR_STR_OP      reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    AND_STR_OP      reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    NOT_STR_OP      reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    COMPARE_OP      reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    BIT_OR          reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    BIT_XOR         reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    BIT_AND         reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    AND_OP          reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    OR_OP           reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    EQUALS_OP       reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    GREATER_OP      reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    LESS_OP         reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    PLUS_OP         reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    MINUS_OP        reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    MULTIPLICATION_OP reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    DIVISION_OP     reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    MODULUS_OP      reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    CONCATENATE     reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    REP_OP          reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    ASSOCIATE_OP    reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    RANGE_OP        reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    SEMICOLON       reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    BLOCK_BEGIN     reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    COMMA           reduce using rule 98 (expression -> expression DIVISION_OP expression .)
    EXPONENT_OP     shift and go to state 111
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! EXPONENT_OP     [ reduce using rule 98 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 98 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 98 (expression -> expression DIVISION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 171

    (106) expression -> expression RANGE_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 106 (expression -> expression RANGE_OP expression .)
    XOR_STR_OP      reduce using rule 106 (expression -> expression RANGE_OP expression .)
    AND_STR_OP      reduce using rule 106 (expression -> expression RANGE_OP expression .)
    NOT_STR_OP      reduce using rule 106 (expression -> expression RANGE_OP expression .)
    ASSOCIATE_OP    reduce using rule 106 (expression -> expression RANGE_OP expression .)
    RANGE_OP        reduce using rule 106 (expression -> expression RANGE_OP expression .)
    SEMICOLON       reduce using rule 106 (expression -> expression RANGE_OP expression .)
    BLOCK_BEGIN     reduce using rule 106 (expression -> expression RANGE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 106 (expression -> expression RANGE_OP expression .)
    COMMA           reduce using rule 106 (expression -> expression RANGE_OP expression .)
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! COMPARE_OP      [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! AND_OP          [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! OR_OP           [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! REP_OP          [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 106 (expression -> expression RANGE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 172
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (84) expression -> expression BIT_XOR expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 84 (expression -> expression BIT_XOR expression .)
    XOR_STR_OP      reduce using rule 84 (expression -> expression BIT_XOR expression .)
    AND_STR_OP      reduce using rule 84 (expression -> expression BIT_XOR expression .)
    NOT_STR_OP      reduce using rule 84 (expression -> expression BIT_XOR expression .)
    BIT_OR          reduce using rule 84 (expression -> expression BIT_XOR expression .)
    BIT_XOR         reduce using rule 84 (expression -> expression BIT_XOR expression .)
    AND_OP          reduce using rule 84 (expression -> expression BIT_XOR expression .)
    OR_OP           reduce using rule 84 (expression -> expression BIT_XOR expression .)
    ASSOCIATE_OP    reduce using rule 84 (expression -> expression BIT_XOR expression .)
    RANGE_OP        reduce using rule 84 (expression -> expression BIT_XOR expression .)
    SEMICOLON       reduce using rule 84 (expression -> expression BIT_XOR expression .)
    BLOCK_BEGIN     reduce using rule 84 (expression -> expression BIT_XOR expression .)
    CLOSE_PARANTHESIS reduce using rule 84 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 84 (expression -> expression BIT_XOR expression .)
    COMPARE_OP      shift and go to state 109
    BIT_AND         shift and go to state 124
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! COMPARE_OP      [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! EQUALS_OP       [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_OP      [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! LESS_OP         [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! PLUS_OP         [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! MINUS_OP        [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! DIVISION_OP     [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! MODULUS_OP      [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! CONCATENATE     [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! REP_OP          [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 84 (expression -> expression BIT_XOR expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]

<<<<<<< HEAD
state 175

    (86) expression -> expression BIT_XOR expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 86 (expression -> expression BIT_XOR expression .)
    OR_STR_OP       reduce using rule 86 (expression -> expression BIT_XOR expression .)
    XOR_STR_OP      reduce using rule 86 (expression -> expression BIT_XOR expression .)
    AND_STR_OP      reduce using rule 86 (expression -> expression BIT_XOR expression .)
    NOT_STR_OP      reduce using rule 86 (expression -> expression BIT_XOR expression .)
    BIT_OR          reduce using rule 86 (expression -> expression BIT_XOR expression .)
    BIT_XOR         reduce using rule 86 (expression -> expression BIT_XOR expression .)
    AND_OP          reduce using rule 86 (expression -> expression BIT_XOR expression .)
    OR_OP           reduce using rule 86 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 86 (expression -> expression BIT_XOR expression .)
    ASSOCIATE_OP    reduce using rule 86 (expression -> expression BIT_XOR expression .)
    RANGE_OP        reduce using rule 86 (expression -> expression BIT_XOR expression .)
    BLOCK_BEGIN     reduce using rule 86 (expression -> expression BIT_XOR expression .)
    CLOSE_PARANTHESIS reduce using rule 86 (expression -> expression BIT_XOR expression .)
    COMPARE_OP      shift and go to state 112
    BIT_AND         shift and go to state 128
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! COMPARE_OP      [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! EQUALS_OP       [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_OP      [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! LESS_OP         [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! PLUS_OP         [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! MINUS_OP        [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! DIVISION_OP     [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! MODULUS_OP      [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! CONCATENATE     [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! REP_OP          [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 86 (expression -> expression BIT_XOR expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
=======

state 173
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (88) expression -> expression EQUALS_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    BIT_OR          reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    BIT_XOR         reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    BIT_AND         reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    AND_OP          reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    OR_OP           reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    RANGE_OP        reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    SEMICOLON       reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    COMMA           reduce using rule 88 (expression -> expression EQUALS_OP expression .)
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! GREATER_OP      [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 88 (expression -> expression EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 174

    (80) expression -> expression AND_STR_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 80 (expression -> expression AND_STR_OP expression .)
    XOR_STR_OP      reduce using rule 80 (expression -> expression AND_STR_OP expression .)
    AND_STR_OP      reduce using rule 80 (expression -> expression AND_STR_OP expression .)
    SEMICOLON       reduce using rule 80 (expression -> expression AND_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 80 (expression -> expression AND_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 80 (expression -> expression AND_STR_OP expression .)
    COMMA           reduce using rule 80 (expression -> expression AND_STR_OP expression .)
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! NOT_STR_OP      [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 80 (expression -> expression AND_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]

<<<<<<< HEAD
state 176

    (90) expression -> expression EQUALS_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    OR_STR_OP       reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    BIT_OR          reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    BIT_XOR         reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    BIT_AND         reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    AND_OP          reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    OR_OP           reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    COMMA           reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    RANGE_OP        reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 90 (expression -> expression EQUALS_OP expression .)
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! GREATER_OP      [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 90 (expression -> expression EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 177

    (82) expression -> expression AND_STR_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 82 (expression -> expression AND_STR_OP expression .)
    OR_STR_OP       reduce using rule 82 (expression -> expression AND_STR_OP expression .)
    XOR_STR_OP      reduce using rule 82 (expression -> expression AND_STR_OP expression .)
    AND_STR_OP      reduce using rule 82 (expression -> expression AND_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 82 (expression -> expression AND_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 82 (expression -> expression AND_STR_OP expression .)
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! NOT_STR_OP      [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 82 (expression -> expression AND_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]


state 178

    (89) expression -> expression OR_OP Marker . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======

state 175

    (87) expression -> expression OR_OP Marker . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 220
    empty                          shift and go to state 58

state 179

    (93) expression -> expression LESS_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 93 (expression -> expression LESS_OP expression .)
    OR_STR_OP       reduce using rule 93 (expression -> expression LESS_OP expression .)
    XOR_STR_OP      reduce using rule 93 (expression -> expression LESS_OP expression .)
    AND_STR_OP      reduce using rule 93 (expression -> expression LESS_OP expression .)
    NOT_STR_OP      reduce using rule 93 (expression -> expression LESS_OP expression .)
    COMPARE_OP      reduce using rule 93 (expression -> expression LESS_OP expression .)
    BIT_OR          reduce using rule 93 (expression -> expression LESS_OP expression .)
    BIT_XOR         reduce using rule 93 (expression -> expression LESS_OP expression .)
    BIT_AND         reduce using rule 93 (expression -> expression LESS_OP expression .)
    AND_OP          reduce using rule 93 (expression -> expression LESS_OP expression .)
    OR_OP           reduce using rule 93 (expression -> expression LESS_OP expression .)
    EQUALS_OP       reduce using rule 93 (expression -> expression LESS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 93 (expression -> expression LESS_OP expression .)
    GREATER_OP      reduce using rule 93 (expression -> expression LESS_OP expression .)
    LESS_OP         reduce using rule 93 (expression -> expression LESS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 93 (expression -> expression LESS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 93 (expression -> expression LESS_OP expression .)
    COMMA           reduce using rule 93 (expression -> expression LESS_OP expression .)
    ASSOCIATE_OP    reduce using rule 93 (expression -> expression LESS_OP expression .)
    RANGE_OP        reduce using rule 93 (expression -> expression LESS_OP expression .)
    BLOCK_BEGIN     reduce using rule 93 (expression -> expression LESS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 93 (expression -> expression LESS_OP expression .)
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! PLUS_OP         [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! REP_OP          [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 93 (expression -> expression LESS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 180

    (107) expression -> expression COMMA expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 107 (expression -> expression COMMA expression .)
    OR_STR_OP       reduce using rule 107 (expression -> expression COMMA expression .)
    XOR_STR_OP      reduce using rule 107 (expression -> expression COMMA expression .)
    AND_STR_OP      reduce using rule 107 (expression -> expression COMMA expression .)
    NOT_STR_OP      reduce using rule 107 (expression -> expression COMMA expression .)
    COMMA           reduce using rule 107 (expression -> expression COMMA expression .)
    ASSOCIATE_OP    reduce using rule 107 (expression -> expression COMMA expression .)
    BLOCK_BEGIN     reduce using rule 107 (expression -> expression COMMA expression .)
    CLOSE_PARANTHESIS reduce using rule 107 (expression -> expression COMMA expression .)
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! COMPARE_OP      [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! BIT_OR          [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! BIT_XOR         [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! BIT_AND         [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! AND_OP          [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! OR_OP           [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! EQUALS_OP       [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! GREATER_OP      [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! LESS_OP         [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! PLUS_OP         [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! MINUS_OP        [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! DIVISION_OP     [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! MODULUS_OP      [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! EXPONENT_OP     [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! CONCATENATE     [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! REP_OP          [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! RANGE_OP        [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 107 (expression -> expression COMMA expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]


state 181

    (101) expression -> expression MODULUS_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    OR_STR_OP       reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    XOR_STR_OP      reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    AND_STR_OP      reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    NOT_STR_OP      reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    COMPARE_OP      reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    BIT_OR          reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    BIT_XOR         reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    BIT_AND         reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    AND_OP          reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    OR_OP           reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    EQUALS_OP       reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    GREATER_OP      reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    LESS_OP         reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    PLUS_OP         reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    MINUS_OP        reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    DIVISION_OP     reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    MODULUS_OP      reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    CONCATENATE     reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    REP_OP          reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    COMMA           reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    RANGE_OP        reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 101 (expression -> expression MODULUS_OP expression .)
    EXPONENT_OP     shift and go to state 114
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! EXPONENT_OP     [ reduce using rule 101 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 101 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 101 (expression -> expression MODULUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 182

    (94) expression -> expression GREATER_EQUAL_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    OR_STR_OP       reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_OR          reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_AND         reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_OP          reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    OR_OP           reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_OP         reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    COMMA           reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! PLUS_OP         [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 94 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 183

    (81) expression -> expression XOR_STR_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 81 (expression -> expression XOR_STR_OP expression .)
    OR_STR_OP       reduce using rule 81 (expression -> expression XOR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 81 (expression -> expression XOR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 81 (expression -> expression XOR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 81 (expression -> expression XOR_STR_OP expression .)
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! AND_STR_OP      [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 81 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]


state 184

    (87) expression -> expression BIT_AND expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 87 (expression -> expression BIT_AND expression .)
    OR_STR_OP       reduce using rule 87 (expression -> expression BIT_AND expression .)
    XOR_STR_OP      reduce using rule 87 (expression -> expression BIT_AND expression .)
    AND_STR_OP      reduce using rule 87 (expression -> expression BIT_AND expression .)
    NOT_STR_OP      reduce using rule 87 (expression -> expression BIT_AND expression .)
    BIT_OR          reduce using rule 87 (expression -> expression BIT_AND expression .)
    BIT_XOR         reduce using rule 87 (expression -> expression BIT_AND expression .)
    BIT_AND         reduce using rule 87 (expression -> expression BIT_AND expression .)
    AND_OP          reduce using rule 87 (expression -> expression BIT_AND expression .)
    OR_OP           reduce using rule 87 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 87 (expression -> expression BIT_AND expression .)
    ASSOCIATE_OP    reduce using rule 87 (expression -> expression BIT_AND expression .)
    RANGE_OP        reduce using rule 87 (expression -> expression BIT_AND expression .)
    BLOCK_BEGIN     reduce using rule 87 (expression -> expression BIT_AND expression .)
    CLOSE_PARANTHESIS reduce using rule 87 (expression -> expression BIT_AND expression .)
    COMPARE_OP      shift and go to state 112
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! COMPARE_OP      [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! EQUALS_OP       [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! GREATER_OP      [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! LESS_OP         [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! PLUS_OP         [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! MINUS_OP        [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! DIVISION_OP     [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! MODULUS_OP      [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! EXPONENT_OP     [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! CONCATENATE     [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! REP_OP          [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 87 (expression -> expression BIT_AND expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 185

    (99) expression -> expression MULTIPLICATION_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    OR_STR_OP       reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    XOR_STR_OP      reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    AND_STR_OP      reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_STR_OP      reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    COMPARE_OP      reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_OR          reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_XOR         reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_AND         reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    AND_OP          reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    OR_OP           reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    EQUALS_OP       reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_OP      reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_OP         reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    PLUS_OP         reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    MINUS_OP        reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    MULTIPLICATION_OP reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    DIVISION_OP     reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    MODULUS_OP      reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    CONCATENATE     reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    REP_OP          reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    COMMA           reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    ASSOCIATE_OP    reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    RANGE_OP        reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    BLOCK_BEGIN     reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .)
    EXPONENT_OP     shift and go to state 114
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! EXPONENT_OP     [ reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 99 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 186

    (108) expression -> expression ASSOCIATE_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    OR_STR_OP       reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    XOR_STR_OP      reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    AND_STR_OP      reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    NOT_STR_OP      reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    COMMA           reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    ASSOCIATE_OP    reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    BLOCK_BEGIN     reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .)
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! COMPARE_OP      [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! AND_OP          [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_OP           [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! REP_OP          [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 108 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]


state 187

    (80) expression -> expression OR_STR_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 80 (expression -> expression OR_STR_OP expression .)
    OR_STR_OP       reduce using rule 80 (expression -> expression OR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 80 (expression -> expression OR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 80 (expression -> expression OR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 80 (expression -> expression OR_STR_OP expression .)
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! AND_STR_OP      [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 80 (expression -> expression OR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]


state 188

    (88) expression -> expression AND_OP Marker . expression
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 216
    empty                          shift and go to state 55

state 176

    (91) expression -> expression LESS_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 91 (expression -> expression LESS_OP expression .)
    XOR_STR_OP      reduce using rule 91 (expression -> expression LESS_OP expression .)
    AND_STR_OP      reduce using rule 91 (expression -> expression LESS_OP expression .)
    NOT_STR_OP      reduce using rule 91 (expression -> expression LESS_OP expression .)
    COMPARE_OP      reduce using rule 91 (expression -> expression LESS_OP expression .)
    BIT_OR          reduce using rule 91 (expression -> expression LESS_OP expression .)
    BIT_XOR         reduce using rule 91 (expression -> expression LESS_OP expression .)
    BIT_AND         reduce using rule 91 (expression -> expression LESS_OP expression .)
    AND_OP          reduce using rule 91 (expression -> expression LESS_OP expression .)
    OR_OP           reduce using rule 91 (expression -> expression LESS_OP expression .)
    EQUALS_OP       reduce using rule 91 (expression -> expression LESS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 91 (expression -> expression LESS_OP expression .)
    GREATER_OP      reduce using rule 91 (expression -> expression LESS_OP expression .)
    LESS_OP         reduce using rule 91 (expression -> expression LESS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 91 (expression -> expression LESS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 91 (expression -> expression LESS_OP expression .)
    ASSOCIATE_OP    reduce using rule 91 (expression -> expression LESS_OP expression .)
    RANGE_OP        reduce using rule 91 (expression -> expression LESS_OP expression .)
    SEMICOLON       reduce using rule 91 (expression -> expression LESS_OP expression .)
    BLOCK_BEGIN     reduce using rule 91 (expression -> expression LESS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 91 (expression -> expression LESS_OP expression .)
    COMMA           reduce using rule 91 (expression -> expression LESS_OP expression .)
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! PLUS_OP         [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! REP_OP          [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 91 (expression -> expression LESS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 177

    (99) expression -> expression MODULUS_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    XOR_STR_OP      reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    AND_STR_OP      reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    NOT_STR_OP      reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    COMPARE_OP      reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    BIT_OR          reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    BIT_XOR         reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    BIT_AND         reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    AND_OP          reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    OR_OP           reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    EQUALS_OP       reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    GREATER_OP      reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    LESS_OP         reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    PLUS_OP         reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    MINUS_OP        reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    DIVISION_OP     reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    MODULUS_OP      reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    CONCATENATE     reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    REP_OP          reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    RANGE_OP        reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    SEMICOLON       reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    COMMA           reduce using rule 99 (expression -> expression MODULUS_OP expression .)
    EXPONENT_OP     shift and go to state 111
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! EXPONENT_OP     [ reduce using rule 99 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 99 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 99 (expression -> expression MODULUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 178

    (92) expression -> expression GREATER_EQUAL_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_OR          reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_AND         reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_OP          reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    OR_OP           reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_OP         reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    SEMICOLON       reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    COMMA           reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! PLUS_OP         [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 92 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 179

    (79) expression -> expression XOR_STR_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 79 (expression -> expression XOR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 79 (expression -> expression XOR_STR_OP expression .)
    SEMICOLON       reduce using rule 79 (expression -> expression XOR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 79 (expression -> expression XOR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 79 (expression -> expression XOR_STR_OP expression .)
    COMMA           reduce using rule 79 (expression -> expression XOR_STR_OP expression .)
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! AND_STR_OP      [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 79 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]


state 180

    (85) expression -> expression BIT_AND expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 85 (expression -> expression BIT_AND expression .)
    XOR_STR_OP      reduce using rule 85 (expression -> expression BIT_AND expression .)
    AND_STR_OP      reduce using rule 85 (expression -> expression BIT_AND expression .)
    NOT_STR_OP      reduce using rule 85 (expression -> expression BIT_AND expression .)
    BIT_OR          reduce using rule 85 (expression -> expression BIT_AND expression .)
    BIT_XOR         reduce using rule 85 (expression -> expression BIT_AND expression .)
    BIT_AND         reduce using rule 85 (expression -> expression BIT_AND expression .)
    AND_OP          reduce using rule 85 (expression -> expression BIT_AND expression .)
    OR_OP           reduce using rule 85 (expression -> expression BIT_AND expression .)
    ASSOCIATE_OP    reduce using rule 85 (expression -> expression BIT_AND expression .)
    RANGE_OP        reduce using rule 85 (expression -> expression BIT_AND expression .)
    SEMICOLON       reduce using rule 85 (expression -> expression BIT_AND expression .)
    BLOCK_BEGIN     reduce using rule 85 (expression -> expression BIT_AND expression .)
    CLOSE_PARANTHESIS reduce using rule 85 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 85 (expression -> expression BIT_AND expression .)
    COMPARE_OP      shift and go to state 109
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! COMPARE_OP      [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! EQUALS_OP       [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! GREATER_OP      [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! LESS_OP         [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! PLUS_OP         [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! MINUS_OP        [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! DIVISION_OP     [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! MODULUS_OP      [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! EXPONENT_OP     [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! CONCATENATE     [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! REP_OP          [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 85 (expression -> expression BIT_AND expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 181

    (97) expression -> expression MULTIPLICATION_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    XOR_STR_OP      reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    AND_STR_OP      reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_STR_OP      reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    COMPARE_OP      reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_OR          reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_XOR         reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_AND         reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    AND_OP          reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    OR_OP           reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    EQUALS_OP       reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_OP      reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_OP         reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    PLUS_OP         reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    MINUS_OP        reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    MULTIPLICATION_OP reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    DIVISION_OP     reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    MODULUS_OP      reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    CONCATENATE     reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    REP_OP          reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    ASSOCIATE_OP    reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    RANGE_OP        reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    SEMICOLON       reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    BLOCK_BEGIN     reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    COMMA           reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .)
    EXPONENT_OP     shift and go to state 111
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! EXPONENT_OP     [ reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 97 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 182

    (105) expression -> expression ASSOCIATE_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    XOR_STR_OP      reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    AND_STR_OP      reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    NOT_STR_OP      reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    ASSOCIATE_OP    reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    SEMICOLON       reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    BLOCK_BEGIN     reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    COMMA           reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .)
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! COMPARE_OP      [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! AND_OP          [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_OP           [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! REP_OP          [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 105 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]


state 183

    (78) expression -> expression OR_STR_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 78 (expression -> expression OR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 78 (expression -> expression OR_STR_OP expression .)
    SEMICOLON       reduce using rule 78 (expression -> expression OR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 78 (expression -> expression OR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 78 (expression -> expression OR_STR_OP expression .)
    COMMA           reduce using rule 78 (expression -> expression OR_STR_OP expression .)
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! AND_STR_OP      [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 78 (expression -> expression OR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]


state 184

    (86) expression -> expression AND_OP Marker . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 221
    empty                          shift and go to state 58

state 189

    (104) expression -> expression BIT_LEFT_SHIFT expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    OR_STR_OP       reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_STR_OP      reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMPARE_OP      reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_OR          reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_XOR         reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_AND         reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_OP          reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    OR_OP           reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    EQUALS_OP       reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_OP      reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_OP         reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMMA           reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    RANGE_OP        reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .)
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! PLUS_OP         [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 104 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 190

    (106) expression -> expression REP_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 106 (expression -> expression REP_OP expression .)
    OR_STR_OP       reduce using rule 106 (expression -> expression REP_OP expression .)
    XOR_STR_OP      reduce using rule 106 (expression -> expression REP_OP expression .)
    AND_STR_OP      reduce using rule 106 (expression -> expression REP_OP expression .)
    NOT_STR_OP      reduce using rule 106 (expression -> expression REP_OP expression .)
    COMPARE_OP      reduce using rule 106 (expression -> expression REP_OP expression .)
    BIT_OR          reduce using rule 106 (expression -> expression REP_OP expression .)
    BIT_XOR         reduce using rule 106 (expression -> expression REP_OP expression .)
    BIT_AND         reduce using rule 106 (expression -> expression REP_OP expression .)
    AND_OP          reduce using rule 106 (expression -> expression REP_OP expression .)
    OR_OP           reduce using rule 106 (expression -> expression REP_OP expression .)
    EQUALS_OP       reduce using rule 106 (expression -> expression REP_OP expression .)
    NOT_EQUALS_OP   reduce using rule 106 (expression -> expression REP_OP expression .)
    GREATER_OP      reduce using rule 106 (expression -> expression REP_OP expression .)
    LESS_OP         reduce using rule 106 (expression -> expression REP_OP expression .)
    GREATER_EQUAL_OP reduce using rule 106 (expression -> expression REP_OP expression .)
    LESS_EQUAL_OP   reduce using rule 106 (expression -> expression REP_OP expression .)
    PLUS_OP         reduce using rule 106 (expression -> expression REP_OP expression .)
    MINUS_OP        reduce using rule 106 (expression -> expression REP_OP expression .)
    MULTIPLICATION_OP reduce using rule 106 (expression -> expression REP_OP expression .)
    DIVISION_OP     reduce using rule 106 (expression -> expression REP_OP expression .)
    MODULUS_OP      reduce using rule 106 (expression -> expression REP_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 106 (expression -> expression REP_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 106 (expression -> expression REP_OP expression .)
    CONCATENATE     reduce using rule 106 (expression -> expression REP_OP expression .)
    REP_OP          reduce using rule 106 (expression -> expression REP_OP expression .)
    COMMA           reduce using rule 106 (expression -> expression REP_OP expression .)
    ASSOCIATE_OP    reduce using rule 106 (expression -> expression REP_OP expression .)
    RANGE_OP        reduce using rule 106 (expression -> expression REP_OP expression .)
    BLOCK_BEGIN     reduce using rule 106 (expression -> expression REP_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 106 (expression -> expression REP_OP expression .)
    EXPONENT_OP     shift and go to state 114
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! EXPONENT_OP     [ reduce using rule 106 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 106 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 106 (expression -> expression REP_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 191

    (105) expression -> expression CONCATENATE expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 105 (expression -> expression CONCATENATE expression .)
    OR_STR_OP       reduce using rule 105 (expression -> expression CONCATENATE expression .)
    XOR_STR_OP      reduce using rule 105 (expression -> expression CONCATENATE expression .)
    AND_STR_OP      reduce using rule 105 (expression -> expression CONCATENATE expression .)
    NOT_STR_OP      reduce using rule 105 (expression -> expression CONCATENATE expression .)
    COMPARE_OP      reduce using rule 105 (expression -> expression CONCATENATE expression .)
    BIT_OR          reduce using rule 105 (expression -> expression CONCATENATE expression .)
    BIT_XOR         reduce using rule 105 (expression -> expression CONCATENATE expression .)
    BIT_AND         reduce using rule 105 (expression -> expression CONCATENATE expression .)
    AND_OP          reduce using rule 105 (expression -> expression CONCATENATE expression .)
    OR_OP           reduce using rule 105 (expression -> expression CONCATENATE expression .)
    EQUALS_OP       reduce using rule 105 (expression -> expression CONCATENATE expression .)
    NOT_EQUALS_OP   reduce using rule 105 (expression -> expression CONCATENATE expression .)
    GREATER_OP      reduce using rule 105 (expression -> expression CONCATENATE expression .)
    LESS_OP         reduce using rule 105 (expression -> expression CONCATENATE expression .)
    GREATER_EQUAL_OP reduce using rule 105 (expression -> expression CONCATENATE expression .)
    LESS_EQUAL_OP   reduce using rule 105 (expression -> expression CONCATENATE expression .)
    PLUS_OP         reduce using rule 105 (expression -> expression CONCATENATE expression .)
    MINUS_OP        reduce using rule 105 (expression -> expression CONCATENATE expression .)
    BIT_RIGHT_SHIFT reduce using rule 105 (expression -> expression CONCATENATE expression .)
    BIT_LEFT_SHIFT  reduce using rule 105 (expression -> expression CONCATENATE expression .)
    CONCATENATE     reduce using rule 105 (expression -> expression CONCATENATE expression .)
    COMMA           reduce using rule 105 (expression -> expression CONCATENATE expression .)
    ASSOCIATE_OP    reduce using rule 105 (expression -> expression CONCATENATE expression .)
    RANGE_OP        reduce using rule 105 (expression -> expression CONCATENATE expression .)
    BLOCK_BEGIN     reduce using rule 105 (expression -> expression CONCATENATE expression .)
    CLOSE_PARANTHESIS reduce using rule 105 (expression -> expression CONCATENATE expression .)
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! MULTIPLICATION_OP [ reduce using rule 105 (expression -> expression CONCATENATE expression .) ]
  ! DIVISION_OP     [ reduce using rule 105 (expression -> expression CONCATENATE expression .) ]
  ! MODULUS_OP      [ reduce using rule 105 (expression -> expression CONCATENATE expression .) ]
  ! EXPONENT_OP     [ reduce using rule 105 (expression -> expression CONCATENATE expression .) ]
  ! REP_OP          [ reduce using rule 105 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 105 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 105 (expression -> expression CONCATENATE expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 192

    (103) expression -> expression BIT_RIGHT_SHIFT expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    OR_STR_OP       reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_STR_OP      reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMPARE_OP      reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_OR          reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_XOR         reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_AND         reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_OP          reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    OR_OP           reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    EQUALS_OP       reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_OP      reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_OP         reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMMA           reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    RANGE_OP        reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .)
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! PLUS_OP         [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 103 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 193

    (85) expression -> expression BIT_OR expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 85 (expression -> expression BIT_OR expression .)
    OR_STR_OP       reduce using rule 85 (expression -> expression BIT_OR expression .)
    XOR_STR_OP      reduce using rule 85 (expression -> expression BIT_OR expression .)
    AND_STR_OP      reduce using rule 85 (expression -> expression BIT_OR expression .)
    NOT_STR_OP      reduce using rule 85 (expression -> expression BIT_OR expression .)
    BIT_OR          reduce using rule 85 (expression -> expression BIT_OR expression .)
    BIT_XOR         reduce using rule 85 (expression -> expression BIT_OR expression .)
    AND_OP          reduce using rule 85 (expression -> expression BIT_OR expression .)
    OR_OP           reduce using rule 85 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 85 (expression -> expression BIT_OR expression .)
    ASSOCIATE_OP    reduce using rule 85 (expression -> expression BIT_OR expression .)
    RANGE_OP        reduce using rule 85 (expression -> expression BIT_OR expression .)
    BLOCK_BEGIN     reduce using rule 85 (expression -> expression BIT_OR expression .)
    CLOSE_PARANTHESIS reduce using rule 85 (expression -> expression BIT_OR expression .)
    COMPARE_OP      shift and go to state 112
    BIT_AND         shift and go to state 128
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! COMPARE_OP      [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! EQUALS_OP       [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! GREATER_OP      [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! LESS_OP         [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! PLUS_OP         [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! MINUS_OP        [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! DIVISION_OP     [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! MODULUS_OP      [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! CONCATENATE     [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! REP_OP          [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 85 (expression -> expression BIT_OR expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 194

    (97) expression -> expression PLUS_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 97 (expression -> expression PLUS_OP expression .)
    OR_STR_OP       reduce using rule 97 (expression -> expression PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 97 (expression -> expression PLUS_OP expression .)
    AND_STR_OP      reduce using rule 97 (expression -> expression PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 97 (expression -> expression PLUS_OP expression .)
    COMPARE_OP      reduce using rule 97 (expression -> expression PLUS_OP expression .)
    BIT_OR          reduce using rule 97 (expression -> expression PLUS_OP expression .)
    BIT_XOR         reduce using rule 97 (expression -> expression PLUS_OP expression .)
    BIT_AND         reduce using rule 97 (expression -> expression PLUS_OP expression .)
    AND_OP          reduce using rule 97 (expression -> expression PLUS_OP expression .)
    OR_OP           reduce using rule 97 (expression -> expression PLUS_OP expression .)
    EQUALS_OP       reduce using rule 97 (expression -> expression PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 97 (expression -> expression PLUS_OP expression .)
    GREATER_OP      reduce using rule 97 (expression -> expression PLUS_OP expression .)
    LESS_OP         reduce using rule 97 (expression -> expression PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 97 (expression -> expression PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 97 (expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 97 (expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 97 (expression -> expression PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 97 (expression -> expression PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 97 (expression -> expression PLUS_OP expression .)
    CONCATENATE     reduce using rule 97 (expression -> expression PLUS_OP expression .)
    COMMA           reduce using rule 97 (expression -> expression PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 97 (expression -> expression PLUS_OP expression .)
    RANGE_OP        reduce using rule 97 (expression -> expression PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 97 (expression -> expression PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 97 (expression -> expression PLUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! MULTIPLICATION_OP [ reduce using rule 97 (expression -> expression PLUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 97 (expression -> expression PLUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 97 (expression -> expression PLUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 97 (expression -> expression PLUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 97 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 97 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 97 (expression -> expression PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 195

    (111) expression -> expression SEARCH_MODIFY_NEG expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    OR_STR_OP       reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    XOR_STR_OP      reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_STR_OP      reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_STR_OP      reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMPARE_OP      reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_OR          reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_XOR         reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_AND         reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_OP          reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    OR_OP           reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EQUALS_OP       reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_EQUALS_OP   reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_OP      reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_OP         reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_EQUAL_OP reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_EQUAL_OP   reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    PLUS_OP         reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MINUS_OP        reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MULTIPLICATION_OP reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    DIVISION_OP     reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MODULUS_OP      reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_RIGHT_SHIFT reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_LEFT_SHIFT  reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CONCATENATE     reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    REP_OP          reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMMA           reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    ASSOCIATE_OP    reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    RANGE_OP        reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY   reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY_NEG reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BLOCK_BEGIN     reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CLOSE_PARANTHESIS reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EXPONENT_OP     shift and go to state 114

  ! EXPONENT_OP     [ reduce using rule 111 (expression -> expression SEARCH_MODIFY_NEG expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! PLUS_OP         [ shift and go to state 138 ]
  ! MINUS_OP        [ shift and go to state 111 ]
  ! MULTIPLICATION_OP [ shift and go to state 129 ]
  ! DIVISION_OP     [ shift and go to state 116 ]
  ! MODULUS_OP      [ shift and go to state 125 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 136 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 133 ]
  ! CONCATENATE     [ shift and go to state 135 ]
  ! REP_OP          [ shift and go to state 134 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
  ! SEARCH_MODIFY   [ shift and go to state 109 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 139 ]


state 196

    (92) expression -> expression GREATER_OP expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 92 (expression -> expression GREATER_OP expression .)
    OR_STR_OP       reduce using rule 92 (expression -> expression GREATER_OP expression .)
    XOR_STR_OP      reduce using rule 92 (expression -> expression GREATER_OP expression .)
    AND_STR_OP      reduce using rule 92 (expression -> expression GREATER_OP expression .)
    NOT_STR_OP      reduce using rule 92 (expression -> expression GREATER_OP expression .)
    COMPARE_OP      reduce using rule 92 (expression -> expression GREATER_OP expression .)
    BIT_OR          reduce using rule 92 (expression -> expression GREATER_OP expression .)
    BIT_XOR         reduce using rule 92 (expression -> expression GREATER_OP expression .)
    BIT_AND         reduce using rule 92 (expression -> expression GREATER_OP expression .)
    AND_OP          reduce using rule 92 (expression -> expression GREATER_OP expression .)
    OR_OP           reduce using rule 92 (expression -> expression GREATER_OP expression .)
    EQUALS_OP       reduce using rule 92 (expression -> expression GREATER_OP expression .)
    NOT_EQUALS_OP   reduce using rule 92 (expression -> expression GREATER_OP expression .)
    GREATER_OP      reduce using rule 92 (expression -> expression GREATER_OP expression .)
    LESS_OP         reduce using rule 92 (expression -> expression GREATER_OP expression .)
    GREATER_EQUAL_OP reduce using rule 92 (expression -> expression GREATER_OP expression .)
    LESS_EQUAL_OP   reduce using rule 92 (expression -> expression GREATER_OP expression .)
    COMMA           reduce using rule 92 (expression -> expression GREATER_OP expression .)
    ASSOCIATE_OP    reduce using rule 92 (expression -> expression GREATER_OP expression .)
    RANGE_OP        reduce using rule 92 (expression -> expression GREATER_OP expression .)
    BLOCK_BEGIN     reduce using rule 92 (expression -> expression GREATER_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 92 (expression -> expression GREATER_OP expression .)
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! PLUS_OP         [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! REP_OP          [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 92 (expression -> expression GREATER_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! COMPARE_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 137 ]
  ! BIT_XOR         [ shift and go to state 118 ]
  ! BIT_AND         [ shift and go to state 128 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! EQUALS_OP       [ shift and go to state 119 ]
  ! NOT_EQUALS_OP   [ shift and go to state 113 ]
  ! GREATER_OP      [ shift and go to state 140 ]
  ! LESS_OP         [ shift and go to state 123 ]
  ! GREATER_EQUAL_OP [ shift and go to state 126 ]
  ! LESS_EQUAL_OP   [ shift and go to state 110 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]


state 197

    (73) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

    OR_STR_OP       reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEMICOLON       reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 73 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)


state 198

    (36) functionStatement -> SUB IDENTIFIER Markerscope block .

    VARIABLE        reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LOCAL           reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PRIVATE         reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    RETURN          reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    IDENTIFIER      reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    WHILE           reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    FOR             reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PRINT           reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SUB             reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LAST            reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    NEXT            reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    IF              reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    USE             reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    UNTIL           reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    DO              reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SWITCH          reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BLOCK_ENDS      reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    $end            reduce using rule 36 (functionStatement -> SUB IDENTIFIER Markerscope block .)


state 199

    (26) caselist -> CASE . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist

    OPEN_PARANTHESIS shift and go to state 222
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 217
    empty                          shift and go to state 55

state 185

    (102) expression -> expression BIT_LEFT_SHIFT expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_STR_OP      reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMPARE_OP      reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_OR          reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_XOR         reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_AND         reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_OP          reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    OR_OP           reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    EQUALS_OP       reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_OP      reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_OP         reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    RANGE_OP        reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    SEMICOLON       reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMMA           reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .)
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! PLUS_OP         [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 102 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 186

    (104) expression -> expression REP_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 104 (expression -> expression REP_OP expression .)
    XOR_STR_OP      reduce using rule 104 (expression -> expression REP_OP expression .)
    AND_STR_OP      reduce using rule 104 (expression -> expression REP_OP expression .)
    NOT_STR_OP      reduce using rule 104 (expression -> expression REP_OP expression .)
    COMPARE_OP      reduce using rule 104 (expression -> expression REP_OP expression .)
    BIT_OR          reduce using rule 104 (expression -> expression REP_OP expression .)
    BIT_XOR         reduce using rule 104 (expression -> expression REP_OP expression .)
    BIT_AND         reduce using rule 104 (expression -> expression REP_OP expression .)
    AND_OP          reduce using rule 104 (expression -> expression REP_OP expression .)
    OR_OP           reduce using rule 104 (expression -> expression REP_OP expression .)
    EQUALS_OP       reduce using rule 104 (expression -> expression REP_OP expression .)
    NOT_EQUALS_OP   reduce using rule 104 (expression -> expression REP_OP expression .)
    GREATER_OP      reduce using rule 104 (expression -> expression REP_OP expression .)
    LESS_OP         reduce using rule 104 (expression -> expression REP_OP expression .)
    GREATER_EQUAL_OP reduce using rule 104 (expression -> expression REP_OP expression .)
    LESS_EQUAL_OP   reduce using rule 104 (expression -> expression REP_OP expression .)
    PLUS_OP         reduce using rule 104 (expression -> expression REP_OP expression .)
    MINUS_OP        reduce using rule 104 (expression -> expression REP_OP expression .)
    MULTIPLICATION_OP reduce using rule 104 (expression -> expression REP_OP expression .)
    DIVISION_OP     reduce using rule 104 (expression -> expression REP_OP expression .)
    MODULUS_OP      reduce using rule 104 (expression -> expression REP_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 104 (expression -> expression REP_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 104 (expression -> expression REP_OP expression .)
    CONCATENATE     reduce using rule 104 (expression -> expression REP_OP expression .)
    REP_OP          reduce using rule 104 (expression -> expression REP_OP expression .)
    ASSOCIATE_OP    reduce using rule 104 (expression -> expression REP_OP expression .)
    RANGE_OP        reduce using rule 104 (expression -> expression REP_OP expression .)
    SEMICOLON       reduce using rule 104 (expression -> expression REP_OP expression .)
    BLOCK_BEGIN     reduce using rule 104 (expression -> expression REP_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 104 (expression -> expression REP_OP expression .)
    COMMA           reduce using rule 104 (expression -> expression REP_OP expression .)
    EXPONENT_OP     shift and go to state 111
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! EXPONENT_OP     [ reduce using rule 104 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 104 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 104 (expression -> expression REP_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 187

    (103) expression -> expression CONCATENATE expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 103 (expression -> expression CONCATENATE expression .)
    XOR_STR_OP      reduce using rule 103 (expression -> expression CONCATENATE expression .)
    AND_STR_OP      reduce using rule 103 (expression -> expression CONCATENATE expression .)
    NOT_STR_OP      reduce using rule 103 (expression -> expression CONCATENATE expression .)
    COMPARE_OP      reduce using rule 103 (expression -> expression CONCATENATE expression .)
    BIT_OR          reduce using rule 103 (expression -> expression CONCATENATE expression .)
    BIT_XOR         reduce using rule 103 (expression -> expression CONCATENATE expression .)
    BIT_AND         reduce using rule 103 (expression -> expression CONCATENATE expression .)
    AND_OP          reduce using rule 103 (expression -> expression CONCATENATE expression .)
    OR_OP           reduce using rule 103 (expression -> expression CONCATENATE expression .)
    EQUALS_OP       reduce using rule 103 (expression -> expression CONCATENATE expression .)
    NOT_EQUALS_OP   reduce using rule 103 (expression -> expression CONCATENATE expression .)
    GREATER_OP      reduce using rule 103 (expression -> expression CONCATENATE expression .)
    LESS_OP         reduce using rule 103 (expression -> expression CONCATENATE expression .)
    GREATER_EQUAL_OP reduce using rule 103 (expression -> expression CONCATENATE expression .)
    LESS_EQUAL_OP   reduce using rule 103 (expression -> expression CONCATENATE expression .)
    PLUS_OP         reduce using rule 103 (expression -> expression CONCATENATE expression .)
    MINUS_OP        reduce using rule 103 (expression -> expression CONCATENATE expression .)
    BIT_RIGHT_SHIFT reduce using rule 103 (expression -> expression CONCATENATE expression .)
    BIT_LEFT_SHIFT  reduce using rule 103 (expression -> expression CONCATENATE expression .)
    CONCATENATE     reduce using rule 103 (expression -> expression CONCATENATE expression .)
    ASSOCIATE_OP    reduce using rule 103 (expression -> expression CONCATENATE expression .)
    RANGE_OP        reduce using rule 103 (expression -> expression CONCATENATE expression .)
    SEMICOLON       reduce using rule 103 (expression -> expression CONCATENATE expression .)
    BLOCK_BEGIN     reduce using rule 103 (expression -> expression CONCATENATE expression .)
    CLOSE_PARANTHESIS reduce using rule 103 (expression -> expression CONCATENATE expression .)
    COMMA           reduce using rule 103 (expression -> expression CONCATENATE expression .)
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! MULTIPLICATION_OP [ reduce using rule 103 (expression -> expression CONCATENATE expression .) ]
  ! DIVISION_OP     [ reduce using rule 103 (expression -> expression CONCATENATE expression .) ]
  ! MODULUS_OP      [ reduce using rule 103 (expression -> expression CONCATENATE expression .) ]
  ! EXPONENT_OP     [ reduce using rule 103 (expression -> expression CONCATENATE expression .) ]
  ! REP_OP          [ reduce using rule 103 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 103 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 103 (expression -> expression CONCATENATE expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 188

    (101) expression -> expression BIT_RIGHT_SHIFT expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_STR_OP      reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMPARE_OP      reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_OR          reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_XOR         reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_AND         reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_OP          reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    OR_OP           reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    EQUALS_OP       reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_OP      reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_OP         reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    RANGE_OP        reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    SEMICOLON       reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMMA           reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .)
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! PLUS_OP         [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 101 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 189

    (83) expression -> expression BIT_OR expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 83 (expression -> expression BIT_OR expression .)
    XOR_STR_OP      reduce using rule 83 (expression -> expression BIT_OR expression .)
    AND_STR_OP      reduce using rule 83 (expression -> expression BIT_OR expression .)
    NOT_STR_OP      reduce using rule 83 (expression -> expression BIT_OR expression .)
    BIT_OR          reduce using rule 83 (expression -> expression BIT_OR expression .)
    BIT_XOR         reduce using rule 83 (expression -> expression BIT_OR expression .)
    AND_OP          reduce using rule 83 (expression -> expression BIT_OR expression .)
    OR_OP           reduce using rule 83 (expression -> expression BIT_OR expression .)
    ASSOCIATE_OP    reduce using rule 83 (expression -> expression BIT_OR expression .)
    RANGE_OP        reduce using rule 83 (expression -> expression BIT_OR expression .)
    SEMICOLON       reduce using rule 83 (expression -> expression BIT_OR expression .)
    BLOCK_BEGIN     reduce using rule 83 (expression -> expression BIT_OR expression .)
    CLOSE_PARANTHESIS reduce using rule 83 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 83 (expression -> expression BIT_OR expression .)
    COMPARE_OP      shift and go to state 109
    BIT_AND         shift and go to state 124
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! COMPARE_OP      [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! EQUALS_OP       [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! GREATER_OP      [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! LESS_OP         [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! PLUS_OP         [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! MINUS_OP        [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! DIVISION_OP     [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! MODULUS_OP      [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! CONCATENATE     [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! REP_OP          [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 83 (expression -> expression BIT_OR expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 190

    (95) expression -> expression PLUS_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 95 (expression -> expression PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 95 (expression -> expression PLUS_OP expression .)
    AND_STR_OP      reduce using rule 95 (expression -> expression PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 95 (expression -> expression PLUS_OP expression .)
    COMPARE_OP      reduce using rule 95 (expression -> expression PLUS_OP expression .)
    BIT_OR          reduce using rule 95 (expression -> expression PLUS_OP expression .)
    BIT_XOR         reduce using rule 95 (expression -> expression PLUS_OP expression .)
    BIT_AND         reduce using rule 95 (expression -> expression PLUS_OP expression .)
    AND_OP          reduce using rule 95 (expression -> expression PLUS_OP expression .)
    OR_OP           reduce using rule 95 (expression -> expression PLUS_OP expression .)
    EQUALS_OP       reduce using rule 95 (expression -> expression PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 95 (expression -> expression PLUS_OP expression .)
    GREATER_OP      reduce using rule 95 (expression -> expression PLUS_OP expression .)
    LESS_OP         reduce using rule 95 (expression -> expression PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 95 (expression -> expression PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 95 (expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 95 (expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 95 (expression -> expression PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 95 (expression -> expression PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 95 (expression -> expression PLUS_OP expression .)
    CONCATENATE     reduce using rule 95 (expression -> expression PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 95 (expression -> expression PLUS_OP expression .)
    RANGE_OP        reduce using rule 95 (expression -> expression PLUS_OP expression .)
    SEMICOLON       reduce using rule 95 (expression -> expression PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 95 (expression -> expression PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 95 (expression -> expression PLUS_OP expression .)
    COMMA           reduce using rule 95 (expression -> expression PLUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! MULTIPLICATION_OP [ reduce using rule 95 (expression -> expression PLUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 95 (expression -> expression PLUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 95 (expression -> expression PLUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 95 (expression -> expression PLUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 95 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 95 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 95 (expression -> expression PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 191

    (108) expression -> expression SEARCH_MODIFY_NEG expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    XOR_STR_OP      reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_STR_OP      reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_STR_OP      reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMPARE_OP      reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_OR          reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_XOR         reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_AND         reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_OP          reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    OR_OP           reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EQUALS_OP       reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_EQUALS_OP   reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_OP      reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_OP         reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_EQUAL_OP reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_EQUAL_OP   reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    PLUS_OP         reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MINUS_OP        reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MULTIPLICATION_OP reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    DIVISION_OP     reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MODULUS_OP      reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_RIGHT_SHIFT reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_LEFT_SHIFT  reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CONCATENATE     reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    REP_OP          reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    ASSOCIATE_OP    reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    RANGE_OP        reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY   reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY_NEG reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEMICOLON       reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BLOCK_BEGIN     reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CLOSE_PARANTHESIS reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMMA           reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EXPONENT_OP     shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 108 (expression -> expression SEARCH_MODIFY_NEG expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! PLUS_OP         [ shift and go to state 134 ]
  ! MINUS_OP        [ shift and go to state 108 ]
  ! MULTIPLICATION_OP [ shift and go to state 125 ]
  ! DIVISION_OP     [ shift and go to state 113 ]
  ! MODULUS_OP      [ shift and go to state 121 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 132 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 129 ]
  ! CONCATENATE     [ shift and go to state 131 ]
  ! REP_OP          [ shift and go to state 130 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
  ! SEARCH_MODIFY   [ shift and go to state 106 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 135 ]


state 192

    (90) expression -> expression GREATER_OP expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 90 (expression -> expression GREATER_OP expression .)
    XOR_STR_OP      reduce using rule 90 (expression -> expression GREATER_OP expression .)
    AND_STR_OP      reduce using rule 90 (expression -> expression GREATER_OP expression .)
    NOT_STR_OP      reduce using rule 90 (expression -> expression GREATER_OP expression .)
    COMPARE_OP      reduce using rule 90 (expression -> expression GREATER_OP expression .)
    BIT_OR          reduce using rule 90 (expression -> expression GREATER_OP expression .)
    BIT_XOR         reduce using rule 90 (expression -> expression GREATER_OP expression .)
    BIT_AND         reduce using rule 90 (expression -> expression GREATER_OP expression .)
    AND_OP          reduce using rule 90 (expression -> expression GREATER_OP expression .)
    OR_OP           reduce using rule 90 (expression -> expression GREATER_OP expression .)
    EQUALS_OP       reduce using rule 90 (expression -> expression GREATER_OP expression .)
    NOT_EQUALS_OP   reduce using rule 90 (expression -> expression GREATER_OP expression .)
    GREATER_OP      reduce using rule 90 (expression -> expression GREATER_OP expression .)
    LESS_OP         reduce using rule 90 (expression -> expression GREATER_OP expression .)
    GREATER_EQUAL_OP reduce using rule 90 (expression -> expression GREATER_OP expression .)
    LESS_EQUAL_OP   reduce using rule 90 (expression -> expression GREATER_OP expression .)
    ASSOCIATE_OP    reduce using rule 90 (expression -> expression GREATER_OP expression .)
    RANGE_OP        reduce using rule 90 (expression -> expression GREATER_OP expression .)
    SEMICOLON       reduce using rule 90 (expression -> expression GREATER_OP expression .)
    BLOCK_BEGIN     reduce using rule 90 (expression -> expression GREATER_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 90 (expression -> expression GREATER_OP expression .)
    COMMA           reduce using rule 90 (expression -> expression GREATER_OP expression .)
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! PLUS_OP         [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! REP_OP          [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 90 (expression -> expression GREATER_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! COMPARE_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 133 ]
  ! BIT_XOR         [ shift and go to state 115 ]
  ! BIT_AND         [ shift and go to state 124 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! EQUALS_OP       [ shift and go to state 116 ]
  ! NOT_EQUALS_OP   [ shift and go to state 110 ]
  ! GREATER_OP      [ shift and go to state 136 ]
  ! LESS_OP         [ shift and go to state 120 ]
  ! GREATER_EQUAL_OP [ shift and go to state 122 ]
  ! LESS_EQUAL_OP   [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]


state 193

    (67) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

    OR_STR_OP       reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEMICOLON       reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 67 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)


state 194

    (33) functionStatement -> SUB IDENTIFIER Markerscope block .

    VARIABLE        reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    ARRAY           reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LOCAL           reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PRIVATE         reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    RETURN          reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    IDENTIFIER      reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    WHILE           reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    FOR             reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PRINT           reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SUB             reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LAST            reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    NEXT            reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    IF              reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    USE             reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SWITCH          reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    $end            reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BLOCK_ENDS      reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)


state 195

    (45) declaration -> PRIVATE VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IF              reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    USE             reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    $end            reduce using rule 45 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)

>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 196

<<<<<<< HEAD
state 200

    (25) switchStatement -> SWITCH expression BLOCK_BEGIN caselist . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 223
=======
    (42) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 218
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 197
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker . expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker . expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56

<<<<<<< HEAD
state 201

    (27) caselist -> ELSE . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 224

state 202

    (28) caselist -> empty .

    BLOCK_ENDS      reduce using rule 28 (caselist -> empty .)
=======
  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 219
    empty                          shift and go to state 55

state 198

    (41) assignment -> LOCAL VARIABLE . ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP   shift and go to state 155


state 199
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (42) assignment -> PRIVATE VARIABLE . ASSIGNMENT_OP expression SEMICOLON

<<<<<<< HEAD
state 203

    (58) declaration -> PRIVATE VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IF              reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    USE             reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    UNTIL           reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    DO              reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    $end            reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 58 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
=======
    ASSIGNMENT_OP   shift and go to state 142

>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 200

<<<<<<< HEAD
state 204

    (44) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 225
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139
=======
    (43) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 43 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)

>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 201

    (47) decList -> COMMA VARIABLE decList .

    SEMICOLON       reduce using rule 47 (decList -> COMMA VARIABLE decList .)


state 202

    (39) assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 39 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)

<<<<<<< HEAD
state 205

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker . expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker . expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======

state 203

    (46) declaration -> LOCAL VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IF              reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    USE             reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    $end            reduce using rule 46 (declaration -> LOCAL VARIABLE decList SEMICOLON .)


state 204

    (41) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 220
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 205

    (27) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif Marker block
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif Marker block ELSE Markerelse block
    (29) Markerif -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerif                       shift and go to state 222
    empty                          shift and go to state 221

state 206

    (24) caselist -> CASE . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist

    OPEN_PARANTHESIS shift and go to state 223


state 207

    (23) switchStatement -> SWITCH expression BLOCK_BEGIN caselist . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 224


state 208

    (25) caselist -> ELSE . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 225

state 209

    (26) caselist -> empty .

    BLOCK_ENDS      reduce using rule 26 (caselist -> empty .)


state 210

    (40) assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP . expression SEMICOLON
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 226
    empty                          shift and go to state 58

state 206

    (43) assignment -> LOCAL VARIABLE . ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP   shift and go to state 160


state 207

    (42) assignment -> VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
    SEMICOLON       reduce using rule 6 (empty -> .)
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 226
    empty                          shift and go to state 55

state 211

    (70) arrayList -> COMMA . expression arrayList
    (71) arrayList -> COMMA . expression
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    COMMA           reduce using rule 6 (empty -> .)
=======
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 158
    empty                          shift and go to state 58

state 208

    (44) assignment -> PRIVATE VARIABLE . ASSIGNMENT_OP expression SEMICOLON
=======
    COMMA           reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 227
    empty                          shift and go to state 55

<<<<<<< HEAD
state 209

    (45) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    COMMA           reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    UNTIL           reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    DO              reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 45 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)

=======
state 212

    (69) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList . CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS shift and go to state 228
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 210

<<<<<<< HEAD
    (60) decList -> COMMA VARIABLE decList .

    SEMICOLON       reduce using rule 60 (decList -> COMMA VARIABLE decList .)
=======
state 213

    (50) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerwhile block
    (51) Markerwhile -> . empty
    (6) empty -> .
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

<<<<<<< HEAD
state 211

    (29) inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .

    VARIABLE        reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    LOCAL           reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    PRIVATE         reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    RETURN          reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    IDENTIFIER      reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    WHILE           reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    FOR             reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    PRINT           reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    SUB             reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    LAST            reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    NEXT            reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    IF              reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    USE             reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    UNTIL           reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    DO              reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    SWITCH          reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    $end            reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    BLOCK_ENDS      reduce using rule 29 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)

=======
    empty                          shift and go to state 230
    Markerwhile                    shift and go to state 229

state 214

    (36) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .

    VARIABLE        reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    ARRAY           reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 36 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 212

<<<<<<< HEAD
    (42) assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMMA           reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    UNTIL           reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DO              reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 42 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)

=======
state 215

    (68) term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .

    OR_STR_OP       reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    XOR_STR_OP      reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_STR_OP      reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_STR_OP      reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMPARE_OP      reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_OR          reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_AND         reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_OP          reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    OR_OP           reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EQUALS_OP       reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_EQUALS_OP   reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_OP      reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_OP         reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_EQUAL_OP reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_EQUAL_OP   reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    PLUS_OP         reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MINUS_OP        reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MULTIPLICATION_OP reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    DIVISION_OP     reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MODULUS_OP      reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EXPONENT_OP     reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_RIGHT_SHIFT reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_LEFT_SHIFT  reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CONCATENATE     reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    REP_OP          reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    ASSOCIATE_OP    reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    RANGE_OP        reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY   reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY_NEG reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEMICOLON       reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BLOCK_BEGIN     reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CLOSE_PARANTHESIS reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMMA           reduce using rule 68 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 213

<<<<<<< HEAD
    (59) declaration -> LOCAL VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IF              reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    USE             reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    UNTIL           reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    DO              reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    $end            reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 59 (declaration -> LOCAL VARIABLE decList SEMICOLON .)

=======
state 216

    (87) expression -> expression OR_OP Marker expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    XOR_STR_OP      reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    AND_STR_OP      reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    NOT_STR_OP      reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    OR_OP           reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    RANGE_OP        reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    SEMICOLON       reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    COMMA           reduce using rule 87 (expression -> expression OR_OP Marker expression .)
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! COMPARE_OP      [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! AND_OP          [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 87 (expression -> expression OR_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 214

<<<<<<< HEAD
    (43) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 227
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

=======
state 217

    (86) expression -> expression AND_OP Marker expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    XOR_STR_OP      reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    AND_STR_OP      reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    NOT_STR_OP      reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    AND_OP          reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    OR_OP           reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    RANGE_OP        reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    SEMICOLON       reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    COMMA           reduce using rule 86 (expression -> expression AND_OP Marker expression .)
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

  ! COMPARE_OP      [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 86 (expression -> expression AND_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 127 ]
  ! XOR_STR_OP      [ shift and go to state 123 ]
  ! AND_STR_OP      [ shift and go to state 118 ]
  ! NOT_STR_OP      [ shift and go to state 112 ]
  ! AND_OP          [ shift and go to state 128 ]
  ! OR_OP           [ shift and go to state 119 ]
  ! ASSOCIATE_OP    [ shift and go to state 126 ]
  ! RANGE_OP        [ shift and go to state 114 ]
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 215

<<<<<<< HEAD
    (30) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif Marker block
    (31) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif Marker block ELSE Markerelse block
    (32) Markerif -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerif                       shift and go to state 229
    empty                          shift and go to state 228

state 216

    (48) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 230
    empty                          shift and go to state 58

state 217

    (50) untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markeruntil block
    (51) Markeruntil -> . empty
    (6) empty -> .
=======
state 218

    (42) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 42 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce


<<<<<<< HEAD
    empty                          shift and go to state 231
    Markeruntil                    shift and go to state 232

state 218

    (46) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerwhile block
    (47) Markerwhile -> . empty
    (6) empty -> .
=======
state 219

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression . SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression . SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 231
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135

>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 220

<<<<<<< HEAD
    empty                          shift and go to state 234
    Markerwhile                    shift and go to state 233

state 219

    (39) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .

    VARIABLE        reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    UNTIL           reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    DO              reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 39 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
=======
    (41) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 41 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)


state 221
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (29) Markerif -> empty .

<<<<<<< HEAD
state 220

    (89) expression -> expression OR_OP Marker expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    OR_STR_OP       reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    XOR_STR_OP      reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    AND_STR_OP      reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    NOT_STR_OP      reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    OR_OP           reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    COMMA           reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    RANGE_OP        reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 89 (expression -> expression OR_OP Marker expression .)
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! COMPARE_OP      [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! AND_OP          [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 89 (expression -> expression OR_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
=======
    BLOCK_BEGIN     reduce using rule 29 (Markerif -> empty .)

>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 222

<<<<<<< HEAD
state 221

    (88) expression -> expression AND_OP Marker expression .
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    OR_STR_OP       reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    XOR_STR_OP      reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    AND_STR_OP      reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    NOT_STR_OP      reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    AND_OP          reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    OR_OP           reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    COMMA           reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    RANGE_OP        reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 88 (expression -> expression AND_OP Marker expression .)
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139

  ! COMPARE_OP      [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 88 (expression -> expression AND_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 131 ]
  ! XOR_STR_OP      [ shift and go to state 127 ]
  ! AND_STR_OP      [ shift and go to state 121 ]
  ! NOT_STR_OP      [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 132 ]
  ! OR_OP           [ shift and go to state 122 ]
  ! COMMA           [ shift and go to state 124 ]
  ! ASSOCIATE_OP    [ shift and go to state 130 ]
  ! RANGE_OP        [ shift and go to state 117 ]
=======
    (27) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . Marker block
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . Marker block ELSE Markerelse block
    (94) Marker -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    Marker                         shift and go to state 232
    empty                          shift and go to state 38

<<<<<<< HEAD
state 222

    (26) caselist -> CASE OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS block caselist
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
state 223

    (24) caselist -> CASE OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS block caselist
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 235
    empty                          shift and go to state 58

state 223

    (25) switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .

    VARIABLE        reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    LOCAL           reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRIVATE         reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    RETURN          reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    WHILE           reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    FOR             reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRINT           reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    SUB             reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    LAST            reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    NEXT            reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    IF              reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    USE             reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    UNTIL           reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    DO              reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    SWITCH          reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    $end            reduce using rule 25 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)


state 224

    (27) caselist -> ELSE block .

    BLOCK_ENDS      reduce using rule 27 (caselist -> ELSE block .)


state 225

    (44) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMMA           reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    UNTIL           reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DO              reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 44 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 233
    empty                          shift and go to state 55
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 224

<<<<<<< HEAD
state 226

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression . SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression . SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 236
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139
=======
    (23) switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .

    VARIABLE        reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    ARRAY           reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    LOCAL           reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRIVATE         reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    RETURN          reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    WHILE           reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    FOR             reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRINT           reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    SUB             reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    LAST            reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    NEXT            reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    IF              reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    USE             reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    SWITCH          reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    $end            reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)


state 225
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (25) caselist -> ELSE block .

<<<<<<< HEAD
state 227

    (43) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    COMMA           reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    UNTIL           reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    DO              reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 43 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
=======
    BLOCK_ENDS      reduce using rule 25 (caselist -> ELSE block .)

>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

state 226

<<<<<<< HEAD
state 228

    (32) Markerif -> empty .

    BLOCK_BEGIN     reduce using rule 32 (Markerif -> empty .)
=======
    (40) assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression . SEMICOLON
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 234
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 227
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (70) arrayList -> COMMA expression . arrayList
    (71) arrayList -> COMMA expression .
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression
    (70) arrayList -> . COMMA expression arrayList
    (71) arrayList -> . COMMA expression

    CLOSE_PARANTHESIS reduce using rule 71 (arrayList -> COMMA expression .)
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135
    COMMA           shift and go to state 211

    arrayList                      shift and go to state 235

<<<<<<< HEAD
state 229

    (30) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . Marker block
    (31) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . Marker block ELSE Markerelse block
    (96) Marker -> . empty
    (6) empty -> .
=======
state 228

    (69) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS . SEMICOLON
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    SEMICOLON       shift and go to state 236

<<<<<<< HEAD
    Marker                         shift and go to state 237
    empty                          shift and go to state 41

state 230

    (48) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 238
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 231

    (51) Markeruntil -> empty .

    BLOCK_BEGIN     reduce using rule 51 (Markeruntil -> empty .)


state 232

    (50) untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 239

state 233

    (46) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 240

state 234

    (47) Markerwhile -> empty .

    BLOCK_BEGIN     reduce using rule 47 (Markerwhile -> empty .)


state 235

    (26) caselist -> CASE OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS block caselist
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 241
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 236

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON . Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON . Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (96) Marker -> . empty
=======

state 229

    (50) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 237

state 230

    (51) Markerwhile -> empty .

    BLOCK_BEGIN     reduce using rule 51 (Markerwhile -> empty .)


state 231

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON . Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON . Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (94) Marker -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Marker                         shift and go to state 242
    empty                          shift and go to state 41

state 237

    (30) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker . block
    (31) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker . block ELSE Markerelse block
=======
    Marker                         shift and go to state 238
    empty                          shift and go to state 38

state 232

    (27) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker . block
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker . block ELSE Markerelse block
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

<<<<<<< HEAD
    block                          shift and go to state 243

state 238

    (48) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerdowhile SEMICOLON
    (49) Markerdowhile -> . empty
    (6) empty -> .

    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 244
    Markerdowhile                  shift and go to state 245

state 239

    (50) untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .

    VARIABLE        reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    LOCAL           reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    PRIVATE         reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    RETURN          reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    IDENTIFIER      reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    WHILE           reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    FOR             reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    PRINT           reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    SUB             reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    LAST            reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    NEXT            reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    IF              reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    USE             reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    UNTIL           reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    DO              reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    SWITCH          reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    $end            reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    BLOCK_ENDS      reduce using rule 50 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)


state 240

    (46) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .

    VARIABLE        reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LOCAL           reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRIVATE         reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    RETURN          reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IDENTIFIER      reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    WHILE           reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    FOR             reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRINT           reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SUB             reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LAST            reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NEXT            reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IF              reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    USE             reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    UNTIL           reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    DO              reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SWITCH          reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    $end            reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BLOCK_ENDS      reduce using rule 46 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)


state 241

    (26) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . block caselist
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 246

state 242

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker . VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker . VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

    VARIABLE        shift and go to state 247


state 243

    (30) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .
    (31) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block . ELSE Markerelse block
=======
    block                          shift and go to state 239

state 233

    (24) caselist -> CASE OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS block caselist
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 240
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 234

    (40) assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .

    PLUS_OP         reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    MINUS_OP        reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    BIT_FLIP        reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    NOT_OP          reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    VARIABLE        reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    NUMBER          reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    SCI_NOT         reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    FLOAT           reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    OCTAL           reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    STRING          reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    RES_STRING      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    SEMICOLON       reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    OR_STR_OP       reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    AND_STR_OP      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    COMPARE_OP      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    BIT_OR          reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    BIT_XOR         reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    BIT_AND         reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    AND_OP          reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    OR_OP           reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    EQUALS_OP       reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_OP      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    LESS_OP         reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    DIVISION_OP     reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    MODULUS_OP      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    CONCATENATE     reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    REP_OP          reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    RANGE_OP        reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 40 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression SEMICOLON .)


state 235

    (70) arrayList -> COMMA expression arrayList .

    CLOSE_PARANTHESIS reduce using rule 70 (arrayList -> COMMA expression arrayList .)


state 236

    (69) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .

    VARIABLE        reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    ARRAY           reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 69 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    VARIABLE        reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LOCAL           reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PRIVATE         reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    RETURN          reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    IDENTIFIER      reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    WHILE           reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    FOR             reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PRINT           reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SUB             reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LAST            reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    NEXT            reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    IF              reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    USE             reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    UNTIL           reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    DO              reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SWITCH          reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BLOCK_ENDS      reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    $end            reduce using rule 30 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    ELSE            shift and go to state 248

<<<<<<< HEAD

state 244

    (49) Markerdowhile -> empty .

    SEMICOLON       reduce using rule 49 (Markerdowhile -> empty .)


state 245

    (48) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile . SEMICOLON
=======
state 237

    (50) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .

    VARIABLE        reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    ARRAY           reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LOCAL           reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRIVATE         reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    RETURN          reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IDENTIFIER      reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    WHILE           reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    FOR             reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRINT           reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SUB             reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LAST            reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NEXT            reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IF              reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    USE             reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SWITCH          reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BLOCK_ENDS      reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    $end            reduce using rule 50 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)


state 238

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker . VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker . VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

    VARIABLE        shift and go to state 241


state 239

    (27) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block . ELSE Markerelse block

    VARIABLE        reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    ARRAY           reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LOCAL           reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PRIVATE         reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    RETURN          reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    IDENTIFIER      reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    WHILE           reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    FOR             reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PRINT           reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SUB             reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LAST            reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    NEXT            reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    IF              reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    USE             reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SWITCH          reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BLOCK_ENDS      reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    $end            reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    ELSE            shift and go to state 242


state 240

    (24) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . block caselist
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 243

state 241

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE . ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE . ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

    ASSIGNMENT_OP   shift and go to state 245
    ADV_ASSIGNMENT_OP shift and go to state 244
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    SEMICOLON       shift and go to state 249

<<<<<<< HEAD

state 246

    (26) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block . caselist
    (26) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (27) caselist -> . ELSE block
    (28) caselist -> . empty
=======
state 242

    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE . Markerelse block
    (30) Markerelse -> . empty
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (6) empty -> .

    CASE            shift and go to state 199
    ELSE            shift and go to state 201
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    caselist                       shift and go to state 250
    empty                          shift and go to state 202

state 247

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE . ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE . ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

    ASSIGNMENT_OP   shift and go to state 252
    ADV_ASSIGNMENT_OP shift and go to state 251
=======
    Markerelse                     shift and go to state 247
    empty                          shift and go to state 246

state 243

    (24) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block . caselist
    (24) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (25) caselist -> . ELSE block
    (26) caselist -> . empty
    (6) empty -> .
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    CASE            shift and go to state 206
    ELSE            shift and go to state 208
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

<<<<<<< HEAD
state 248

    (31) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE . Markerelse block
    (33) Markerelse -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerelse                     shift and go to state 254
    empty                          shift and go to state 253

state 249

    (48) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .

    VARIABLE        reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    LOCAL           reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    PRIVATE         reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    RETURN          reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    IDENTIFIER      reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    WHILE           reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    FOR             reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    PRINT           reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    SUB             reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    LAST            reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    NEXT            reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    IF              reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    USE             reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    UNTIL           reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    DO              reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    SWITCH          reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    $end            reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    BLOCK_ENDS      reduce using rule 48 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)


state 250

    (26) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .

    BLOCK_ENDS      reduce using rule 26 (caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .)


state 251

    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP . expression CLOSE_PARANTHESIS Markerfor block
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    caselist                       shift and go to state 248
    empty                          shift and go to state 209

state 244

    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP . expression CLOSE_PARANTHESIS Markerfor block
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 255
    empty                          shift and go to state 58

state 252

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP . expression CLOSE_PARANTHESIS Markerfor block
    (74) expression -> . PLUS_OP expression
    (75) expression -> . MINUS_OP expression
    (76) expression -> . BIT_FLIP expression
    (77) expression -> . NOT_OP expression
    (78) expression -> . empty
    (79) expression -> . term
    (80) expression -> . expression OR_STR_OP expression
    (81) expression -> . expression XOR_STR_OP expression
    (82) expression -> . expression AND_STR_OP expression
    (83) expression -> . expression NOT_STR_OP expression
    (84) expression -> . expression COMPARE_OP expression
    (85) expression -> . expression BIT_OR expression
    (86) expression -> . expression BIT_XOR expression
    (87) expression -> . expression BIT_AND expression
    (88) expression -> . expression AND_OP Marker expression
    (89) expression -> . expression OR_OP Marker expression
    (90) expression -> . expression EQUALS_OP expression
    (91) expression -> . expression NOT_EQUALS_OP expression
    (92) expression -> . expression GREATER_OP expression
    (93) expression -> . expression LESS_OP expression
    (94) expression -> . expression GREATER_EQUAL_OP expression
    (95) expression -> . expression LESS_EQUAL_OP expression
    (97) expression -> . expression PLUS_OP expression
    (98) expression -> . expression MINUS_OP expression
    (99) expression -> . expression MULTIPLICATION_OP expression
    (100) expression -> . expression DIVISION_OP expression
    (101) expression -> . expression MODULUS_OP expression
    (102) expression -> . expression EXPONENT_OP expression
    (103) expression -> . expression BIT_RIGHT_SHIFT expression
    (104) expression -> . expression BIT_LEFT_SHIFT expression
    (105) expression -> . expression CONCATENATE expression
    (106) expression -> . expression REP_OP expression
    (107) expression -> . expression COMMA expression
    (108) expression -> . expression ASSOCIATE_OP expression
    (109) expression -> . expression RANGE_OP expression
    (110) expression -> . expression SEARCH_MODIFY expression
    (111) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (62) term -> . functionCall
    (70) term -> . number
    (71) term -> . string
    (72) term -> . VARIABLE
    (73) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (38) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (65) number -> . NUMBER
    (66) number -> . SCI_NOT
    (67) number -> . FLOAT
    (68) number -> . HEXADECIMAL
    (69) number -> . OCTAL
    (63) string -> . STRING
    (64) string -> . RES_STRING

    PLUS_OP         shift and go to state 67
    MINUS_OP        shift and go to state 51
    BIT_FLIP        shift and go to state 56
    NOT_OP          shift and go to state 53
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 249
    empty                          shift and go to state 55

state 245

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP . expression CLOSE_PARANTHESIS Markerfor block
    (72) expression -> . PLUS_OP expression
    (73) expression -> . MINUS_OP expression
    (74) expression -> . BIT_FLIP expression
    (75) expression -> . NOT_OP expression
    (76) expression -> . empty
    (77) expression -> . term
    (78) expression -> . expression OR_STR_OP expression
    (79) expression -> . expression XOR_STR_OP expression
    (80) expression -> . expression AND_STR_OP expression
    (81) expression -> . expression NOT_STR_OP expression
    (82) expression -> . expression COMPARE_OP expression
    (83) expression -> . expression BIT_OR expression
    (84) expression -> . expression BIT_XOR expression
    (85) expression -> . expression BIT_AND expression
    (86) expression -> . expression AND_OP Marker expression
    (87) expression -> . expression OR_OP Marker expression
    (88) expression -> . expression EQUALS_OP expression
    (89) expression -> . expression NOT_EQUALS_OP expression
    (90) expression -> . expression GREATER_OP expression
    (91) expression -> . expression LESS_OP expression
    (92) expression -> . expression GREATER_EQUAL_OP expression
    (93) expression -> . expression LESS_EQUAL_OP expression
    (95) expression -> . expression PLUS_OP expression
    (96) expression -> . expression MINUS_OP expression
    (97) expression -> . expression MULTIPLICATION_OP expression
    (98) expression -> . expression DIVISION_OP expression
    (99) expression -> . expression MODULUS_OP expression
    (100) expression -> . expression EXPONENT_OP expression
    (101) expression -> . expression BIT_RIGHT_SHIFT expression
    (102) expression -> . expression BIT_LEFT_SHIFT expression
    (103) expression -> . expression CONCATENATE expression
    (104) expression -> . expression REP_OP expression
    (105) expression -> . expression ASSOCIATE_OP expression
    (106) expression -> . expression RANGE_OP expression
    (107) expression -> . expression SEARCH_MODIFY expression
    (108) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (49) term -> . functionCall
    (64) term -> . number
    (65) term -> . string
    (66) term -> . VARIABLE
    (67) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (68) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (35) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) number -> . NUMBER
    (60) number -> . SCI_NOT
    (61) number -> . FLOAT
    (62) number -> . HEXADECIMAL
    (63) number -> . OCTAL
    (57) string -> . STRING
    (58) string -> . RES_STRING

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 47
    BIT_FLIP        shift and go to state 53
    NOT_OP          shift and go to state 50
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
<<<<<<< HEAD
    VARIABLE        shift and go to state 63
    OPEN_PARANTHESIS shift and go to state 69
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 60
    SCI_NOT         shift and go to state 62
    FLOAT           shift and go to state 66
    HEXADECIMAL     shift and go to state 54
    OCTAL           shift and go to state 65
    STRING          shift and go to state 57
    RES_STRING      shift and go to state 59
=======
    VARIABLE        shift and go to state 60
    OPEN_PARANTHESIS shift and go to state 66
    ARRAY           shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 57
    SCI_NOT         shift and go to state 59
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 51
    OCTAL           shift and go to state 62
    STRING          shift and go to state 49
    RES_STRING      shift and go to state 56
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

<<<<<<< HEAD
    term                           shift and go to state 64
    string                         shift and go to state 55
    number                         shift and go to state 52
    functionCall                   shift and go to state 61
    expression                     shift and go to state 256
    empty                          shift and go to state 58

state 253

    (33) Markerelse -> empty .

    BLOCK_BEGIN     reduce using rule 33 (Markerelse -> empty .)


state 254

    (31) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse . block
=======
    term                           shift and go to state 61
    string                         shift and go to state 52
    number                         shift and go to state 48
    functionCall                   shift and go to state 58
    expression                     shift and go to state 250
    empty                          shift and go to state 55

state 246

    (30) Markerelse -> empty .

    BLOCK_BEGIN     reduce using rule 30 (Markerelse -> empty .)


state 247

    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse . block
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

<<<<<<< HEAD
    block                          shift and go to state 257

state 255

    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression . CLOSE_PARANTHESIS Markerfor block
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 258
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 256

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression . CLOSE_PARANTHESIS Markerfor block
    (80) expression -> expression . OR_STR_OP expression
    (81) expression -> expression . XOR_STR_OP expression
    (82) expression -> expression . AND_STR_OP expression
    (83) expression -> expression . NOT_STR_OP expression
    (84) expression -> expression . COMPARE_OP expression
    (85) expression -> expression . BIT_OR expression
    (86) expression -> expression . BIT_XOR expression
    (87) expression -> expression . BIT_AND expression
    (88) expression -> expression . AND_OP Marker expression
    (89) expression -> expression . OR_OP Marker expression
    (90) expression -> expression . EQUALS_OP expression
    (91) expression -> expression . NOT_EQUALS_OP expression
    (92) expression -> expression . GREATER_OP expression
    (93) expression -> expression . LESS_OP expression
    (94) expression -> expression . GREATER_EQUAL_OP expression
    (95) expression -> expression . LESS_EQUAL_OP expression
    (97) expression -> expression . PLUS_OP expression
    (98) expression -> expression . MINUS_OP expression
    (99) expression -> expression . MULTIPLICATION_OP expression
    (100) expression -> expression . DIVISION_OP expression
    (101) expression -> expression . MODULUS_OP expression
    (102) expression -> expression . EXPONENT_OP expression
    (103) expression -> expression . BIT_RIGHT_SHIFT expression
    (104) expression -> expression . BIT_LEFT_SHIFT expression
    (105) expression -> expression . CONCATENATE expression
    (106) expression -> expression . REP_OP expression
    (107) expression -> expression . COMMA expression
    (108) expression -> expression . ASSOCIATE_OP expression
    (109) expression -> expression . RANGE_OP expression
    (110) expression -> expression . SEARCH_MODIFY expression
    (111) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 259
    OR_STR_OP       shift and go to state 131
    XOR_STR_OP      shift and go to state 127
    AND_STR_OP      shift and go to state 121
    NOT_STR_OP      shift and go to state 115
    COMPARE_OP      shift and go to state 112
    BIT_OR          shift and go to state 137
    BIT_XOR         shift and go to state 118
    BIT_AND         shift and go to state 128
    AND_OP          shift and go to state 132
    OR_OP           shift and go to state 122
    EQUALS_OP       shift and go to state 119
    NOT_EQUALS_OP   shift and go to state 113
    GREATER_OP      shift and go to state 140
    LESS_OP         shift and go to state 123
    GREATER_EQUAL_OP shift and go to state 126
    LESS_EQUAL_OP   shift and go to state 110
    PLUS_OP         shift and go to state 138
    MINUS_OP        shift and go to state 111
    MULTIPLICATION_OP shift and go to state 129
    DIVISION_OP     shift and go to state 116
    MODULUS_OP      shift and go to state 125
    EXPONENT_OP     shift and go to state 114
    BIT_RIGHT_SHIFT shift and go to state 136
    BIT_LEFT_SHIFT  shift and go to state 133
    CONCATENATE     shift and go to state 135
    REP_OP          shift and go to state 134
    COMMA           shift and go to state 124
    ASSOCIATE_OP    shift and go to state 130
    RANGE_OP        shift and go to state 117
    SEARCH_MODIFY   shift and go to state 109
    SEARCH_MODIFY_NEG shift and go to state 139


state 257

    (31) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .

    VARIABLE        reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LOCAL           reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PRIVATE         reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    RETURN          reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    IDENTIFIER      reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    WHILE           reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    FOR             reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PRINT           reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SUB             reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LAST            reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    NEXT            reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    IF              reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    USE             reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    UNTIL           reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    DO              reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SWITCH          reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BLOCK_ENDS      reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    $end            reduce using rule 31 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)


state 258
=======
    block                          shift and go to state 251

state 248

    (24) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .

    BLOCK_ENDS      reduce using rule 24 (caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .)


state 249

    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression . CLOSE_PARANTHESIS Markerfor block
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 252
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 250

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression . CLOSE_PARANTHESIS Markerfor block
    (78) expression -> expression . OR_STR_OP expression
    (79) expression -> expression . XOR_STR_OP expression
    (80) expression -> expression . AND_STR_OP expression
    (81) expression -> expression . NOT_STR_OP expression
    (82) expression -> expression . COMPARE_OP expression
    (83) expression -> expression . BIT_OR expression
    (84) expression -> expression . BIT_XOR expression
    (85) expression -> expression . BIT_AND expression
    (86) expression -> expression . AND_OP Marker expression
    (87) expression -> expression . OR_OP Marker expression
    (88) expression -> expression . EQUALS_OP expression
    (89) expression -> expression . NOT_EQUALS_OP expression
    (90) expression -> expression . GREATER_OP expression
    (91) expression -> expression . LESS_OP expression
    (92) expression -> expression . GREATER_EQUAL_OP expression
    (93) expression -> expression . LESS_EQUAL_OP expression
    (95) expression -> expression . PLUS_OP expression
    (96) expression -> expression . MINUS_OP expression
    (97) expression -> expression . MULTIPLICATION_OP expression
    (98) expression -> expression . DIVISION_OP expression
    (99) expression -> expression . MODULUS_OP expression
    (100) expression -> expression . EXPONENT_OP expression
    (101) expression -> expression . BIT_RIGHT_SHIFT expression
    (102) expression -> expression . BIT_LEFT_SHIFT expression
    (103) expression -> expression . CONCATENATE expression
    (104) expression -> expression . REP_OP expression
    (105) expression -> expression . ASSOCIATE_OP expression
    (106) expression -> expression . RANGE_OP expression
    (107) expression -> expression . SEARCH_MODIFY expression
    (108) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 253
    OR_STR_OP       shift and go to state 127
    XOR_STR_OP      shift and go to state 123
    AND_STR_OP      shift and go to state 118
    NOT_STR_OP      shift and go to state 112
    COMPARE_OP      shift and go to state 109
    BIT_OR          shift and go to state 133
    BIT_XOR         shift and go to state 115
    BIT_AND         shift and go to state 124
    AND_OP          shift and go to state 128
    OR_OP           shift and go to state 119
    EQUALS_OP       shift and go to state 116
    NOT_EQUALS_OP   shift and go to state 110
    GREATER_OP      shift and go to state 136
    LESS_OP         shift and go to state 120
    GREATER_EQUAL_OP shift and go to state 122
    LESS_EQUAL_OP   shift and go to state 107
    PLUS_OP         shift and go to state 134
    MINUS_OP        shift and go to state 108
    MULTIPLICATION_OP shift and go to state 125
    DIVISION_OP     shift and go to state 113
    MODULUS_OP      shift and go to state 121
    EXPONENT_OP     shift and go to state 111
    BIT_RIGHT_SHIFT shift and go to state 132
    BIT_LEFT_SHIFT  shift and go to state 129
    CONCATENATE     shift and go to state 131
    REP_OP          shift and go to state 130
    ASSOCIATE_OP    shift and go to state 126
    RANGE_OP        shift and go to state 114
    SEARCH_MODIFY   shift and go to state 106
    SEARCH_MODIFY_NEG shift and go to state 135


state 251

    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .

    VARIABLE        reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    ARRAY           reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LOCAL           reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PRIVATE         reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    RETURN          reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    IDENTIFIER      reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    WHILE           reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    FOR             reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PRINT           reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SUB             reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LAST            reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    NEXT            reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    IF              reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    USE             reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SWITCH          reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    $end            reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BLOCK_ENDS      reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)


state 252
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS . Markerfor block
    (55) Markerfor -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Markerfor                      shift and go to state 260
    empty                          shift and go to state 261

state 259
=======
    Markerfor                      shift and go to state 254
    empty                          shift and go to state 255

state 253
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS . Markerfor block
    (55) Markerfor -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

<<<<<<< HEAD
    Markerfor                      shift and go to state 262
    empty                          shift and go to state 261

state 260
=======
    Markerfor                      shift and go to state 256
    empty                          shift and go to state 255

state 254
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

<<<<<<< HEAD
    block                          shift and go to state 263

state 261
=======
    block                          shift and go to state 257

state 255
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (55) Markerfor -> empty .

    BLOCK_BEGIN     reduce using rule 55 (Markerfor -> empty .)


<<<<<<< HEAD
state 262
=======
state 256
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

<<<<<<< HEAD
    block                          shift and go to state 264

state 263
=======
    block                          shift and go to state 258

state 257
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (53) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .

    VARIABLE        reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
<<<<<<< HEAD
=======
    ARRAY           reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    LOCAL           reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PRIVATE         reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    RETURN          reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    IDENTIFIER      reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    WHILE           reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    FOR             reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PRINT           reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SUB             reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LAST            reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NEXT            reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    IF              reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    USE             reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
<<<<<<< HEAD
    UNTIL           reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    DO              reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
=======
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SWITCH          reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BLOCK_ENDS      reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    $end            reduce using rule 53 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)


<<<<<<< HEAD
state 264
=======
state 258
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce

    (52) forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .

    VARIABLE        reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
<<<<<<< HEAD
=======
    ARRAY           reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    LOCAL           reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PRIVATE         reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    RETURN          reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    IDENTIFIER      reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    WHILE           reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    FOR             reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PRINT           reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SUB             reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LAST            reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NEXT            reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    IF              reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    USE             reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
<<<<<<< HEAD
    UNTIL           reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    DO              reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
=======
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
    SWITCH          reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BLOCK_ENDS      reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    $end            reduce using rule 52 (forStatement -> FOR OPEN_PARANTHESIS assignment Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 0 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for SUB in state 0 resolved as shift
WARNING: shift/reduce conflict for LAST in state 0 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 7 resolved as shift
<<<<<<< HEAD
=======
WARNING: shift/reduce conflict for ARRAY in state 7 resolved as shift
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
WARNING: shift/reduce conflict for LOCAL in state 7 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 7 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 7 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for FOR in state 7 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 7 resolved as shift
WARNING: shift/reduce conflict for SUB in state 7 resolved as shift
WARNING: shift/reduce conflict for LAST in state 7 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 7 resolved as shift
WARNING: shift/reduce conflict for USE in state 7 resolved as shift
<<<<<<< HEAD
WARNING: shift/reduce conflict for UNTIL in state 7 resolved as shift
WARNING: shift/reduce conflict for DO in state 7 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 7 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 24 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 24 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 24 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 24 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 24 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 24 resolved as shift
WARNING: shift/reduce conflict for FOR in state 24 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 24 resolved as shift
WARNING: shift/reduce conflict for SUB in state 24 resolved as shift
WARNING: shift/reduce conflict for LAST in state 24 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 24 resolved as shift
WARNING: shift/reduce conflict for IF in state 24 resolved as shift
WARNING: shift/reduce conflict for USE in state 24 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 24 resolved as shift
WARNING: shift/reduce conflict for DO in state 24 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 24 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 86 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 165 resolved as shift
WARNING: reduce/reduce conflict in state 24 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 24
=======
WARNING: shift/reduce conflict for SWITCH in state 7 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 20 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 20 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 20 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 20 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 20 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 20 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 20 resolved as shift
WARNING: shift/reduce conflict for FOR in state 20 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 20 resolved as shift
WARNING: shift/reduce conflict for SUB in state 20 resolved as shift
WARNING: shift/reduce conflict for LAST in state 20 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 20 resolved as shift
WARNING: shift/reduce conflict for IF in state 20 resolved as shift
WARNING: shift/reduce conflict for USE in state 20 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 20 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 80 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 80 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 161 resolved as shift
WARNING: reduce/reduce conflict in state 20 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 20
>>>>>>> a103d676a9a6e4afb1d03e3f28dd4c7a7bbbe6ce
