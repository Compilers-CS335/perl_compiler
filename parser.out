Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    FORMAT
    COMMENT
    TRANSLATION
    GOTO
    FOREACH
    ELSIF
    SUBSTITUTE
    SELECT
    FILE_HANDLING_OPTIONS
    COLON
    UNLESS
    DECREMENT_OP
    UNTIL
    WHITESPACE
    USER_INPUT_OP
    QUESTION_MARK
    REDO
    HASH
    WRITE
    MATCH
    INCREMENT_OP
    DO
    SYSTEM_COMMAND
    CONTINUE

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     start -> statements
Rule 3     block -> BLOCK_BEGIN statements BLOCK_ENDS
Rule 4     statements -> statement statements
Rule 5     statements -> statement
Rule 6     empty -> <empty>
Rule 7     statement -> assignment Marker
Rule 8     statement -> declaration Marker
Rule 9     statement -> returnStatement Marker
Rule 10    statement -> functionCall Marker
Rule 11    statement -> whileStatement Marker
Rule 12    statement -> forStatement Marker
Rule 13    statement -> printStatement Marker
Rule 14    statement -> functionStatement Marker
Rule 15    statement -> lastStatement Marker
Rule 16    statement -> nextStatement Marker
Rule 17    statement -> ifthen Marker
Rule 18    statement -> ifthenelse Marker
Rule 19    statement -> useStatement Marker
Rule 20    statement -> switchStatement Marker
Rule 21    useStatement -> USE IDENTIFIER SEMICOLON
Rule 22    switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS
Rule 23    caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
Rule 24    caselist -> ELSE block
Rule 25    caselist -> empty
Rule 26    ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
Rule 27    ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block
Rule 28    lastStatement -> LAST SEMICOLON
Rule 29    nextStatement -> NEXT SEMICOLON
Rule 30    functionStatement -> SUB IDENTIFIER block
Rule 31    printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
Rule 32    printStatement -> PRINT expression SEMICOLON
Rule 33    returnStatement -> RETURN expression SEMICOLON
Rule 34    assignment -> lefthandside assignmenttype expression SEMICOLON
Rule 35    assignmenttype -> ADV_ASSIGNMENT_OP
Rule 36    assignmenttype -> ASSIGNMENT_OP
Rule 37    lefthandside -> PRIVATE type decList
Rule 38    lefthandside -> PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
Rule 39    lefthandside -> LOCAL type decList
Rule 40    lefthandside -> LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
Rule 41    lefthandside -> OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
Rule 42    lefthandside -> type
Rule 43    declaration -> lefthandside SEMICOLON
Rule 44    decList -> COMMA type decList
Rule 45    decList -> empty
Rule 46    functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
Rule 47    parameters -> expression COMMA parameters
Rule 48    parameters -> expression
Rule 49    parameters -> empty
Rule 50    whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
Rule 51    forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
Rule 52    string -> STRING
Rule 53    string -> RES_STRING
Rule 54    number -> NUMBER
Rule 55    number -> SCI_NOT
Rule 56    number -> FLOAT
Rule 57    number -> HEXADECIMAL
Rule 58    number -> OCTAL
Rule 59    variable -> VARIABLE
Rule 60    variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET
Rule 61    term -> number
Rule 62    term -> type
Rule 63    term -> string
Rule 64    term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
Rule 65    type -> variable
Rule 66    type -> ARRAY
Rule 67    expression -> PLUS_OP expression
Rule 68    expression -> MINUS_OP expression
Rule 69    expression -> BIT_FLIP expression
Rule 70    expression -> NOT_OP expression
Rule 71    expression -> empty
Rule 72    expression -> term
Rule 73    expression -> expression OR_STR_OP expression
Rule 74    expression -> expression XOR_STR_OP expression
Rule 75    expression -> expression AND_STR_OP expression
Rule 76    expression -> expression NOT_STR_OP expression
Rule 77    expression -> expression COMPARE_OP expression
Rule 78    expression -> expression BIT_OR expression
Rule 79    expression -> expression BIT_XOR expression
Rule 80    expression -> expression BIT_AND expression
Rule 81    expression -> expression AND_OP Marker expression
Rule 82    expression -> expression OR_OP Marker expression
Rule 83    expression -> expression EQUALS_OP expression
Rule 84    expression -> expression NOT_EQUALS_OP expression
Rule 85    expression -> expression GREATER_OP expression
Rule 86    expression -> expression LESS_OP expression
Rule 87    expression -> expression GREATER_EQUAL_OP expression
Rule 88    expression -> expression LESS_EQUAL_OP expression
Rule 89    Marker -> empty
Rule 90    expression -> expression PLUS_OP expression
Rule 91    expression -> expression MINUS_OP expression
Rule 92    expression -> expression MULTIPLICATION_OP expression
Rule 93    expression -> expression DIVISION_OP expression
Rule 94    expression -> expression MODULUS_OP expression
Rule 95    expression -> expression EXPONENT_OP expression
Rule 96    expression -> expression BIT_RIGHT_SHIFT expression
Rule 97    expression -> expression BIT_LEFT_SHIFT expression
Rule 98    expression -> expression CONCATENATE expression
Rule 99    expression -> expression REP_OP expression
Rule 100   expression -> expression COMMA expression
Rule 101   expression -> expression ASSOCIATE_OP expression
Rule 102   expression -> expression RANGE_OP expression
Rule 103   expression -> expression SEARCH_MODIFY expression
Rule 104   expression -> expression SEARCH_MODIFY_NEG expression

Terminals, with rules where they appear

ADV_ASSIGNMENT_OP    : 35
AND_OP               : 81
AND_STR_OP           : 75
ARRAY                : 66
ASSIGNMENT_OP        : 36
ASSOCIATE_OP         : 101
BIT_AND              : 80
BIT_FLIP             : 69
BIT_LEFT_SHIFT       : 97
BIT_OR               : 78
BIT_RIGHT_SHIFT      : 96
BIT_XOR              : 79
BLOCK_BEGIN          : 3 22
BLOCK_ENDS           : 3 22
CASE                 : 23
CLOSE_BRACKET        : 60
CLOSE_PARANTHESIS    : 23 26 27 31 38 40 41 46 50 51 64
COLON                : 
COMMA                : 44 47 100
COMMENT              : 
COMPARE_OP           : 77
CONCATENATE          : 98
CONTINUE             : 
DECREMENT_OP         : 
DIVISION_OP          : 93
DO                   : 
ELSE                 : 24 27
ELSIF                : 
EQUALS_OP            : 83
EXPONENT_OP          : 95
FILE_HANDLING_OPTIONS : 
FLOAT                : 56
FOR                  : 51
FOREACH              : 
FORMAT               : 
GOTO                 : 
GREATER_EQUAL_OP     : 87
GREATER_OP           : 85
HASH                 : 
HEXADECIMAL          : 57
IDENTIFIER           : 21 30 46
IF                   : 26 27
INCREMENT_OP         : 
LAST                 : 28
LESS_EQUAL_OP        : 88
LESS_OP              : 86
LOCAL                : 39 40
MATCH                : 
MINUS_OP             : 68 91
MODULUS_OP           : 94
MULTIPLICATION_OP    : 92
NEXT                 : 29
NOT_EQUALS_OP        : 84
NOT_OP               : 70
NOT_STR_OP           : 76
NUMBER               : 54 60
OCTAL                : 58
OPEN_BRACKET         : 60
OPEN_PARANTHESIS     : 23 26 27 31 38 40 41 46 50 51 64
OR_OP                : 82
OR_STR_OP            : 73
PLUS_OP              : 67 90
PRINT                : 31 32
PRIVATE              : 37 38
QUESTION_MARK        : 
RANGE_OP             : 102
REDO                 : 
REP_OP               : 99
RES_STRING           : 53
RETURN               : 33
SCI_NOT              : 55
SEARCH_MODIFY        : 103
SEARCH_MODIFY_NEG    : 104
SELECT               : 
SEMICOLON            : 21 28 29 31 32 33 34 43 46 51 51
STRING               : 52
SUB                  : 30
SUBSTITUTE           : 
SWITCH               : 22
SYSTEM_COMMAND       : 
TRANSLATION          : 
UNLESS               : 
UNTIL                : 
USE                  : 21
USER_INPUT_OP        : 
VARIABLE             : 59 60
WHILE                : 50
WHITESPACE           : 
WRITE                : 
XOR_STR_OP           : 74
error                : 

Nonterminals, with rules where they appear

Marker               : 7 8 9 10 11 12 13 14 15 16 17 18 19 20 81 82
assignment           : 7
assignmenttype       : 34
block                : 1 23 24 26 27 27 30 50 51
caselist             : 22 23
decList              : 37 38 39 40 41 44
declaration          : 8
empty                : 25 45 49 71 89
expression           : 23 26 27 31 32 33 34 47 48 50 51 51 51 64 67 68 69 70 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104
forStatement         : 12
functionCall         : 10
functionStatement    : 14
ifthen               : 17
ifthenelse           : 18
lastStatement        : 15
lefthandside         : 22 34 43
nextStatement        : 16
number               : 61
parameters           : 46 47
printStatement       : 13
returnStatement      : 9
start                : 0
statement            : 4 5
statements           : 2 3 4
string               : 63
switchStatement      : 20
term                 : 72
type                 : 37 38 39 40 41 42 44 62
useStatement         : 19
variable             : 65
whileStatement       : 11

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) start -> . statements
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . switchStatement Marker
    (34) assignment -> . lefthandside assignmenttype expression SEMICOLON
    (43) declaration -> . lefthandside SEMICOLON
    (33) returnStatement -> . RETURN expression SEMICOLON
    (46) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (50) whileStatement -> . WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
    (51) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (31) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (32) printStatement -> . PRINT expression SEMICOLON
    (30) functionStatement -> . SUB IDENTIFIER block
    (28) lastStatement -> . LAST SEMICOLON
    (29) nextStatement -> . NEXT SEMICOLON
    (26) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
    (27) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block
    (21) useStatement -> . USE IDENTIFIER SEMICOLON
    (22) switchStatement -> . SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS
    (37) lefthandside -> . PRIVATE type decList
    (38) lefthandside -> . PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (39) lefthandside -> . LOCAL type decList
    (40) lefthandside -> . LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (41) lefthandside -> . OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (42) lefthandside -> . type
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    BLOCK_BEGIN     shift and go to state 7
    RETURN          shift and go to state 11
    IDENTIFIER      shift and go to state 24
    WHILE           shift and go to state 9
    FOR             shift and go to state 27
    PRINT           shift and go to state 10
    SUB             shift and go to state 13
    LAST            shift and go to state 14
    NEXT            shift and go to state 18
    IF              shift and go to state 37
    USE             shift and go to state 2
    SWITCH          shift and go to state 16
    PRIVATE         shift and go to state 17
    LOCAL           shift and go to state 35
    OPEN_PARANTHESIS shift and go to state 4
    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    forStatement                   shift and go to state 1
    statements                     shift and go to state 3
    functionStatement              shift and go to state 5
    switchStatement                shift and go to state 6
    ifthen                         shift and go to state 12
    nextStatement                  shift and go to state 15
    start                          shift and go to state 19
    lastStatement                  shift and go to state 20
    useStatement                   shift and go to state 21
    statement                      shift and go to state 22
    printStatement                 shift and go to state 23
    type                           shift and go to state 25
    ifthenelse                     shift and go to state 26
    assignment                     shift and go to state 28
    whileStatement                 shift and go to state 29
    lefthandside                   shift and go to state 30
    functionCall                   shift and go to state 31
    declaration                    shift and go to state 32
    variable                       shift and go to state 33
    returnStatement                shift and go to state 34
    block                          shift and go to state 38

state 1

    (12) statement -> forStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 39
    empty                          shift and go to state 40

state 2

    (21) useStatement -> USE . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 41


state 3

    (2) start -> statements .

    $end            reduce using rule 2 (start -> statements .)


state 4

    (41) lefthandside -> OPEN_PARANTHESIS . type decList CLOSE_PARANTHESIS
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    variable                       shift and go to state 33
    type                           shift and go to state 42

state 5

    (14) statement -> functionStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 43
    empty                          shift and go to state 40

state 6

    (20) statement -> switchStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 44
    empty                          shift and go to state 40

state 7

    (3) block -> BLOCK_BEGIN . statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . switchStatement Marker
    (34) assignment -> . lefthandside assignmenttype expression SEMICOLON
    (43) declaration -> . lefthandside SEMICOLON
    (33) returnStatement -> . RETURN expression SEMICOLON
    (46) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (50) whileStatement -> . WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
    (51) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (31) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (32) printStatement -> . PRINT expression SEMICOLON
    (30) functionStatement -> . SUB IDENTIFIER block
    (28) lastStatement -> . LAST SEMICOLON
    (29) nextStatement -> . NEXT SEMICOLON
    (26) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
    (27) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block
    (21) useStatement -> . USE IDENTIFIER SEMICOLON
    (22) switchStatement -> . SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS
    (37) lefthandside -> . PRIVATE type decList
    (38) lefthandside -> . PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (39) lefthandside -> . LOCAL type decList
    (40) lefthandside -> . LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (41) lefthandside -> . OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (42) lefthandside -> . type
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    RETURN          shift and go to state 11
    IDENTIFIER      shift and go to state 24
    WHILE           shift and go to state 9
    FOR             shift and go to state 27
    PRINT           shift and go to state 10
    SUB             shift and go to state 13
    LAST            shift and go to state 14
    NEXT            shift and go to state 18
    IF              shift and go to state 37
    USE             shift and go to state 2
    SWITCH          shift and go to state 16
    PRIVATE         shift and go to state 17
    LOCAL           shift and go to state 35
    OPEN_PARANTHESIS shift and go to state 4
    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    forStatement                   shift and go to state 1
    statements                     shift and go to state 45
    functionStatement              shift and go to state 5
    switchStatement                shift and go to state 6
    ifthen                         shift and go to state 12
    nextStatement                  shift and go to state 15
    lastStatement                  shift and go to state 20
    useStatement                   shift and go to state 21
    statement                      shift and go to state 22
    printStatement                 shift and go to state 23
    type                           shift and go to state 25
    ifthenelse                     shift and go to state 26
    assignment                     shift and go to state 28
    whileStatement                 shift and go to state 29
    lefthandside                   shift and go to state 30
    functionCall                   shift and go to state 31
    declaration                    shift and go to state 32
    variable                       shift and go to state 33
    returnStatement                shift and go to state 34

state 8

    (59) variable -> VARIABLE .
    (60) variable -> VARIABLE . OPEN_BRACKET NUMBER CLOSE_BRACKET

    OR_STR_OP       reduce using rule 59 (variable -> VARIABLE .)
    XOR_STR_OP      reduce using rule 59 (variable -> VARIABLE .)
    AND_STR_OP      reduce using rule 59 (variable -> VARIABLE .)
    NOT_STR_OP      reduce using rule 59 (variable -> VARIABLE .)
    COMPARE_OP      reduce using rule 59 (variable -> VARIABLE .)
    BIT_OR          reduce using rule 59 (variable -> VARIABLE .)
    BIT_XOR         reduce using rule 59 (variable -> VARIABLE .)
    BIT_AND         reduce using rule 59 (variable -> VARIABLE .)
    AND_OP          reduce using rule 59 (variable -> VARIABLE .)
    OR_OP           reduce using rule 59 (variable -> VARIABLE .)
    EQUALS_OP       reduce using rule 59 (variable -> VARIABLE .)
    NOT_EQUALS_OP   reduce using rule 59 (variable -> VARIABLE .)
    GREATER_OP      reduce using rule 59 (variable -> VARIABLE .)
    LESS_OP         reduce using rule 59 (variable -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 59 (variable -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 59 (variable -> VARIABLE .)
    PLUS_OP         reduce using rule 59 (variable -> VARIABLE .)
    MINUS_OP        reduce using rule 59 (variable -> VARIABLE .)
    MULTIPLICATION_OP reduce using rule 59 (variable -> VARIABLE .)
    DIVISION_OP     reduce using rule 59 (variable -> VARIABLE .)
    MODULUS_OP      reduce using rule 59 (variable -> VARIABLE .)
    EXPONENT_OP     reduce using rule 59 (variable -> VARIABLE .)
    BIT_RIGHT_SHIFT reduce using rule 59 (variable -> VARIABLE .)
    BIT_LEFT_SHIFT  reduce using rule 59 (variable -> VARIABLE .)
    CONCATENATE     reduce using rule 59 (variable -> VARIABLE .)
    REP_OP          reduce using rule 59 (variable -> VARIABLE .)
    COMMA           reduce using rule 59 (variable -> VARIABLE .)
    ASSOCIATE_OP    reduce using rule 59 (variable -> VARIABLE .)
    RANGE_OP        reduce using rule 59 (variable -> VARIABLE .)
    SEARCH_MODIFY   reduce using rule 59 (variable -> VARIABLE .)
    SEARCH_MODIFY_NEG reduce using rule 59 (variable -> VARIABLE .)
    SEMICOLON       reduce using rule 59 (variable -> VARIABLE .)
    CLOSE_PARANTHESIS reduce using rule 59 (variable -> VARIABLE .)
    BLOCK_BEGIN     reduce using rule 59 (variable -> VARIABLE .)
    ADV_ASSIGNMENT_OP reduce using rule 59 (variable -> VARIABLE .)
    ASSIGNMENT_OP   reduce using rule 59 (variable -> VARIABLE .)
    OPEN_BRACKET    shift and go to state 46


state 9

    (50) whileStatement -> WHILE . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block

    OPEN_PARANTHESIS shift and go to state 47


state 10

    (31) printStatement -> PRINT . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (32) printStatement -> PRINT . expression SEMICOLON
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    OPEN_PARANTHESIS shift and go to state 48
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 65
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 11

    (33) returnStatement -> RETURN . expression SEMICOLON
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 67
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 12

    (17) statement -> ifthen . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 68
    empty                          shift and go to state 40

state 13

    (30) functionStatement -> SUB . IDENTIFIER block

    IDENTIFIER      shift and go to state 69


state 14

    (28) lastStatement -> LAST . SEMICOLON

    SEMICOLON       shift and go to state 70


state 15

    (16) statement -> nextStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 71
    empty                          shift and go to state 40

state 16

    (22) switchStatement -> SWITCH . lefthandside BLOCK_BEGIN caselist BLOCK_ENDS
    (37) lefthandside -> . PRIVATE type decList
    (38) lefthandside -> . PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (39) lefthandside -> . LOCAL type decList
    (40) lefthandside -> . LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (41) lefthandside -> . OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (42) lefthandside -> . type
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PRIVATE         shift and go to state 17
    LOCAL           shift and go to state 35
    OPEN_PARANTHESIS shift and go to state 4
    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    variable                       shift and go to state 33
    lefthandside                   shift and go to state 72
    type                           shift and go to state 25

state 17

    (37) lefthandside -> PRIVATE . type decList
    (38) lefthandside -> PRIVATE . OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    OPEN_PARANTHESIS shift and go to state 73
    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    variable                       shift and go to state 33
    type                           shift and go to state 74

state 18

    (29) nextStatement -> NEXT . SEMICOLON

    SEMICOLON       shift and go to state 75


state 19

    (0) S' -> start .



state 20

    (15) statement -> lastStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 76
    empty                          shift and go to state 40

state 21

    (19) statement -> useStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 77
    empty                          shift and go to state 40

state 22

    (4) statements -> statement . statements
    (5) statements -> statement .
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . switchStatement Marker
    (34) assignment -> . lefthandside assignmenttype expression SEMICOLON
    (43) declaration -> . lefthandside SEMICOLON
    (33) returnStatement -> . RETURN expression SEMICOLON
    (46) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (50) whileStatement -> . WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
    (51) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (31) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (32) printStatement -> . PRINT expression SEMICOLON
    (30) functionStatement -> . SUB IDENTIFIER block
    (28) lastStatement -> . LAST SEMICOLON
    (29) nextStatement -> . NEXT SEMICOLON
    (26) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
    (27) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block
    (21) useStatement -> . USE IDENTIFIER SEMICOLON
    (22) switchStatement -> . SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS
    (37) lefthandside -> . PRIVATE type decList
    (38) lefthandside -> . PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (39) lefthandside -> . LOCAL type decList
    (40) lefthandside -> . LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (41) lefthandside -> . OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (42) lefthandside -> . type
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    BLOCK_ENDS      reduce using rule 5 (statements -> statement .)
    $end            reduce using rule 5 (statements -> statement .)
    RETURN          shift and go to state 11
    IDENTIFIER      shift and go to state 24
    WHILE           shift and go to state 9
    FOR             shift and go to state 27
    PRINT           shift and go to state 10
    SUB             shift and go to state 13
    LAST            shift and go to state 14
    NEXT            shift and go to state 18
    IF              shift and go to state 37
    USE             shift and go to state 2
    SWITCH          shift and go to state 16
    PRIVATE         shift and go to state 17
    LOCAL           shift and go to state 35
    OPEN_PARANTHESIS shift and go to state 4
    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    forStatement                   shift and go to state 1
    statements                     shift and go to state 78
    functionStatement              shift and go to state 5
    switchStatement                shift and go to state 6
    ifthen                         shift and go to state 12
    nextStatement                  shift and go to state 15
    lastStatement                  shift and go to state 20
    useStatement                   shift and go to state 21
    statement                      shift and go to state 22
    printStatement                 shift and go to state 23
    type                           shift and go to state 25
    ifthenelse                     shift and go to state 26
    assignment                     shift and go to state 28
    whileStatement                 shift and go to state 29
    lefthandside                   shift and go to state 30
    functionCall                   shift and go to state 31
    declaration                    shift and go to state 32
    variable                       shift and go to state 33
    returnStatement                shift and go to state 34

state 23

    (13) statement -> printStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 79
    empty                          shift and go to state 40

state 24

    (46) functionCall -> IDENTIFIER . OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS shift and go to state 80


state 25

    (42) lefthandside -> type .

    SEMICOLON       reduce using rule 42 (lefthandside -> type .)
    ADV_ASSIGNMENT_OP reduce using rule 42 (lefthandside -> type .)
    ASSIGNMENT_OP   reduce using rule 42 (lefthandside -> type .)
    BLOCK_BEGIN     reduce using rule 42 (lefthandside -> type .)


state 26

    (18) statement -> ifthenelse . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 81
    empty                          shift and go to state 40

state 27

    (51) forStatement -> FOR . OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block

    OPEN_PARANTHESIS shift and go to state 82


state 28

    (7) statement -> assignment . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 83
    empty                          shift and go to state 40

state 29

    (11) statement -> whileStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 84
    empty                          shift and go to state 40

state 30

    (34) assignment -> lefthandside . assignmenttype expression SEMICOLON
    (43) declaration -> lefthandside . SEMICOLON
    (35) assignmenttype -> . ADV_ASSIGNMENT_OP
    (36) assignmenttype -> . ASSIGNMENT_OP

    SEMICOLON       shift and go to state 86
    ADV_ASSIGNMENT_OP shift and go to state 87
    ASSIGNMENT_OP   shift and go to state 88

    assignmenttype                 shift and go to state 85

state 31

    (10) statement -> functionCall . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 89
    empty                          shift and go to state 40

state 32

    (8) statement -> declaration . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 90
    empty                          shift and go to state 40

state 33

    (65) type -> variable .

    COMMA           reduce using rule 65 (type -> variable .)
    CLOSE_PARANTHESIS reduce using rule 65 (type -> variable .)
    OR_STR_OP       reduce using rule 65 (type -> variable .)
    XOR_STR_OP      reduce using rule 65 (type -> variable .)
    AND_STR_OP      reduce using rule 65 (type -> variable .)
    NOT_STR_OP      reduce using rule 65 (type -> variable .)
    COMPARE_OP      reduce using rule 65 (type -> variable .)
    BIT_OR          reduce using rule 65 (type -> variable .)
    BIT_XOR         reduce using rule 65 (type -> variable .)
    BIT_AND         reduce using rule 65 (type -> variable .)
    AND_OP          reduce using rule 65 (type -> variable .)
    OR_OP           reduce using rule 65 (type -> variable .)
    EQUALS_OP       reduce using rule 65 (type -> variable .)
    NOT_EQUALS_OP   reduce using rule 65 (type -> variable .)
    GREATER_OP      reduce using rule 65 (type -> variable .)
    LESS_OP         reduce using rule 65 (type -> variable .)
    GREATER_EQUAL_OP reduce using rule 65 (type -> variable .)
    LESS_EQUAL_OP   reduce using rule 65 (type -> variable .)
    PLUS_OP         reduce using rule 65 (type -> variable .)
    MINUS_OP        reduce using rule 65 (type -> variable .)
    MULTIPLICATION_OP reduce using rule 65 (type -> variable .)
    DIVISION_OP     reduce using rule 65 (type -> variable .)
    MODULUS_OP      reduce using rule 65 (type -> variable .)
    EXPONENT_OP     reduce using rule 65 (type -> variable .)
    BIT_RIGHT_SHIFT reduce using rule 65 (type -> variable .)
    BIT_LEFT_SHIFT  reduce using rule 65 (type -> variable .)
    CONCATENATE     reduce using rule 65 (type -> variable .)
    REP_OP          reduce using rule 65 (type -> variable .)
    ASSOCIATE_OP    reduce using rule 65 (type -> variable .)
    RANGE_OP        reduce using rule 65 (type -> variable .)
    SEARCH_MODIFY   reduce using rule 65 (type -> variable .)
    SEARCH_MODIFY_NEG reduce using rule 65 (type -> variable .)
    SEMICOLON       reduce using rule 65 (type -> variable .)
    ADV_ASSIGNMENT_OP reduce using rule 65 (type -> variable .)
    ASSIGNMENT_OP   reduce using rule 65 (type -> variable .)
    BLOCK_BEGIN     reduce using rule 65 (type -> variable .)


state 34

    (9) statement -> returnStatement . Marker
    (89) Marker -> . empty
    (6) empty -> .

    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 91
    empty                          shift and go to state 40

state 35

    (39) lefthandside -> LOCAL . type decList
    (40) lefthandside -> LOCAL . OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    OPEN_PARANTHESIS shift and go to state 92
    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    variable                       shift and go to state 33
    type                           shift and go to state 93

state 36

    (66) type -> ARRAY .

    COMMA           reduce using rule 66 (type -> ARRAY .)
    CLOSE_PARANTHESIS reduce using rule 66 (type -> ARRAY .)
    OR_STR_OP       reduce using rule 66 (type -> ARRAY .)
    XOR_STR_OP      reduce using rule 66 (type -> ARRAY .)
    AND_STR_OP      reduce using rule 66 (type -> ARRAY .)
    NOT_STR_OP      reduce using rule 66 (type -> ARRAY .)
    COMPARE_OP      reduce using rule 66 (type -> ARRAY .)
    BIT_OR          reduce using rule 66 (type -> ARRAY .)
    BIT_XOR         reduce using rule 66 (type -> ARRAY .)
    BIT_AND         reduce using rule 66 (type -> ARRAY .)
    AND_OP          reduce using rule 66 (type -> ARRAY .)
    OR_OP           reduce using rule 66 (type -> ARRAY .)
    EQUALS_OP       reduce using rule 66 (type -> ARRAY .)
    NOT_EQUALS_OP   reduce using rule 66 (type -> ARRAY .)
    GREATER_OP      reduce using rule 66 (type -> ARRAY .)
    LESS_OP         reduce using rule 66 (type -> ARRAY .)
    GREATER_EQUAL_OP reduce using rule 66 (type -> ARRAY .)
    LESS_EQUAL_OP   reduce using rule 66 (type -> ARRAY .)
    PLUS_OP         reduce using rule 66 (type -> ARRAY .)
    MINUS_OP        reduce using rule 66 (type -> ARRAY .)
    MULTIPLICATION_OP reduce using rule 66 (type -> ARRAY .)
    DIVISION_OP     reduce using rule 66 (type -> ARRAY .)
    MODULUS_OP      reduce using rule 66 (type -> ARRAY .)
    EXPONENT_OP     reduce using rule 66 (type -> ARRAY .)
    BIT_RIGHT_SHIFT reduce using rule 66 (type -> ARRAY .)
    BIT_LEFT_SHIFT  reduce using rule 66 (type -> ARRAY .)
    CONCATENATE     reduce using rule 66 (type -> ARRAY .)
    REP_OP          reduce using rule 66 (type -> ARRAY .)
    ASSOCIATE_OP    reduce using rule 66 (type -> ARRAY .)
    RANGE_OP        reduce using rule 66 (type -> ARRAY .)
    SEARCH_MODIFY   reduce using rule 66 (type -> ARRAY .)
    SEARCH_MODIFY_NEG reduce using rule 66 (type -> ARRAY .)
    SEMICOLON       reduce using rule 66 (type -> ARRAY .)
    ADV_ASSIGNMENT_OP reduce using rule 66 (type -> ARRAY .)
    ASSIGNMENT_OP   reduce using rule 66 (type -> ARRAY .)
    BLOCK_BEGIN     reduce using rule 66 (type -> ARRAY .)


state 37

    (26) ifthen -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block
    (27) ifthenelse -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block

    OPEN_PARANTHESIS shift and go to state 94


state 38

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 39

    (12) statement -> forStatement Marker .

    RETURN          reduce using rule 12 (statement -> forStatement Marker .)
    IDENTIFIER      reduce using rule 12 (statement -> forStatement Marker .)
    WHILE           reduce using rule 12 (statement -> forStatement Marker .)
    FOR             reduce using rule 12 (statement -> forStatement Marker .)
    PRINT           reduce using rule 12 (statement -> forStatement Marker .)
    SUB             reduce using rule 12 (statement -> forStatement Marker .)
    LAST            reduce using rule 12 (statement -> forStatement Marker .)
    NEXT            reduce using rule 12 (statement -> forStatement Marker .)
    IF              reduce using rule 12 (statement -> forStatement Marker .)
    USE             reduce using rule 12 (statement -> forStatement Marker .)
    SWITCH          reduce using rule 12 (statement -> forStatement Marker .)
    PRIVATE         reduce using rule 12 (statement -> forStatement Marker .)
    LOCAL           reduce using rule 12 (statement -> forStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 12 (statement -> forStatement Marker .)
    ARRAY           reduce using rule 12 (statement -> forStatement Marker .)
    VARIABLE        reduce using rule 12 (statement -> forStatement Marker .)
    $end            reduce using rule 12 (statement -> forStatement Marker .)
    BLOCK_ENDS      reduce using rule 12 (statement -> forStatement Marker .)


state 40

    (89) Marker -> empty .

    RETURN          reduce using rule 89 (Marker -> empty .)
    IDENTIFIER      reduce using rule 89 (Marker -> empty .)
    WHILE           reduce using rule 89 (Marker -> empty .)
    FOR             reduce using rule 89 (Marker -> empty .)
    PRINT           reduce using rule 89 (Marker -> empty .)
    SUB             reduce using rule 89 (Marker -> empty .)
    LAST            reduce using rule 89 (Marker -> empty .)
    NEXT            reduce using rule 89 (Marker -> empty .)
    IF              reduce using rule 89 (Marker -> empty .)
    USE             reduce using rule 89 (Marker -> empty .)
    SWITCH          reduce using rule 89 (Marker -> empty .)
    PRIVATE         reduce using rule 89 (Marker -> empty .)
    LOCAL           reduce using rule 89 (Marker -> empty .)
    OPEN_PARANTHESIS reduce using rule 89 (Marker -> empty .)
    ARRAY           reduce using rule 89 (Marker -> empty .)
    VARIABLE        reduce using rule 89 (Marker -> empty .)
    $end            reduce using rule 89 (Marker -> empty .)
    BLOCK_ENDS      reduce using rule 89 (Marker -> empty .)
    PLUS_OP         reduce using rule 89 (Marker -> empty .)
    MINUS_OP        reduce using rule 89 (Marker -> empty .)
    BIT_FLIP        reduce using rule 89 (Marker -> empty .)
    NOT_OP          reduce using rule 89 (Marker -> empty .)
    NUMBER          reduce using rule 89 (Marker -> empty .)
    SCI_NOT         reduce using rule 89 (Marker -> empty .)
    FLOAT           reduce using rule 89 (Marker -> empty .)
    HEXADECIMAL     reduce using rule 89 (Marker -> empty .)
    OCTAL           reduce using rule 89 (Marker -> empty .)
    STRING          reduce using rule 89 (Marker -> empty .)
    RES_STRING      reduce using rule 89 (Marker -> empty .)
    OR_STR_OP       reduce using rule 89 (Marker -> empty .)
    XOR_STR_OP      reduce using rule 89 (Marker -> empty .)
    AND_STR_OP      reduce using rule 89 (Marker -> empty .)
    NOT_STR_OP      reduce using rule 89 (Marker -> empty .)
    COMPARE_OP      reduce using rule 89 (Marker -> empty .)
    BIT_OR          reduce using rule 89 (Marker -> empty .)
    BIT_XOR         reduce using rule 89 (Marker -> empty .)
    BIT_AND         reduce using rule 89 (Marker -> empty .)
    AND_OP          reduce using rule 89 (Marker -> empty .)
    OR_OP           reduce using rule 89 (Marker -> empty .)
    EQUALS_OP       reduce using rule 89 (Marker -> empty .)
    NOT_EQUALS_OP   reduce using rule 89 (Marker -> empty .)
    GREATER_OP      reduce using rule 89 (Marker -> empty .)
    LESS_OP         reduce using rule 89 (Marker -> empty .)
    GREATER_EQUAL_OP reduce using rule 89 (Marker -> empty .)
    LESS_EQUAL_OP   reduce using rule 89 (Marker -> empty .)
    MULTIPLICATION_OP reduce using rule 89 (Marker -> empty .)
    DIVISION_OP     reduce using rule 89 (Marker -> empty .)
    MODULUS_OP      reduce using rule 89 (Marker -> empty .)
    EXPONENT_OP     reduce using rule 89 (Marker -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 89 (Marker -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 89 (Marker -> empty .)
    CONCATENATE     reduce using rule 89 (Marker -> empty .)
    REP_OP          reduce using rule 89 (Marker -> empty .)
    COMMA           reduce using rule 89 (Marker -> empty .)
    ASSOCIATE_OP    reduce using rule 89 (Marker -> empty .)
    RANGE_OP        reduce using rule 89 (Marker -> empty .)
    SEARCH_MODIFY   reduce using rule 89 (Marker -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 89 (Marker -> empty .)
    SEMICOLON       reduce using rule 89 (Marker -> empty .)
    CLOSE_PARANTHESIS reduce using rule 89 (Marker -> empty .)


state 41

    (21) useStatement -> USE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 95


state 42

    (41) lefthandside -> OPEN_PARANTHESIS type . decList CLOSE_PARANTHESIS
    (44) decList -> . COMMA type decList
    (45) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 97
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    empty                          shift and go to state 98
    decList                        shift and go to state 96

state 43

    (14) statement -> functionStatement Marker .

    RETURN          reduce using rule 14 (statement -> functionStatement Marker .)
    IDENTIFIER      reduce using rule 14 (statement -> functionStatement Marker .)
    WHILE           reduce using rule 14 (statement -> functionStatement Marker .)
    FOR             reduce using rule 14 (statement -> functionStatement Marker .)
    PRINT           reduce using rule 14 (statement -> functionStatement Marker .)
    SUB             reduce using rule 14 (statement -> functionStatement Marker .)
    LAST            reduce using rule 14 (statement -> functionStatement Marker .)
    NEXT            reduce using rule 14 (statement -> functionStatement Marker .)
    IF              reduce using rule 14 (statement -> functionStatement Marker .)
    USE             reduce using rule 14 (statement -> functionStatement Marker .)
    SWITCH          reduce using rule 14 (statement -> functionStatement Marker .)
    PRIVATE         reduce using rule 14 (statement -> functionStatement Marker .)
    LOCAL           reduce using rule 14 (statement -> functionStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 14 (statement -> functionStatement Marker .)
    ARRAY           reduce using rule 14 (statement -> functionStatement Marker .)
    VARIABLE        reduce using rule 14 (statement -> functionStatement Marker .)
    $end            reduce using rule 14 (statement -> functionStatement Marker .)
    BLOCK_ENDS      reduce using rule 14 (statement -> functionStatement Marker .)


state 44

    (20) statement -> switchStatement Marker .

    RETURN          reduce using rule 20 (statement -> switchStatement Marker .)
    IDENTIFIER      reduce using rule 20 (statement -> switchStatement Marker .)
    WHILE           reduce using rule 20 (statement -> switchStatement Marker .)
    FOR             reduce using rule 20 (statement -> switchStatement Marker .)
    PRINT           reduce using rule 20 (statement -> switchStatement Marker .)
    SUB             reduce using rule 20 (statement -> switchStatement Marker .)
    LAST            reduce using rule 20 (statement -> switchStatement Marker .)
    NEXT            reduce using rule 20 (statement -> switchStatement Marker .)
    IF              reduce using rule 20 (statement -> switchStatement Marker .)
    USE             reduce using rule 20 (statement -> switchStatement Marker .)
    SWITCH          reduce using rule 20 (statement -> switchStatement Marker .)
    PRIVATE         reduce using rule 20 (statement -> switchStatement Marker .)
    LOCAL           reduce using rule 20 (statement -> switchStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 20 (statement -> switchStatement Marker .)
    ARRAY           reduce using rule 20 (statement -> switchStatement Marker .)
    VARIABLE        reduce using rule 20 (statement -> switchStatement Marker .)
    $end            reduce using rule 20 (statement -> switchStatement Marker .)
    BLOCK_ENDS      reduce using rule 20 (statement -> switchStatement Marker .)


state 45

    (3) block -> BLOCK_BEGIN statements . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 99


state 46

    (60) variable -> VARIABLE OPEN_BRACKET . NUMBER CLOSE_BRACKET

    NUMBER          shift and go to state 100


state 47

    (50) whileStatement -> WHILE OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS block
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 101
    empty                          shift and go to state 57

state 48

    (31) printStatement -> PRINT OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS SEMICOLON
    (64) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 102
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 49

    (68) expression -> MINUS_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 103
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 50

    (61) term -> number .

    OR_STR_OP       reduce using rule 61 (term -> number .)
    XOR_STR_OP      reduce using rule 61 (term -> number .)
    AND_STR_OP      reduce using rule 61 (term -> number .)
    NOT_STR_OP      reduce using rule 61 (term -> number .)
    COMPARE_OP      reduce using rule 61 (term -> number .)
    BIT_OR          reduce using rule 61 (term -> number .)
    BIT_XOR         reduce using rule 61 (term -> number .)
    BIT_AND         reduce using rule 61 (term -> number .)
    AND_OP          reduce using rule 61 (term -> number .)
    OR_OP           reduce using rule 61 (term -> number .)
    EQUALS_OP       reduce using rule 61 (term -> number .)
    NOT_EQUALS_OP   reduce using rule 61 (term -> number .)
    GREATER_OP      reduce using rule 61 (term -> number .)
    LESS_OP         reduce using rule 61 (term -> number .)
    GREATER_EQUAL_OP reduce using rule 61 (term -> number .)
    LESS_EQUAL_OP   reduce using rule 61 (term -> number .)
    PLUS_OP         reduce using rule 61 (term -> number .)
    MINUS_OP        reduce using rule 61 (term -> number .)
    MULTIPLICATION_OP reduce using rule 61 (term -> number .)
    DIVISION_OP     reduce using rule 61 (term -> number .)
    MODULUS_OP      reduce using rule 61 (term -> number .)
    EXPONENT_OP     reduce using rule 61 (term -> number .)
    BIT_RIGHT_SHIFT reduce using rule 61 (term -> number .)
    BIT_LEFT_SHIFT  reduce using rule 61 (term -> number .)
    CONCATENATE     reduce using rule 61 (term -> number .)
    REP_OP          reduce using rule 61 (term -> number .)
    COMMA           reduce using rule 61 (term -> number .)
    ASSOCIATE_OP    reduce using rule 61 (term -> number .)
    RANGE_OP        reduce using rule 61 (term -> number .)
    SEARCH_MODIFY   reduce using rule 61 (term -> number .)
    SEARCH_MODIFY_NEG reduce using rule 61 (term -> number .)
    SEMICOLON       reduce using rule 61 (term -> number .)
    CLOSE_PARANTHESIS reduce using rule 61 (term -> number .)


state 51

    (52) string -> STRING .

    OR_STR_OP       reduce using rule 52 (string -> STRING .)
    XOR_STR_OP      reduce using rule 52 (string -> STRING .)
    AND_STR_OP      reduce using rule 52 (string -> STRING .)
    NOT_STR_OP      reduce using rule 52 (string -> STRING .)
    COMPARE_OP      reduce using rule 52 (string -> STRING .)
    BIT_OR          reduce using rule 52 (string -> STRING .)
    BIT_XOR         reduce using rule 52 (string -> STRING .)
    BIT_AND         reduce using rule 52 (string -> STRING .)
    AND_OP          reduce using rule 52 (string -> STRING .)
    OR_OP           reduce using rule 52 (string -> STRING .)
    EQUALS_OP       reduce using rule 52 (string -> STRING .)
    NOT_EQUALS_OP   reduce using rule 52 (string -> STRING .)
    GREATER_OP      reduce using rule 52 (string -> STRING .)
    LESS_OP         reduce using rule 52 (string -> STRING .)
    GREATER_EQUAL_OP reduce using rule 52 (string -> STRING .)
    LESS_EQUAL_OP   reduce using rule 52 (string -> STRING .)
    PLUS_OP         reduce using rule 52 (string -> STRING .)
    MINUS_OP        reduce using rule 52 (string -> STRING .)
    MULTIPLICATION_OP reduce using rule 52 (string -> STRING .)
    DIVISION_OP     reduce using rule 52 (string -> STRING .)
    MODULUS_OP      reduce using rule 52 (string -> STRING .)
    EXPONENT_OP     reduce using rule 52 (string -> STRING .)
    BIT_RIGHT_SHIFT reduce using rule 52 (string -> STRING .)
    BIT_LEFT_SHIFT  reduce using rule 52 (string -> STRING .)
    CONCATENATE     reduce using rule 52 (string -> STRING .)
    REP_OP          reduce using rule 52 (string -> STRING .)
    COMMA           reduce using rule 52 (string -> STRING .)
    ASSOCIATE_OP    reduce using rule 52 (string -> STRING .)
    RANGE_OP        reduce using rule 52 (string -> STRING .)
    SEARCH_MODIFY   reduce using rule 52 (string -> STRING .)
    SEARCH_MODIFY_NEG reduce using rule 52 (string -> STRING .)
    SEMICOLON       reduce using rule 52 (string -> STRING .)
    CLOSE_PARANTHESIS reduce using rule 52 (string -> STRING .)


state 52

    (70) expression -> NOT_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 104
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 53

    (57) number -> HEXADECIMAL .

    OR_STR_OP       reduce using rule 57 (number -> HEXADECIMAL .)
    XOR_STR_OP      reduce using rule 57 (number -> HEXADECIMAL .)
    AND_STR_OP      reduce using rule 57 (number -> HEXADECIMAL .)
    NOT_STR_OP      reduce using rule 57 (number -> HEXADECIMAL .)
    COMPARE_OP      reduce using rule 57 (number -> HEXADECIMAL .)
    BIT_OR          reduce using rule 57 (number -> HEXADECIMAL .)
    BIT_XOR         reduce using rule 57 (number -> HEXADECIMAL .)
    BIT_AND         reduce using rule 57 (number -> HEXADECIMAL .)
    AND_OP          reduce using rule 57 (number -> HEXADECIMAL .)
    OR_OP           reduce using rule 57 (number -> HEXADECIMAL .)
    EQUALS_OP       reduce using rule 57 (number -> HEXADECIMAL .)
    NOT_EQUALS_OP   reduce using rule 57 (number -> HEXADECIMAL .)
    GREATER_OP      reduce using rule 57 (number -> HEXADECIMAL .)
    LESS_OP         reduce using rule 57 (number -> HEXADECIMAL .)
    GREATER_EQUAL_OP reduce using rule 57 (number -> HEXADECIMAL .)
    LESS_EQUAL_OP   reduce using rule 57 (number -> HEXADECIMAL .)
    PLUS_OP         reduce using rule 57 (number -> HEXADECIMAL .)
    MINUS_OP        reduce using rule 57 (number -> HEXADECIMAL .)
    MULTIPLICATION_OP reduce using rule 57 (number -> HEXADECIMAL .)
    DIVISION_OP     reduce using rule 57 (number -> HEXADECIMAL .)
    MODULUS_OP      reduce using rule 57 (number -> HEXADECIMAL .)
    EXPONENT_OP     reduce using rule 57 (number -> HEXADECIMAL .)
    BIT_RIGHT_SHIFT reduce using rule 57 (number -> HEXADECIMAL .)
    BIT_LEFT_SHIFT  reduce using rule 57 (number -> HEXADECIMAL .)
    CONCATENATE     reduce using rule 57 (number -> HEXADECIMAL .)
    REP_OP          reduce using rule 57 (number -> HEXADECIMAL .)
    COMMA           reduce using rule 57 (number -> HEXADECIMAL .)
    ASSOCIATE_OP    reduce using rule 57 (number -> HEXADECIMAL .)
    RANGE_OP        reduce using rule 57 (number -> HEXADECIMAL .)
    SEARCH_MODIFY   reduce using rule 57 (number -> HEXADECIMAL .)
    SEARCH_MODIFY_NEG reduce using rule 57 (number -> HEXADECIMAL .)
    SEMICOLON       reduce using rule 57 (number -> HEXADECIMAL .)
    CLOSE_PARANTHESIS reduce using rule 57 (number -> HEXADECIMAL .)


state 54

    (63) term -> string .

    OR_STR_OP       reduce using rule 63 (term -> string .)
    XOR_STR_OP      reduce using rule 63 (term -> string .)
    AND_STR_OP      reduce using rule 63 (term -> string .)
    NOT_STR_OP      reduce using rule 63 (term -> string .)
    COMPARE_OP      reduce using rule 63 (term -> string .)
    BIT_OR          reduce using rule 63 (term -> string .)
    BIT_XOR         reduce using rule 63 (term -> string .)
    BIT_AND         reduce using rule 63 (term -> string .)
    AND_OP          reduce using rule 63 (term -> string .)
    OR_OP           reduce using rule 63 (term -> string .)
    EQUALS_OP       reduce using rule 63 (term -> string .)
    NOT_EQUALS_OP   reduce using rule 63 (term -> string .)
    GREATER_OP      reduce using rule 63 (term -> string .)
    LESS_OP         reduce using rule 63 (term -> string .)
    GREATER_EQUAL_OP reduce using rule 63 (term -> string .)
    LESS_EQUAL_OP   reduce using rule 63 (term -> string .)
    PLUS_OP         reduce using rule 63 (term -> string .)
    MINUS_OP        reduce using rule 63 (term -> string .)
    MULTIPLICATION_OP reduce using rule 63 (term -> string .)
    DIVISION_OP     reduce using rule 63 (term -> string .)
    MODULUS_OP      reduce using rule 63 (term -> string .)
    EXPONENT_OP     reduce using rule 63 (term -> string .)
    BIT_RIGHT_SHIFT reduce using rule 63 (term -> string .)
    BIT_LEFT_SHIFT  reduce using rule 63 (term -> string .)
    CONCATENATE     reduce using rule 63 (term -> string .)
    REP_OP          reduce using rule 63 (term -> string .)
    COMMA           reduce using rule 63 (term -> string .)
    ASSOCIATE_OP    reduce using rule 63 (term -> string .)
    RANGE_OP        reduce using rule 63 (term -> string .)
    SEARCH_MODIFY   reduce using rule 63 (term -> string .)
    SEARCH_MODIFY_NEG reduce using rule 63 (term -> string .)
    SEMICOLON       reduce using rule 63 (term -> string .)
    CLOSE_PARANTHESIS reduce using rule 63 (term -> string .)


state 55

    (69) expression -> BIT_FLIP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 105
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 56

    (62) term -> type .

    OR_STR_OP       reduce using rule 62 (term -> type .)
    XOR_STR_OP      reduce using rule 62 (term -> type .)
    AND_STR_OP      reduce using rule 62 (term -> type .)
    NOT_STR_OP      reduce using rule 62 (term -> type .)
    COMPARE_OP      reduce using rule 62 (term -> type .)
    BIT_OR          reduce using rule 62 (term -> type .)
    BIT_XOR         reduce using rule 62 (term -> type .)
    BIT_AND         reduce using rule 62 (term -> type .)
    AND_OP          reduce using rule 62 (term -> type .)
    OR_OP           reduce using rule 62 (term -> type .)
    EQUALS_OP       reduce using rule 62 (term -> type .)
    NOT_EQUALS_OP   reduce using rule 62 (term -> type .)
    GREATER_OP      reduce using rule 62 (term -> type .)
    LESS_OP         reduce using rule 62 (term -> type .)
    GREATER_EQUAL_OP reduce using rule 62 (term -> type .)
    LESS_EQUAL_OP   reduce using rule 62 (term -> type .)
    PLUS_OP         reduce using rule 62 (term -> type .)
    MINUS_OP        reduce using rule 62 (term -> type .)
    MULTIPLICATION_OP reduce using rule 62 (term -> type .)
    DIVISION_OP     reduce using rule 62 (term -> type .)
    MODULUS_OP      reduce using rule 62 (term -> type .)
    EXPONENT_OP     reduce using rule 62 (term -> type .)
    BIT_RIGHT_SHIFT reduce using rule 62 (term -> type .)
    BIT_LEFT_SHIFT  reduce using rule 62 (term -> type .)
    CONCATENATE     reduce using rule 62 (term -> type .)
    REP_OP          reduce using rule 62 (term -> type .)
    COMMA           reduce using rule 62 (term -> type .)
    ASSOCIATE_OP    reduce using rule 62 (term -> type .)
    RANGE_OP        reduce using rule 62 (term -> type .)
    SEARCH_MODIFY   reduce using rule 62 (term -> type .)
    SEARCH_MODIFY_NEG reduce using rule 62 (term -> type .)
    SEMICOLON       reduce using rule 62 (term -> type .)
    CLOSE_PARANTHESIS reduce using rule 62 (term -> type .)


state 57

    (71) expression -> empty .

    OR_STR_OP       reduce using rule 71 (expression -> empty .)
    XOR_STR_OP      reduce using rule 71 (expression -> empty .)
    AND_STR_OP      reduce using rule 71 (expression -> empty .)
    NOT_STR_OP      reduce using rule 71 (expression -> empty .)
    COMPARE_OP      reduce using rule 71 (expression -> empty .)
    BIT_OR          reduce using rule 71 (expression -> empty .)
    BIT_XOR         reduce using rule 71 (expression -> empty .)
    BIT_AND         reduce using rule 71 (expression -> empty .)
    AND_OP          reduce using rule 71 (expression -> empty .)
    OR_OP           reduce using rule 71 (expression -> empty .)
    EQUALS_OP       reduce using rule 71 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 71 (expression -> empty .)
    GREATER_OP      reduce using rule 71 (expression -> empty .)
    LESS_OP         reduce using rule 71 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 71 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 71 (expression -> empty .)
    PLUS_OP         reduce using rule 71 (expression -> empty .)
    MINUS_OP        reduce using rule 71 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 71 (expression -> empty .)
    DIVISION_OP     reduce using rule 71 (expression -> empty .)
    MODULUS_OP      reduce using rule 71 (expression -> empty .)
    EXPONENT_OP     reduce using rule 71 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 71 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 71 (expression -> empty .)
    CONCATENATE     reduce using rule 71 (expression -> empty .)
    REP_OP          reduce using rule 71 (expression -> empty .)
    COMMA           reduce using rule 71 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 71 (expression -> empty .)
    RANGE_OP        reduce using rule 71 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 71 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 71 (expression -> empty .)
    SEMICOLON       reduce using rule 71 (expression -> empty .)
    CLOSE_PARANTHESIS reduce using rule 71 (expression -> empty .)


state 58

    (53) string -> RES_STRING .

    OR_STR_OP       reduce using rule 53 (string -> RES_STRING .)
    XOR_STR_OP      reduce using rule 53 (string -> RES_STRING .)
    AND_STR_OP      reduce using rule 53 (string -> RES_STRING .)
    NOT_STR_OP      reduce using rule 53 (string -> RES_STRING .)
    COMPARE_OP      reduce using rule 53 (string -> RES_STRING .)
    BIT_OR          reduce using rule 53 (string -> RES_STRING .)
    BIT_XOR         reduce using rule 53 (string -> RES_STRING .)
    BIT_AND         reduce using rule 53 (string -> RES_STRING .)
    AND_OP          reduce using rule 53 (string -> RES_STRING .)
    OR_OP           reduce using rule 53 (string -> RES_STRING .)
    EQUALS_OP       reduce using rule 53 (string -> RES_STRING .)
    NOT_EQUALS_OP   reduce using rule 53 (string -> RES_STRING .)
    GREATER_OP      reduce using rule 53 (string -> RES_STRING .)
    LESS_OP         reduce using rule 53 (string -> RES_STRING .)
    GREATER_EQUAL_OP reduce using rule 53 (string -> RES_STRING .)
    LESS_EQUAL_OP   reduce using rule 53 (string -> RES_STRING .)
    PLUS_OP         reduce using rule 53 (string -> RES_STRING .)
    MINUS_OP        reduce using rule 53 (string -> RES_STRING .)
    MULTIPLICATION_OP reduce using rule 53 (string -> RES_STRING .)
    DIVISION_OP     reduce using rule 53 (string -> RES_STRING .)
    MODULUS_OP      reduce using rule 53 (string -> RES_STRING .)
    EXPONENT_OP     reduce using rule 53 (string -> RES_STRING .)
    BIT_RIGHT_SHIFT reduce using rule 53 (string -> RES_STRING .)
    BIT_LEFT_SHIFT  reduce using rule 53 (string -> RES_STRING .)
    CONCATENATE     reduce using rule 53 (string -> RES_STRING .)
    REP_OP          reduce using rule 53 (string -> RES_STRING .)
    COMMA           reduce using rule 53 (string -> RES_STRING .)
    ASSOCIATE_OP    reduce using rule 53 (string -> RES_STRING .)
    RANGE_OP        reduce using rule 53 (string -> RES_STRING .)
    SEARCH_MODIFY   reduce using rule 53 (string -> RES_STRING .)
    SEARCH_MODIFY_NEG reduce using rule 53 (string -> RES_STRING .)
    SEMICOLON       reduce using rule 53 (string -> RES_STRING .)
    CLOSE_PARANTHESIS reduce using rule 53 (string -> RES_STRING .)


state 59

    (54) number -> NUMBER .

    OR_STR_OP       reduce using rule 54 (number -> NUMBER .)
    XOR_STR_OP      reduce using rule 54 (number -> NUMBER .)
    AND_STR_OP      reduce using rule 54 (number -> NUMBER .)
    NOT_STR_OP      reduce using rule 54 (number -> NUMBER .)
    COMPARE_OP      reduce using rule 54 (number -> NUMBER .)
    BIT_OR          reduce using rule 54 (number -> NUMBER .)
    BIT_XOR         reduce using rule 54 (number -> NUMBER .)
    BIT_AND         reduce using rule 54 (number -> NUMBER .)
    AND_OP          reduce using rule 54 (number -> NUMBER .)
    OR_OP           reduce using rule 54 (number -> NUMBER .)
    EQUALS_OP       reduce using rule 54 (number -> NUMBER .)
    NOT_EQUALS_OP   reduce using rule 54 (number -> NUMBER .)
    GREATER_OP      reduce using rule 54 (number -> NUMBER .)
    LESS_OP         reduce using rule 54 (number -> NUMBER .)
    GREATER_EQUAL_OP reduce using rule 54 (number -> NUMBER .)
    LESS_EQUAL_OP   reduce using rule 54 (number -> NUMBER .)
    PLUS_OP         reduce using rule 54 (number -> NUMBER .)
    MINUS_OP        reduce using rule 54 (number -> NUMBER .)
    MULTIPLICATION_OP reduce using rule 54 (number -> NUMBER .)
    DIVISION_OP     reduce using rule 54 (number -> NUMBER .)
    MODULUS_OP      reduce using rule 54 (number -> NUMBER .)
    EXPONENT_OP     reduce using rule 54 (number -> NUMBER .)
    BIT_RIGHT_SHIFT reduce using rule 54 (number -> NUMBER .)
    BIT_LEFT_SHIFT  reduce using rule 54 (number -> NUMBER .)
    CONCATENATE     reduce using rule 54 (number -> NUMBER .)
    REP_OP          reduce using rule 54 (number -> NUMBER .)
    COMMA           reduce using rule 54 (number -> NUMBER .)
    ASSOCIATE_OP    reduce using rule 54 (number -> NUMBER .)
    RANGE_OP        reduce using rule 54 (number -> NUMBER .)
    SEARCH_MODIFY   reduce using rule 54 (number -> NUMBER .)
    SEARCH_MODIFY_NEG reduce using rule 54 (number -> NUMBER .)
    SEMICOLON       reduce using rule 54 (number -> NUMBER .)
    CLOSE_PARANTHESIS reduce using rule 54 (number -> NUMBER .)


state 60

    (55) number -> SCI_NOT .

    OR_STR_OP       reduce using rule 55 (number -> SCI_NOT .)
    XOR_STR_OP      reduce using rule 55 (number -> SCI_NOT .)
    AND_STR_OP      reduce using rule 55 (number -> SCI_NOT .)
    NOT_STR_OP      reduce using rule 55 (number -> SCI_NOT .)
    COMPARE_OP      reduce using rule 55 (number -> SCI_NOT .)
    BIT_OR          reduce using rule 55 (number -> SCI_NOT .)
    BIT_XOR         reduce using rule 55 (number -> SCI_NOT .)
    BIT_AND         reduce using rule 55 (number -> SCI_NOT .)
    AND_OP          reduce using rule 55 (number -> SCI_NOT .)
    OR_OP           reduce using rule 55 (number -> SCI_NOT .)
    EQUALS_OP       reduce using rule 55 (number -> SCI_NOT .)
    NOT_EQUALS_OP   reduce using rule 55 (number -> SCI_NOT .)
    GREATER_OP      reduce using rule 55 (number -> SCI_NOT .)
    LESS_OP         reduce using rule 55 (number -> SCI_NOT .)
    GREATER_EQUAL_OP reduce using rule 55 (number -> SCI_NOT .)
    LESS_EQUAL_OP   reduce using rule 55 (number -> SCI_NOT .)
    PLUS_OP         reduce using rule 55 (number -> SCI_NOT .)
    MINUS_OP        reduce using rule 55 (number -> SCI_NOT .)
    MULTIPLICATION_OP reduce using rule 55 (number -> SCI_NOT .)
    DIVISION_OP     reduce using rule 55 (number -> SCI_NOT .)
    MODULUS_OP      reduce using rule 55 (number -> SCI_NOT .)
    EXPONENT_OP     reduce using rule 55 (number -> SCI_NOT .)
    BIT_RIGHT_SHIFT reduce using rule 55 (number -> SCI_NOT .)
    BIT_LEFT_SHIFT  reduce using rule 55 (number -> SCI_NOT .)
    CONCATENATE     reduce using rule 55 (number -> SCI_NOT .)
    REP_OP          reduce using rule 55 (number -> SCI_NOT .)
    COMMA           reduce using rule 55 (number -> SCI_NOT .)
    ASSOCIATE_OP    reduce using rule 55 (number -> SCI_NOT .)
    RANGE_OP        reduce using rule 55 (number -> SCI_NOT .)
    SEARCH_MODIFY   reduce using rule 55 (number -> SCI_NOT .)
    SEARCH_MODIFY_NEG reduce using rule 55 (number -> SCI_NOT .)
    SEMICOLON       reduce using rule 55 (number -> SCI_NOT .)
    CLOSE_PARANTHESIS reduce using rule 55 (number -> SCI_NOT .)


state 61

    (58) number -> OCTAL .

    OR_STR_OP       reduce using rule 58 (number -> OCTAL .)
    XOR_STR_OP      reduce using rule 58 (number -> OCTAL .)
    AND_STR_OP      reduce using rule 58 (number -> OCTAL .)
    NOT_STR_OP      reduce using rule 58 (number -> OCTAL .)
    COMPARE_OP      reduce using rule 58 (number -> OCTAL .)
    BIT_OR          reduce using rule 58 (number -> OCTAL .)
    BIT_XOR         reduce using rule 58 (number -> OCTAL .)
    BIT_AND         reduce using rule 58 (number -> OCTAL .)
    AND_OP          reduce using rule 58 (number -> OCTAL .)
    OR_OP           reduce using rule 58 (number -> OCTAL .)
    EQUALS_OP       reduce using rule 58 (number -> OCTAL .)
    NOT_EQUALS_OP   reduce using rule 58 (number -> OCTAL .)
    GREATER_OP      reduce using rule 58 (number -> OCTAL .)
    LESS_OP         reduce using rule 58 (number -> OCTAL .)
    GREATER_EQUAL_OP reduce using rule 58 (number -> OCTAL .)
    LESS_EQUAL_OP   reduce using rule 58 (number -> OCTAL .)
    PLUS_OP         reduce using rule 58 (number -> OCTAL .)
    MINUS_OP        reduce using rule 58 (number -> OCTAL .)
    MULTIPLICATION_OP reduce using rule 58 (number -> OCTAL .)
    DIVISION_OP     reduce using rule 58 (number -> OCTAL .)
    MODULUS_OP      reduce using rule 58 (number -> OCTAL .)
    EXPONENT_OP     reduce using rule 58 (number -> OCTAL .)
    BIT_RIGHT_SHIFT reduce using rule 58 (number -> OCTAL .)
    BIT_LEFT_SHIFT  reduce using rule 58 (number -> OCTAL .)
    CONCATENATE     reduce using rule 58 (number -> OCTAL .)
    REP_OP          reduce using rule 58 (number -> OCTAL .)
    COMMA           reduce using rule 58 (number -> OCTAL .)
    ASSOCIATE_OP    reduce using rule 58 (number -> OCTAL .)
    RANGE_OP        reduce using rule 58 (number -> OCTAL .)
    SEARCH_MODIFY   reduce using rule 58 (number -> OCTAL .)
    SEARCH_MODIFY_NEG reduce using rule 58 (number -> OCTAL .)
    SEMICOLON       reduce using rule 58 (number -> OCTAL .)
    CLOSE_PARANTHESIS reduce using rule 58 (number -> OCTAL .)


state 62

    (72) expression -> term .

    OR_STR_OP       reduce using rule 72 (expression -> term .)
    XOR_STR_OP      reduce using rule 72 (expression -> term .)
    AND_STR_OP      reduce using rule 72 (expression -> term .)
    NOT_STR_OP      reduce using rule 72 (expression -> term .)
    COMPARE_OP      reduce using rule 72 (expression -> term .)
    BIT_OR          reduce using rule 72 (expression -> term .)
    BIT_XOR         reduce using rule 72 (expression -> term .)
    BIT_AND         reduce using rule 72 (expression -> term .)
    AND_OP          reduce using rule 72 (expression -> term .)
    OR_OP           reduce using rule 72 (expression -> term .)
    EQUALS_OP       reduce using rule 72 (expression -> term .)
    NOT_EQUALS_OP   reduce using rule 72 (expression -> term .)
    GREATER_OP      reduce using rule 72 (expression -> term .)
    LESS_OP         reduce using rule 72 (expression -> term .)
    GREATER_EQUAL_OP reduce using rule 72 (expression -> term .)
    LESS_EQUAL_OP   reduce using rule 72 (expression -> term .)
    PLUS_OP         reduce using rule 72 (expression -> term .)
    MINUS_OP        reduce using rule 72 (expression -> term .)
    MULTIPLICATION_OP reduce using rule 72 (expression -> term .)
    DIVISION_OP     reduce using rule 72 (expression -> term .)
    MODULUS_OP      reduce using rule 72 (expression -> term .)
    EXPONENT_OP     reduce using rule 72 (expression -> term .)
    BIT_RIGHT_SHIFT reduce using rule 72 (expression -> term .)
    BIT_LEFT_SHIFT  reduce using rule 72 (expression -> term .)
    CONCATENATE     reduce using rule 72 (expression -> term .)
    REP_OP          reduce using rule 72 (expression -> term .)
    COMMA           reduce using rule 72 (expression -> term .)
    ASSOCIATE_OP    reduce using rule 72 (expression -> term .)
    RANGE_OP        reduce using rule 72 (expression -> term .)
    SEARCH_MODIFY   reduce using rule 72 (expression -> term .)
    SEARCH_MODIFY_NEG reduce using rule 72 (expression -> term .)
    SEMICOLON       reduce using rule 72 (expression -> term .)
    CLOSE_PARANTHESIS reduce using rule 72 (expression -> term .)


state 63

    (56) number -> FLOAT .

    OR_STR_OP       reduce using rule 56 (number -> FLOAT .)
    XOR_STR_OP      reduce using rule 56 (number -> FLOAT .)
    AND_STR_OP      reduce using rule 56 (number -> FLOAT .)
    NOT_STR_OP      reduce using rule 56 (number -> FLOAT .)
    COMPARE_OP      reduce using rule 56 (number -> FLOAT .)
    BIT_OR          reduce using rule 56 (number -> FLOAT .)
    BIT_XOR         reduce using rule 56 (number -> FLOAT .)
    BIT_AND         reduce using rule 56 (number -> FLOAT .)
    AND_OP          reduce using rule 56 (number -> FLOAT .)
    OR_OP           reduce using rule 56 (number -> FLOAT .)
    EQUALS_OP       reduce using rule 56 (number -> FLOAT .)
    NOT_EQUALS_OP   reduce using rule 56 (number -> FLOAT .)
    GREATER_OP      reduce using rule 56 (number -> FLOAT .)
    LESS_OP         reduce using rule 56 (number -> FLOAT .)
    GREATER_EQUAL_OP reduce using rule 56 (number -> FLOAT .)
    LESS_EQUAL_OP   reduce using rule 56 (number -> FLOAT .)
    PLUS_OP         reduce using rule 56 (number -> FLOAT .)
    MINUS_OP        reduce using rule 56 (number -> FLOAT .)
    MULTIPLICATION_OP reduce using rule 56 (number -> FLOAT .)
    DIVISION_OP     reduce using rule 56 (number -> FLOAT .)
    MODULUS_OP      reduce using rule 56 (number -> FLOAT .)
    EXPONENT_OP     reduce using rule 56 (number -> FLOAT .)
    BIT_RIGHT_SHIFT reduce using rule 56 (number -> FLOAT .)
    BIT_LEFT_SHIFT  reduce using rule 56 (number -> FLOAT .)
    CONCATENATE     reduce using rule 56 (number -> FLOAT .)
    REP_OP          reduce using rule 56 (number -> FLOAT .)
    COMMA           reduce using rule 56 (number -> FLOAT .)
    ASSOCIATE_OP    reduce using rule 56 (number -> FLOAT .)
    RANGE_OP        reduce using rule 56 (number -> FLOAT .)
    SEARCH_MODIFY   reduce using rule 56 (number -> FLOAT .)
    SEARCH_MODIFY_NEG reduce using rule 56 (number -> FLOAT .)
    SEMICOLON       reduce using rule 56 (number -> FLOAT .)
    CLOSE_PARANTHESIS reduce using rule 56 (number -> FLOAT .)


state 64

    (67) expression -> PLUS_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 106
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 65

    (32) printStatement -> PRINT expression . SEMICOLON
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 118
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 66

    (64) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 139
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 67

    (33) returnStatement -> RETURN expression . SEMICOLON
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 140
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 68

    (17) statement -> ifthen Marker .

    RETURN          reduce using rule 17 (statement -> ifthen Marker .)
    IDENTIFIER      reduce using rule 17 (statement -> ifthen Marker .)
    WHILE           reduce using rule 17 (statement -> ifthen Marker .)
    FOR             reduce using rule 17 (statement -> ifthen Marker .)
    PRINT           reduce using rule 17 (statement -> ifthen Marker .)
    SUB             reduce using rule 17 (statement -> ifthen Marker .)
    LAST            reduce using rule 17 (statement -> ifthen Marker .)
    NEXT            reduce using rule 17 (statement -> ifthen Marker .)
    IF              reduce using rule 17 (statement -> ifthen Marker .)
    USE             reduce using rule 17 (statement -> ifthen Marker .)
    SWITCH          reduce using rule 17 (statement -> ifthen Marker .)
    PRIVATE         reduce using rule 17 (statement -> ifthen Marker .)
    LOCAL           reduce using rule 17 (statement -> ifthen Marker .)
    OPEN_PARANTHESIS reduce using rule 17 (statement -> ifthen Marker .)
    ARRAY           reduce using rule 17 (statement -> ifthen Marker .)
    VARIABLE        reduce using rule 17 (statement -> ifthen Marker .)
    $end            reduce using rule 17 (statement -> ifthen Marker .)
    BLOCK_ENDS      reduce using rule 17 (statement -> ifthen Marker .)


state 69

    (30) functionStatement -> SUB IDENTIFIER . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 141

state 70

    (28) lastStatement -> LAST SEMICOLON .

    RETURN          reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    WHILE           reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    FOR             reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    PRINT           reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    SUB             reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    LAST            reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    NEXT            reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    IF              reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    USE             reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    SWITCH          reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    PRIVATE         reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    LOCAL           reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    ARRAY           reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    VARIABLE        reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    $end            reduce using rule 28 (lastStatement -> LAST SEMICOLON .)
    BLOCK_ENDS      reduce using rule 28 (lastStatement -> LAST SEMICOLON .)


state 71

    (16) statement -> nextStatement Marker .

    RETURN          reduce using rule 16 (statement -> nextStatement Marker .)
    IDENTIFIER      reduce using rule 16 (statement -> nextStatement Marker .)
    WHILE           reduce using rule 16 (statement -> nextStatement Marker .)
    FOR             reduce using rule 16 (statement -> nextStatement Marker .)
    PRINT           reduce using rule 16 (statement -> nextStatement Marker .)
    SUB             reduce using rule 16 (statement -> nextStatement Marker .)
    LAST            reduce using rule 16 (statement -> nextStatement Marker .)
    NEXT            reduce using rule 16 (statement -> nextStatement Marker .)
    IF              reduce using rule 16 (statement -> nextStatement Marker .)
    USE             reduce using rule 16 (statement -> nextStatement Marker .)
    SWITCH          reduce using rule 16 (statement -> nextStatement Marker .)
    PRIVATE         reduce using rule 16 (statement -> nextStatement Marker .)
    LOCAL           reduce using rule 16 (statement -> nextStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 16 (statement -> nextStatement Marker .)
    ARRAY           reduce using rule 16 (statement -> nextStatement Marker .)
    VARIABLE        reduce using rule 16 (statement -> nextStatement Marker .)
    $end            reduce using rule 16 (statement -> nextStatement Marker .)
    BLOCK_ENDS      reduce using rule 16 (statement -> nextStatement Marker .)


state 72

    (22) switchStatement -> SWITCH lefthandside . BLOCK_BEGIN caselist BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 142


state 73

    (38) lefthandside -> PRIVATE OPEN_PARANTHESIS . type decList CLOSE_PARANTHESIS
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    variable                       shift and go to state 33
    type                           shift and go to state 143

state 74

    (37) lefthandside -> PRIVATE type . decList
    (44) decList -> . COMMA type decList
    (45) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 97
    SEMICOLON       reduce using rule 6 (empty -> .)
    ADV_ASSIGNMENT_OP reduce using rule 6 (empty -> .)
    ASSIGNMENT_OP   reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    empty                          shift and go to state 98
    decList                        shift and go to state 144

state 75

    (29) nextStatement -> NEXT SEMICOLON .

    RETURN          reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    IDENTIFIER      reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    WHILE           reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    FOR             reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    PRINT           reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    SUB             reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    LAST            reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    NEXT            reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    IF              reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    USE             reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    SWITCH          reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    PRIVATE         reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    LOCAL           reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    ARRAY           reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    VARIABLE        reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    $end            reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)
    BLOCK_ENDS      reduce using rule 29 (nextStatement -> NEXT SEMICOLON .)


state 76

    (15) statement -> lastStatement Marker .

    RETURN          reduce using rule 15 (statement -> lastStatement Marker .)
    IDENTIFIER      reduce using rule 15 (statement -> lastStatement Marker .)
    WHILE           reduce using rule 15 (statement -> lastStatement Marker .)
    FOR             reduce using rule 15 (statement -> lastStatement Marker .)
    PRINT           reduce using rule 15 (statement -> lastStatement Marker .)
    SUB             reduce using rule 15 (statement -> lastStatement Marker .)
    LAST            reduce using rule 15 (statement -> lastStatement Marker .)
    NEXT            reduce using rule 15 (statement -> lastStatement Marker .)
    IF              reduce using rule 15 (statement -> lastStatement Marker .)
    USE             reduce using rule 15 (statement -> lastStatement Marker .)
    SWITCH          reduce using rule 15 (statement -> lastStatement Marker .)
    PRIVATE         reduce using rule 15 (statement -> lastStatement Marker .)
    LOCAL           reduce using rule 15 (statement -> lastStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 15 (statement -> lastStatement Marker .)
    ARRAY           reduce using rule 15 (statement -> lastStatement Marker .)
    VARIABLE        reduce using rule 15 (statement -> lastStatement Marker .)
    $end            reduce using rule 15 (statement -> lastStatement Marker .)
    BLOCK_ENDS      reduce using rule 15 (statement -> lastStatement Marker .)


state 77

    (19) statement -> useStatement Marker .

    RETURN          reduce using rule 19 (statement -> useStatement Marker .)
    IDENTIFIER      reduce using rule 19 (statement -> useStatement Marker .)
    WHILE           reduce using rule 19 (statement -> useStatement Marker .)
    FOR             reduce using rule 19 (statement -> useStatement Marker .)
    PRINT           reduce using rule 19 (statement -> useStatement Marker .)
    SUB             reduce using rule 19 (statement -> useStatement Marker .)
    LAST            reduce using rule 19 (statement -> useStatement Marker .)
    NEXT            reduce using rule 19 (statement -> useStatement Marker .)
    IF              reduce using rule 19 (statement -> useStatement Marker .)
    USE             reduce using rule 19 (statement -> useStatement Marker .)
    SWITCH          reduce using rule 19 (statement -> useStatement Marker .)
    PRIVATE         reduce using rule 19 (statement -> useStatement Marker .)
    LOCAL           reduce using rule 19 (statement -> useStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 19 (statement -> useStatement Marker .)
    ARRAY           reduce using rule 19 (statement -> useStatement Marker .)
    VARIABLE        reduce using rule 19 (statement -> useStatement Marker .)
    $end            reduce using rule 19 (statement -> useStatement Marker .)
    BLOCK_ENDS      reduce using rule 19 (statement -> useStatement Marker .)


state 78

    (4) statements -> statement statements .

    BLOCK_ENDS      reduce using rule 4 (statements -> statement statements .)
    $end            reduce using rule 4 (statements -> statement statements .)


state 79

    (13) statement -> printStatement Marker .

    RETURN          reduce using rule 13 (statement -> printStatement Marker .)
    IDENTIFIER      reduce using rule 13 (statement -> printStatement Marker .)
    WHILE           reduce using rule 13 (statement -> printStatement Marker .)
    FOR             reduce using rule 13 (statement -> printStatement Marker .)
    PRINT           reduce using rule 13 (statement -> printStatement Marker .)
    SUB             reduce using rule 13 (statement -> printStatement Marker .)
    LAST            reduce using rule 13 (statement -> printStatement Marker .)
    NEXT            reduce using rule 13 (statement -> printStatement Marker .)
    IF              reduce using rule 13 (statement -> printStatement Marker .)
    USE             reduce using rule 13 (statement -> printStatement Marker .)
    SWITCH          reduce using rule 13 (statement -> printStatement Marker .)
    PRIVATE         reduce using rule 13 (statement -> printStatement Marker .)
    LOCAL           reduce using rule 13 (statement -> printStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 13 (statement -> printStatement Marker .)
    ARRAY           reduce using rule 13 (statement -> printStatement Marker .)
    VARIABLE        reduce using rule 13 (statement -> printStatement Marker .)
    $end            reduce using rule 13 (statement -> printStatement Marker .)
    BLOCK_ENDS      reduce using rule 13 (statement -> printStatement Marker .)


state 80

    (46) functionCall -> IDENTIFIER OPEN_PARANTHESIS . parameters CLOSE_PARANTHESIS SEMICOLON
    (47) parameters -> . expression COMMA parameters
    (48) parameters -> . expression
    (49) parameters -> . empty
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    parameters                     shift and go to state 146
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 147
    empty                          shift and go to state 145

state 81

    (18) statement -> ifthenelse Marker .

    RETURN          reduce using rule 18 (statement -> ifthenelse Marker .)
    IDENTIFIER      reduce using rule 18 (statement -> ifthenelse Marker .)
    WHILE           reduce using rule 18 (statement -> ifthenelse Marker .)
    FOR             reduce using rule 18 (statement -> ifthenelse Marker .)
    PRINT           reduce using rule 18 (statement -> ifthenelse Marker .)
    SUB             reduce using rule 18 (statement -> ifthenelse Marker .)
    LAST            reduce using rule 18 (statement -> ifthenelse Marker .)
    NEXT            reduce using rule 18 (statement -> ifthenelse Marker .)
    IF              reduce using rule 18 (statement -> ifthenelse Marker .)
    USE             reduce using rule 18 (statement -> ifthenelse Marker .)
    SWITCH          reduce using rule 18 (statement -> ifthenelse Marker .)
    PRIVATE         reduce using rule 18 (statement -> ifthenelse Marker .)
    LOCAL           reduce using rule 18 (statement -> ifthenelse Marker .)
    OPEN_PARANTHESIS reduce using rule 18 (statement -> ifthenelse Marker .)
    ARRAY           reduce using rule 18 (statement -> ifthenelse Marker .)
    VARIABLE        reduce using rule 18 (statement -> ifthenelse Marker .)
    $end            reduce using rule 18 (statement -> ifthenelse Marker .)
    BLOCK_ENDS      reduce using rule 18 (statement -> ifthenelse Marker .)


state 82

    (51) forStatement -> FOR OPEN_PARANTHESIS . expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 148
    empty                          shift and go to state 57

state 83

    (7) statement -> assignment Marker .

    RETURN          reduce using rule 7 (statement -> assignment Marker .)
    IDENTIFIER      reduce using rule 7 (statement -> assignment Marker .)
    WHILE           reduce using rule 7 (statement -> assignment Marker .)
    FOR             reduce using rule 7 (statement -> assignment Marker .)
    PRINT           reduce using rule 7 (statement -> assignment Marker .)
    SUB             reduce using rule 7 (statement -> assignment Marker .)
    LAST            reduce using rule 7 (statement -> assignment Marker .)
    NEXT            reduce using rule 7 (statement -> assignment Marker .)
    IF              reduce using rule 7 (statement -> assignment Marker .)
    USE             reduce using rule 7 (statement -> assignment Marker .)
    SWITCH          reduce using rule 7 (statement -> assignment Marker .)
    PRIVATE         reduce using rule 7 (statement -> assignment Marker .)
    LOCAL           reduce using rule 7 (statement -> assignment Marker .)
    OPEN_PARANTHESIS reduce using rule 7 (statement -> assignment Marker .)
    ARRAY           reduce using rule 7 (statement -> assignment Marker .)
    VARIABLE        reduce using rule 7 (statement -> assignment Marker .)
    $end            reduce using rule 7 (statement -> assignment Marker .)
    BLOCK_ENDS      reduce using rule 7 (statement -> assignment Marker .)


state 84

    (11) statement -> whileStatement Marker .

    RETURN          reduce using rule 11 (statement -> whileStatement Marker .)
    IDENTIFIER      reduce using rule 11 (statement -> whileStatement Marker .)
    WHILE           reduce using rule 11 (statement -> whileStatement Marker .)
    FOR             reduce using rule 11 (statement -> whileStatement Marker .)
    PRINT           reduce using rule 11 (statement -> whileStatement Marker .)
    SUB             reduce using rule 11 (statement -> whileStatement Marker .)
    LAST            reduce using rule 11 (statement -> whileStatement Marker .)
    NEXT            reduce using rule 11 (statement -> whileStatement Marker .)
    IF              reduce using rule 11 (statement -> whileStatement Marker .)
    USE             reduce using rule 11 (statement -> whileStatement Marker .)
    SWITCH          reduce using rule 11 (statement -> whileStatement Marker .)
    PRIVATE         reduce using rule 11 (statement -> whileStatement Marker .)
    LOCAL           reduce using rule 11 (statement -> whileStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 11 (statement -> whileStatement Marker .)
    ARRAY           reduce using rule 11 (statement -> whileStatement Marker .)
    VARIABLE        reduce using rule 11 (statement -> whileStatement Marker .)
    $end            reduce using rule 11 (statement -> whileStatement Marker .)
    BLOCK_ENDS      reduce using rule 11 (statement -> whileStatement Marker .)


state 85

    (34) assignment -> lefthandside assignmenttype . expression SEMICOLON
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 149
    empty                          shift and go to state 57
    string                         shift and go to state 54

state 86

    (43) declaration -> lefthandside SEMICOLON .

    RETURN          reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    WHILE           reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    FOR             reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    PRINT           reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    SUB             reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    LAST            reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    NEXT            reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    IF              reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    USE             reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    SWITCH          reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    PRIVATE         reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    LOCAL           reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    ARRAY           reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    VARIABLE        reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    $end            reduce using rule 43 (declaration -> lefthandside SEMICOLON .)
    BLOCK_ENDS      reduce using rule 43 (declaration -> lefthandside SEMICOLON .)


state 87

    (35) assignmenttype -> ADV_ASSIGNMENT_OP .

    PLUS_OP         reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    MINUS_OP        reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    BIT_FLIP        reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    NOT_OP          reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    OPEN_PARANTHESIS reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    NUMBER          reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    SCI_NOT         reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    FLOAT           reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    HEXADECIMAL     reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    OCTAL           reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    ARRAY           reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    STRING          reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    RES_STRING      reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    VARIABLE        reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    SEMICOLON       reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    OR_STR_OP       reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    XOR_STR_OP      reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    AND_STR_OP      reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    NOT_STR_OP      reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    COMPARE_OP      reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    BIT_OR          reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    BIT_XOR         reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    BIT_AND         reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    AND_OP          reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    OR_OP           reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    EQUALS_OP       reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    NOT_EQUALS_OP   reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    GREATER_OP      reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    LESS_OP         reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    GREATER_EQUAL_OP reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    LESS_EQUAL_OP   reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    MULTIPLICATION_OP reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    DIVISION_OP     reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    MODULUS_OP      reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    EXPONENT_OP     reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    BIT_RIGHT_SHIFT reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    BIT_LEFT_SHIFT  reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    CONCATENATE     reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    REP_OP          reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    COMMA           reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    ASSOCIATE_OP    reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    RANGE_OP        reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    SEARCH_MODIFY   reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)
    SEARCH_MODIFY_NEG reduce using rule 35 (assignmenttype -> ADV_ASSIGNMENT_OP .)


state 88

    (36) assignmenttype -> ASSIGNMENT_OP .

    PLUS_OP         reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    MINUS_OP        reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    BIT_FLIP        reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    NOT_OP          reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    OPEN_PARANTHESIS reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    NUMBER          reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    SCI_NOT         reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    FLOAT           reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    HEXADECIMAL     reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    OCTAL           reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    ARRAY           reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    STRING          reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    RES_STRING      reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    VARIABLE        reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    SEMICOLON       reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    OR_STR_OP       reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    XOR_STR_OP      reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    AND_STR_OP      reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    NOT_STR_OP      reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    COMPARE_OP      reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    BIT_OR          reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    BIT_XOR         reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    BIT_AND         reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    AND_OP          reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    OR_OP           reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    EQUALS_OP       reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    NOT_EQUALS_OP   reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    GREATER_OP      reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    LESS_OP         reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    GREATER_EQUAL_OP reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    LESS_EQUAL_OP   reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    MULTIPLICATION_OP reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    DIVISION_OP     reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    MODULUS_OP      reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    EXPONENT_OP     reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    BIT_RIGHT_SHIFT reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    BIT_LEFT_SHIFT  reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    CONCATENATE     reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    REP_OP          reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    COMMA           reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    ASSOCIATE_OP    reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    RANGE_OP        reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    SEARCH_MODIFY   reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)
    SEARCH_MODIFY_NEG reduce using rule 36 (assignmenttype -> ASSIGNMENT_OP .)


state 89

    (10) statement -> functionCall Marker .

    RETURN          reduce using rule 10 (statement -> functionCall Marker .)
    IDENTIFIER      reduce using rule 10 (statement -> functionCall Marker .)
    WHILE           reduce using rule 10 (statement -> functionCall Marker .)
    FOR             reduce using rule 10 (statement -> functionCall Marker .)
    PRINT           reduce using rule 10 (statement -> functionCall Marker .)
    SUB             reduce using rule 10 (statement -> functionCall Marker .)
    LAST            reduce using rule 10 (statement -> functionCall Marker .)
    NEXT            reduce using rule 10 (statement -> functionCall Marker .)
    IF              reduce using rule 10 (statement -> functionCall Marker .)
    USE             reduce using rule 10 (statement -> functionCall Marker .)
    SWITCH          reduce using rule 10 (statement -> functionCall Marker .)
    PRIVATE         reduce using rule 10 (statement -> functionCall Marker .)
    LOCAL           reduce using rule 10 (statement -> functionCall Marker .)
    OPEN_PARANTHESIS reduce using rule 10 (statement -> functionCall Marker .)
    ARRAY           reduce using rule 10 (statement -> functionCall Marker .)
    VARIABLE        reduce using rule 10 (statement -> functionCall Marker .)
    $end            reduce using rule 10 (statement -> functionCall Marker .)
    BLOCK_ENDS      reduce using rule 10 (statement -> functionCall Marker .)


state 90

    (8) statement -> declaration Marker .

    RETURN          reduce using rule 8 (statement -> declaration Marker .)
    IDENTIFIER      reduce using rule 8 (statement -> declaration Marker .)
    WHILE           reduce using rule 8 (statement -> declaration Marker .)
    FOR             reduce using rule 8 (statement -> declaration Marker .)
    PRINT           reduce using rule 8 (statement -> declaration Marker .)
    SUB             reduce using rule 8 (statement -> declaration Marker .)
    LAST            reduce using rule 8 (statement -> declaration Marker .)
    NEXT            reduce using rule 8 (statement -> declaration Marker .)
    IF              reduce using rule 8 (statement -> declaration Marker .)
    USE             reduce using rule 8 (statement -> declaration Marker .)
    SWITCH          reduce using rule 8 (statement -> declaration Marker .)
    PRIVATE         reduce using rule 8 (statement -> declaration Marker .)
    LOCAL           reduce using rule 8 (statement -> declaration Marker .)
    OPEN_PARANTHESIS reduce using rule 8 (statement -> declaration Marker .)
    ARRAY           reduce using rule 8 (statement -> declaration Marker .)
    VARIABLE        reduce using rule 8 (statement -> declaration Marker .)
    $end            reduce using rule 8 (statement -> declaration Marker .)
    BLOCK_ENDS      reduce using rule 8 (statement -> declaration Marker .)


state 91

    (9) statement -> returnStatement Marker .

    RETURN          reduce using rule 9 (statement -> returnStatement Marker .)
    IDENTIFIER      reduce using rule 9 (statement -> returnStatement Marker .)
    WHILE           reduce using rule 9 (statement -> returnStatement Marker .)
    FOR             reduce using rule 9 (statement -> returnStatement Marker .)
    PRINT           reduce using rule 9 (statement -> returnStatement Marker .)
    SUB             reduce using rule 9 (statement -> returnStatement Marker .)
    LAST            reduce using rule 9 (statement -> returnStatement Marker .)
    NEXT            reduce using rule 9 (statement -> returnStatement Marker .)
    IF              reduce using rule 9 (statement -> returnStatement Marker .)
    USE             reduce using rule 9 (statement -> returnStatement Marker .)
    SWITCH          reduce using rule 9 (statement -> returnStatement Marker .)
    PRIVATE         reduce using rule 9 (statement -> returnStatement Marker .)
    LOCAL           reduce using rule 9 (statement -> returnStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 9 (statement -> returnStatement Marker .)
    ARRAY           reduce using rule 9 (statement -> returnStatement Marker .)
    VARIABLE        reduce using rule 9 (statement -> returnStatement Marker .)
    $end            reduce using rule 9 (statement -> returnStatement Marker .)
    BLOCK_ENDS      reduce using rule 9 (statement -> returnStatement Marker .)


state 92

    (40) lefthandside -> LOCAL OPEN_PARANTHESIS . type decList CLOSE_PARANTHESIS
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    variable                       shift and go to state 33
    type                           shift and go to state 150

state 93

    (39) lefthandside -> LOCAL type . decList
    (44) decList -> . COMMA type decList
    (45) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 97
    SEMICOLON       reduce using rule 6 (empty -> .)
    ADV_ASSIGNMENT_OP reduce using rule 6 (empty -> .)
    ASSIGNMENT_OP   reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    empty                          shift and go to state 98
    decList                        shift and go to state 151

state 94

    (26) ifthen -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS block
    (27) ifthenelse -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS block ELSE block
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 152
    empty                          shift and go to state 57

state 95

    (21) useStatement -> USE IDENTIFIER SEMICOLON .

    RETURN          reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SUB             reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LAST            reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NEXT            reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    USE             reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LOCAL           reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    ARRAY           reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    VARIABLE        reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    $end            reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BLOCK_ENDS      reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)


state 96

    (41) lefthandside -> OPEN_PARANTHESIS type decList . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS shift and go to state 153


state 97

    (44) decList -> COMMA . type decList
    (65) type -> . variable
    (66) type -> . ARRAY
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    ARRAY           shift and go to state 36
    VARIABLE        shift and go to state 8

    variable                       shift and go to state 33
    type                           shift and go to state 154

state 98

    (45) decList -> empty .

    CLOSE_PARANTHESIS reduce using rule 45 (decList -> empty .)
    SEMICOLON       reduce using rule 45 (decList -> empty .)
    ADV_ASSIGNMENT_OP reduce using rule 45 (decList -> empty .)
    ASSIGNMENT_OP   reduce using rule 45 (decList -> empty .)
    BLOCK_BEGIN     reduce using rule 45 (decList -> empty .)


state 99

    (3) block -> BLOCK_BEGIN statements BLOCK_ENDS .

    RETURN          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    WHILE           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    FOR             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRINT           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SUB             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LAST            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NEXT            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IF              reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    USE             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SWITCH          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRIVATE         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LOCAL           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    OPEN_PARANTHESIS reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ARRAY           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    VARIABLE        reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    $end            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    CASE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ELSE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)


state 100

    (60) variable -> VARIABLE OPEN_BRACKET NUMBER . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 155


state 101

    (50) whileStatement -> WHILE OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS block
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 156
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 102

    (31) printStatement -> PRINT OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS SEMICOLON
    (64) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 157
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 103

    (68) expression -> MINUS_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 68 (expression -> MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 68 (expression -> MINUS_OP expression .)
    AND_STR_OP      reduce using rule 68 (expression -> MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 68 (expression -> MINUS_OP expression .)
    COMPARE_OP      reduce using rule 68 (expression -> MINUS_OP expression .)
    BIT_OR          reduce using rule 68 (expression -> MINUS_OP expression .)
    BIT_XOR         reduce using rule 68 (expression -> MINUS_OP expression .)
    BIT_AND         reduce using rule 68 (expression -> MINUS_OP expression .)
    AND_OP          reduce using rule 68 (expression -> MINUS_OP expression .)
    OR_OP           reduce using rule 68 (expression -> MINUS_OP expression .)
    EQUALS_OP       reduce using rule 68 (expression -> MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 68 (expression -> MINUS_OP expression .)
    GREATER_OP      reduce using rule 68 (expression -> MINUS_OP expression .)
    LESS_OP         reduce using rule 68 (expression -> MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 68 (expression -> MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 68 (expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 68 (expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 68 (expression -> MINUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 68 (expression -> MINUS_OP expression .)
    DIVISION_OP     reduce using rule 68 (expression -> MINUS_OP expression .)
    MODULUS_OP      reduce using rule 68 (expression -> MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 68 (expression -> MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 68 (expression -> MINUS_OP expression .)
    CONCATENATE     reduce using rule 68 (expression -> MINUS_OP expression .)
    REP_OP          reduce using rule 68 (expression -> MINUS_OP expression .)
    COMMA           reduce using rule 68 (expression -> MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 68 (expression -> MINUS_OP expression .)
    RANGE_OP        reduce using rule 68 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 68 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 68 (expression -> MINUS_OP expression .)
    SEMICOLON       reduce using rule 68 (expression -> MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 68 (expression -> MINUS_OP expression .)
    EXPONENT_OP     shift and go to state 112

  ! EXPONENT_OP     [ reduce using rule 68 (expression -> MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]
  ! SEARCH_MODIFY   [ shift and go to state 107 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 137 ]


state 104

    (70) expression -> NOT_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 70 (expression -> NOT_OP expression .)
    XOR_STR_OP      reduce using rule 70 (expression -> NOT_OP expression .)
    AND_STR_OP      reduce using rule 70 (expression -> NOT_OP expression .)
    NOT_STR_OP      reduce using rule 70 (expression -> NOT_OP expression .)
    COMPARE_OP      reduce using rule 70 (expression -> NOT_OP expression .)
    BIT_OR          reduce using rule 70 (expression -> NOT_OP expression .)
    BIT_XOR         reduce using rule 70 (expression -> NOT_OP expression .)
    BIT_AND         reduce using rule 70 (expression -> NOT_OP expression .)
    AND_OP          reduce using rule 70 (expression -> NOT_OP expression .)
    OR_OP           reduce using rule 70 (expression -> NOT_OP expression .)
    EQUALS_OP       reduce using rule 70 (expression -> NOT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 70 (expression -> NOT_OP expression .)
    GREATER_OP      reduce using rule 70 (expression -> NOT_OP expression .)
    LESS_OP         reduce using rule 70 (expression -> NOT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 70 (expression -> NOT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 70 (expression -> NOT_OP expression .)
    PLUS_OP         reduce using rule 70 (expression -> NOT_OP expression .)
    MINUS_OP        reduce using rule 70 (expression -> NOT_OP expression .)
    MULTIPLICATION_OP reduce using rule 70 (expression -> NOT_OP expression .)
    DIVISION_OP     reduce using rule 70 (expression -> NOT_OP expression .)
    MODULUS_OP      reduce using rule 70 (expression -> NOT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 70 (expression -> NOT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 70 (expression -> NOT_OP expression .)
    CONCATENATE     reduce using rule 70 (expression -> NOT_OP expression .)
    REP_OP          reduce using rule 70 (expression -> NOT_OP expression .)
    COMMA           reduce using rule 70 (expression -> NOT_OP expression .)
    ASSOCIATE_OP    reduce using rule 70 (expression -> NOT_OP expression .)
    RANGE_OP        reduce using rule 70 (expression -> NOT_OP expression .)
    SEARCH_MODIFY   reduce using rule 70 (expression -> NOT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 70 (expression -> NOT_OP expression .)
    SEMICOLON       reduce using rule 70 (expression -> NOT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 70 (expression -> NOT_OP expression .)
    EXPONENT_OP     shift and go to state 112

  ! EXPONENT_OP     [ reduce using rule 70 (expression -> NOT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]
  ! SEARCH_MODIFY   [ shift and go to state 107 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 137 ]


state 105

    (69) expression -> BIT_FLIP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 69 (expression -> BIT_FLIP expression .)
    XOR_STR_OP      reduce using rule 69 (expression -> BIT_FLIP expression .)
    AND_STR_OP      reduce using rule 69 (expression -> BIT_FLIP expression .)
    NOT_STR_OP      reduce using rule 69 (expression -> BIT_FLIP expression .)
    COMPARE_OP      reduce using rule 69 (expression -> BIT_FLIP expression .)
    BIT_OR          reduce using rule 69 (expression -> BIT_FLIP expression .)
    BIT_XOR         reduce using rule 69 (expression -> BIT_FLIP expression .)
    BIT_AND         reduce using rule 69 (expression -> BIT_FLIP expression .)
    AND_OP          reduce using rule 69 (expression -> BIT_FLIP expression .)
    OR_OP           reduce using rule 69 (expression -> BIT_FLIP expression .)
    EQUALS_OP       reduce using rule 69 (expression -> BIT_FLIP expression .)
    NOT_EQUALS_OP   reduce using rule 69 (expression -> BIT_FLIP expression .)
    GREATER_OP      reduce using rule 69 (expression -> BIT_FLIP expression .)
    LESS_OP         reduce using rule 69 (expression -> BIT_FLIP expression .)
    GREATER_EQUAL_OP reduce using rule 69 (expression -> BIT_FLIP expression .)
    LESS_EQUAL_OP   reduce using rule 69 (expression -> BIT_FLIP expression .)
    PLUS_OP         reduce using rule 69 (expression -> BIT_FLIP expression .)
    MINUS_OP        reduce using rule 69 (expression -> BIT_FLIP expression .)
    MULTIPLICATION_OP reduce using rule 69 (expression -> BIT_FLIP expression .)
    DIVISION_OP     reduce using rule 69 (expression -> BIT_FLIP expression .)
    MODULUS_OP      reduce using rule 69 (expression -> BIT_FLIP expression .)
    BIT_RIGHT_SHIFT reduce using rule 69 (expression -> BIT_FLIP expression .)
    BIT_LEFT_SHIFT  reduce using rule 69 (expression -> BIT_FLIP expression .)
    CONCATENATE     reduce using rule 69 (expression -> BIT_FLIP expression .)
    REP_OP          reduce using rule 69 (expression -> BIT_FLIP expression .)
    COMMA           reduce using rule 69 (expression -> BIT_FLIP expression .)
    ASSOCIATE_OP    reduce using rule 69 (expression -> BIT_FLIP expression .)
    RANGE_OP        reduce using rule 69 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY   reduce using rule 69 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY_NEG reduce using rule 69 (expression -> BIT_FLIP expression .)
    SEMICOLON       reduce using rule 69 (expression -> BIT_FLIP expression .)
    CLOSE_PARANTHESIS reduce using rule 69 (expression -> BIT_FLIP expression .)
    EXPONENT_OP     shift and go to state 112

  ! EXPONENT_OP     [ reduce using rule 69 (expression -> BIT_FLIP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]
  ! SEARCH_MODIFY   [ shift and go to state 107 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 137 ]


state 106

    (67) expression -> PLUS_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 67 (expression -> PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 67 (expression -> PLUS_OP expression .)
    AND_STR_OP      reduce using rule 67 (expression -> PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 67 (expression -> PLUS_OP expression .)
    COMPARE_OP      reduce using rule 67 (expression -> PLUS_OP expression .)
    BIT_OR          reduce using rule 67 (expression -> PLUS_OP expression .)
    BIT_XOR         reduce using rule 67 (expression -> PLUS_OP expression .)
    BIT_AND         reduce using rule 67 (expression -> PLUS_OP expression .)
    AND_OP          reduce using rule 67 (expression -> PLUS_OP expression .)
    OR_OP           reduce using rule 67 (expression -> PLUS_OP expression .)
    EQUALS_OP       reduce using rule 67 (expression -> PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 67 (expression -> PLUS_OP expression .)
    GREATER_OP      reduce using rule 67 (expression -> PLUS_OP expression .)
    LESS_OP         reduce using rule 67 (expression -> PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 67 (expression -> PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 67 (expression -> PLUS_OP expression .)
    PLUS_OP         reduce using rule 67 (expression -> PLUS_OP expression .)
    MINUS_OP        reduce using rule 67 (expression -> PLUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 67 (expression -> PLUS_OP expression .)
    DIVISION_OP     reduce using rule 67 (expression -> PLUS_OP expression .)
    MODULUS_OP      reduce using rule 67 (expression -> PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 67 (expression -> PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 67 (expression -> PLUS_OP expression .)
    CONCATENATE     reduce using rule 67 (expression -> PLUS_OP expression .)
    REP_OP          reduce using rule 67 (expression -> PLUS_OP expression .)
    COMMA           reduce using rule 67 (expression -> PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 67 (expression -> PLUS_OP expression .)
    RANGE_OP        reduce using rule 67 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 67 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 67 (expression -> PLUS_OP expression .)
    SEMICOLON       reduce using rule 67 (expression -> PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 67 (expression -> PLUS_OP expression .)
    EXPONENT_OP     shift and go to state 112

  ! EXPONENT_OP     [ reduce using rule 67 (expression -> PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]
  ! SEARCH_MODIFY   [ shift and go to state 107 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 137 ]


state 107

    (103) expression -> expression SEARCH_MODIFY . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 158
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 108

    (88) expression -> expression LESS_EQUAL_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 159
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 109

    (91) expression -> expression MINUS_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 160
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 110

    (77) expression -> expression COMPARE_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 161
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 111

    (84) expression -> expression NOT_EQUALS_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 162
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 112

    (95) expression -> expression EXPONENT_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 163
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 113

    (76) expression -> expression NOT_STR_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 164
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 114

    (93) expression -> expression DIVISION_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 165
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 115

    (102) expression -> expression RANGE_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 166
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 116

    (79) expression -> expression BIT_XOR . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 167
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 117

    (83) expression -> expression EQUALS_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 168
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 118

    (32) printStatement -> PRINT expression SEMICOLON .

    RETURN          reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    WHILE           reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    FOR             reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    PRINT           reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    SUB             reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    LAST            reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    NEXT            reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    IF              reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    USE             reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    SWITCH          reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    PRIVATE         reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    LOCAL           reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    ARRAY           reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    VARIABLE        reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)
    $end            reduce using rule 32 (printStatement -> PRINT expression SEMICOLON .)


state 119

    (75) expression -> expression AND_STR_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 169
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 120

    (82) expression -> expression OR_OP . Marker expression
    (89) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 170
    empty                          shift and go to state 40

state 121

    (86) expression -> expression LESS_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 171
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 122

    (100) expression -> expression COMMA . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 172
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 123

    (94) expression -> expression MODULUS_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 173
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 124

    (87) expression -> expression GREATER_EQUAL_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 174
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 125

    (74) expression -> expression XOR_STR_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 175
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 126

    (80) expression -> expression BIT_AND . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 176
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 127

    (92) expression -> expression MULTIPLICATION_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 177
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 128

    (101) expression -> expression ASSOCIATE_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 178
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 129

    (73) expression -> expression OR_STR_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 179
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 130

    (81) expression -> expression AND_OP . Marker expression
    (89) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 180
    empty                          shift and go to state 40

state 131

    (97) expression -> expression BIT_LEFT_SHIFT . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 181
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 132

    (99) expression -> expression REP_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 182
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 133

    (98) expression -> expression CONCATENATE . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 183
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 134

    (96) expression -> expression BIT_RIGHT_SHIFT . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 184
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 135

    (78) expression -> expression BIT_OR . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 185
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 136

    (90) expression -> expression PLUS_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 186
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 137

    (104) expression -> expression SEARCH_MODIFY_NEG . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 187
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 138

    (85) expression -> expression GREATER_OP . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 188
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 139

    (64) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 189
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 140

    (33) returnStatement -> RETURN expression SEMICOLON .

    RETURN          reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    SUB             reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    LAST            reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    NEXT            reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    USE             reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    PRIVATE         reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    LOCAL           reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    ARRAY           reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    VARIABLE        reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 33 (returnStatement -> RETURN expression SEMICOLON .)


state 141

    (30) functionStatement -> SUB IDENTIFIER block .

    RETURN          reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    IDENTIFIER      reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    WHILE           reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    FOR             reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    PRINT           reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    SUB             reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    LAST            reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    NEXT            reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    IF              reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    USE             reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    SWITCH          reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    PRIVATE         reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    LOCAL           reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    OPEN_PARANTHESIS reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    ARRAY           reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    VARIABLE        reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    BLOCK_ENDS      reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)
    $end            reduce using rule 30 (functionStatement -> SUB IDENTIFIER block .)


state 142

    (22) switchStatement -> SWITCH lefthandside BLOCK_BEGIN . caselist BLOCK_ENDS
    (23) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (24) caselist -> . ELSE block
    (25) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 190
    ELSE            shift and go to state 192
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    empty                          shift and go to state 193
    caselist                       shift and go to state 191

state 143

    (38) lefthandside -> PRIVATE OPEN_PARANTHESIS type . decList CLOSE_PARANTHESIS
    (44) decList -> . COMMA type decList
    (45) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 97
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    empty                          shift and go to state 98
    decList                        shift and go to state 194

state 144

    (37) lefthandside -> PRIVATE type decList .

    SEMICOLON       reduce using rule 37 (lefthandside -> PRIVATE type decList .)
    ADV_ASSIGNMENT_OP reduce using rule 37 (lefthandside -> PRIVATE type decList .)
    ASSIGNMENT_OP   reduce using rule 37 (lefthandside -> PRIVATE type decList .)
    BLOCK_BEGIN     reduce using rule 37 (lefthandside -> PRIVATE type decList .)


state 145

    (49) parameters -> empty .
    (71) expression -> empty .

  ! reduce/reduce conflict for CLOSE_PARANTHESIS resolved using rule 49 (parameters -> empty .)
    CLOSE_PARANTHESIS reduce using rule 49 (parameters -> empty .)
    COMMA           reduce using rule 71 (expression -> empty .)
    OR_STR_OP       reduce using rule 71 (expression -> empty .)
    XOR_STR_OP      reduce using rule 71 (expression -> empty .)
    AND_STR_OP      reduce using rule 71 (expression -> empty .)
    NOT_STR_OP      reduce using rule 71 (expression -> empty .)
    COMPARE_OP      reduce using rule 71 (expression -> empty .)
    BIT_OR          reduce using rule 71 (expression -> empty .)
    BIT_XOR         reduce using rule 71 (expression -> empty .)
    BIT_AND         reduce using rule 71 (expression -> empty .)
    AND_OP          reduce using rule 71 (expression -> empty .)
    OR_OP           reduce using rule 71 (expression -> empty .)
    EQUALS_OP       reduce using rule 71 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 71 (expression -> empty .)
    GREATER_OP      reduce using rule 71 (expression -> empty .)
    LESS_OP         reduce using rule 71 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 71 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 71 (expression -> empty .)
    PLUS_OP         reduce using rule 71 (expression -> empty .)
    MINUS_OP        reduce using rule 71 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 71 (expression -> empty .)
    DIVISION_OP     reduce using rule 71 (expression -> empty .)
    MODULUS_OP      reduce using rule 71 (expression -> empty .)
    EXPONENT_OP     reduce using rule 71 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 71 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 71 (expression -> empty .)
    CONCATENATE     reduce using rule 71 (expression -> empty .)
    REP_OP          reduce using rule 71 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 71 (expression -> empty .)
    RANGE_OP        reduce using rule 71 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 71 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 71 (expression -> empty .)

  ! CLOSE_PARANTHESIS [ reduce using rule 71 (expression -> empty .) ]


state 146

    (46) functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters . CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS shift and go to state 195


state 147

    (47) parameters -> expression . COMMA parameters
    (48) parameters -> expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    COMMA           shift and go to state 196
    CLOSE_PARANTHESIS reduce using rule 48 (parameters -> expression .)
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 148

    (51) forStatement -> FOR OPEN_PARANTHESIS expression . SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 197
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 149

    (34) assignment -> lefthandside assignmenttype expression . SEMICOLON
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 198
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 150

    (40) lefthandside -> LOCAL OPEN_PARANTHESIS type . decList CLOSE_PARANTHESIS
    (44) decList -> . COMMA type decList
    (45) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 97
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    empty                          shift and go to state 98
    decList                        shift and go to state 199

state 151

    (39) lefthandside -> LOCAL type decList .

    SEMICOLON       reduce using rule 39 (lefthandside -> LOCAL type decList .)
    ADV_ASSIGNMENT_OP reduce using rule 39 (lefthandside -> LOCAL type decList .)
    ASSIGNMENT_OP   reduce using rule 39 (lefthandside -> LOCAL type decList .)
    BLOCK_BEGIN     reduce using rule 39 (lefthandside -> LOCAL type decList .)


state 152

    (26) ifthen -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS block
    (27) ifthenelse -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS block ELSE block
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 200
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 153

    (41) lefthandside -> OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .

    SEMICOLON       reduce using rule 41 (lefthandside -> OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    ADV_ASSIGNMENT_OP reduce using rule 41 (lefthandside -> OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    ASSIGNMENT_OP   reduce using rule 41 (lefthandside -> OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 41 (lefthandside -> OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)


state 154

    (44) decList -> COMMA type . decList
    (44) decList -> . COMMA type decList
    (45) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 97
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    ADV_ASSIGNMENT_OP reduce using rule 6 (empty -> .)
    ASSIGNMENT_OP   reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    empty                          shift and go to state 98
    decList                        shift and go to state 201

state 155

    (60) variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .

    OR_STR_OP       reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    XOR_STR_OP      reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_STR_OP      reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_STR_OP      reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMPARE_OP      reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_OR          reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_AND         reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_OP          reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    OR_OP           reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EQUALS_OP       reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_EQUALS_OP   reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_OP      reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_OP         reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_EQUAL_OP reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_EQUAL_OP   reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    PLUS_OP         reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MINUS_OP        reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MULTIPLICATION_OP reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    DIVISION_OP     reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MODULUS_OP      reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EXPONENT_OP     reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_RIGHT_SHIFT reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_LEFT_SHIFT  reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CONCATENATE     reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    REP_OP          reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMMA           reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    ASSOCIATE_OP    reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    RANGE_OP        reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY   reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY_NEG reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEMICOLON       reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CLOSE_PARANTHESIS reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BLOCK_BEGIN     reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    ADV_ASSIGNMENT_OP reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    ASSIGNMENT_OP   reduce using rule 60 (variable -> VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET .)


state 156

    (50) whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 202

state 157

    (31) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . SEMICOLON
    (64) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 203
    OR_STR_OP       reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)

  ! SEMICOLON       [ reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .) ]


state 158

    (103) expression -> expression SEARCH_MODIFY expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    XOR_STR_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    AND_STR_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    NOT_STR_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    COMPARE_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    BIT_OR          reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    BIT_XOR         reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    BIT_AND         reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    AND_OP          reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    OR_OP           reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    EQUALS_OP       reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    NOT_EQUALS_OP   reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    LESS_OP         reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_EQUAL_OP reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    LESS_EQUAL_OP   reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    PLUS_OP         reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    MINUS_OP        reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    MULTIPLICATION_OP reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    DIVISION_OP     reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    MODULUS_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    BIT_RIGHT_SHIFT reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    BIT_LEFT_SHIFT  reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    CONCATENATE     reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    REP_OP          reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    COMMA           reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    ASSOCIATE_OP    reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    RANGE_OP        reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY   reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY_NEG reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    SEMICOLON       reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    CLOSE_PARANTHESIS reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .)
    EXPONENT_OP     shift and go to state 112

  ! EXPONENT_OP     [ reduce using rule 103 (expression -> expression SEARCH_MODIFY expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]
  ! SEARCH_MODIFY   [ shift and go to state 107 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 137 ]


state 159

    (88) expression -> expression LESS_EQUAL_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_OR          reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_AND         reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    AND_OP          reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    OR_OP           reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_OP         reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    COMMA           reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    SEMICOLON       reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! PLUS_OP         [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 88 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 160

    (91) expression -> expression MINUS_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 91 (expression -> expression MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 91 (expression -> expression MINUS_OP expression .)
    AND_STR_OP      reduce using rule 91 (expression -> expression MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 91 (expression -> expression MINUS_OP expression .)
    COMPARE_OP      reduce using rule 91 (expression -> expression MINUS_OP expression .)
    BIT_OR          reduce using rule 91 (expression -> expression MINUS_OP expression .)
    BIT_XOR         reduce using rule 91 (expression -> expression MINUS_OP expression .)
    BIT_AND         reduce using rule 91 (expression -> expression MINUS_OP expression .)
    AND_OP          reduce using rule 91 (expression -> expression MINUS_OP expression .)
    OR_OP           reduce using rule 91 (expression -> expression MINUS_OP expression .)
    EQUALS_OP       reduce using rule 91 (expression -> expression MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 91 (expression -> expression MINUS_OP expression .)
    GREATER_OP      reduce using rule 91 (expression -> expression MINUS_OP expression .)
    LESS_OP         reduce using rule 91 (expression -> expression MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 91 (expression -> expression MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 91 (expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 91 (expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 91 (expression -> expression MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 91 (expression -> expression MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 91 (expression -> expression MINUS_OP expression .)
    CONCATENATE     reduce using rule 91 (expression -> expression MINUS_OP expression .)
    COMMA           reduce using rule 91 (expression -> expression MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 91 (expression -> expression MINUS_OP expression .)
    RANGE_OP        reduce using rule 91 (expression -> expression MINUS_OP expression .)
    SEMICOLON       reduce using rule 91 (expression -> expression MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 91 (expression -> expression MINUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! MULTIPLICATION_OP [ reduce using rule 91 (expression -> expression MINUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 91 (expression -> expression MINUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 91 (expression -> expression MINUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 91 (expression -> expression MINUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 91 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 91 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 91 (expression -> expression MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 161

    (77) expression -> expression COMPARE_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    XOR_STR_OP      reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    AND_STR_OP      reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    NOT_STR_OP      reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    COMPARE_OP      reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    BIT_OR          reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    BIT_XOR         reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    BIT_AND         reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    AND_OP          reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    OR_OP           reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    EQUALS_OP       reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    NOT_EQUALS_OP   reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    COMMA           reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    ASSOCIATE_OP    reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    RANGE_OP        reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    SEMICOLON       reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 77 (expression -> expression COMPARE_OP expression .)
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! GREATER_OP      [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! REP_OP          [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 77 (expression -> expression COMPARE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 162

    (84) expression -> expression NOT_EQUALS_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_OR          reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_XOR         reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_AND         reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    AND_OP          reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    OR_OP           reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    COMMA           reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    RANGE_OP        reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    SEMICOLON       reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .)
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! GREATER_OP      [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 84 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 163

    (95) expression -> expression EXPONENT_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    XOR_STR_OP      reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    AND_STR_OP      reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    NOT_STR_OP      reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    COMPARE_OP      reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    BIT_OR          reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    BIT_XOR         reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    BIT_AND         reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    AND_OP          reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    OR_OP           reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    EQUALS_OP       reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    GREATER_OP      reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    LESS_OP         reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    PLUS_OP         reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    MINUS_OP        reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    MULTIPLICATION_OP reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    DIVISION_OP     reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    MODULUS_OP      reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    CONCATENATE     reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    REP_OP          reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    COMMA           reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    ASSOCIATE_OP    reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    RANGE_OP        reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY   reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    SEMICOLON       reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 95 (expression -> expression EXPONENT_OP expression .)
    EXPONENT_OP     shift and go to state 112

  ! EXPONENT_OP     [ reduce using rule 95 (expression -> expression EXPONENT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]
  ! SEARCH_MODIFY   [ shift and go to state 107 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 137 ]


state 164

    (76) expression -> expression NOT_STR_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 76 (expression -> expression NOT_STR_OP expression .)
    XOR_STR_OP      reduce using rule 76 (expression -> expression NOT_STR_OP expression .)
    AND_STR_OP      reduce using rule 76 (expression -> expression NOT_STR_OP expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression NOT_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 76 (expression -> expression NOT_STR_OP expression .)
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! NOT_STR_OP      [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 76 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]


state 165

    (93) expression -> expression DIVISION_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    XOR_STR_OP      reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    AND_STR_OP      reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    NOT_STR_OP      reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    COMPARE_OP      reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    BIT_OR          reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    BIT_XOR         reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    BIT_AND         reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    AND_OP          reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    OR_OP           reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    EQUALS_OP       reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    GREATER_OP      reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    LESS_OP         reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    PLUS_OP         reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    MINUS_OP        reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    MULTIPLICATION_OP reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    DIVISION_OP     reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    MODULUS_OP      reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    CONCATENATE     reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    REP_OP          reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    COMMA           reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    ASSOCIATE_OP    reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    RANGE_OP        reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    SEMICOLON       reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 93 (expression -> expression DIVISION_OP expression .)
    EXPONENT_OP     shift and go to state 112
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! EXPONENT_OP     [ reduce using rule 93 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 93 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 93 (expression -> expression DIVISION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 166

    (102) expression -> expression RANGE_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 102 (expression -> expression RANGE_OP expression .)
    XOR_STR_OP      reduce using rule 102 (expression -> expression RANGE_OP expression .)
    AND_STR_OP      reduce using rule 102 (expression -> expression RANGE_OP expression .)
    NOT_STR_OP      reduce using rule 102 (expression -> expression RANGE_OP expression .)
    COMMA           reduce using rule 102 (expression -> expression RANGE_OP expression .)
    ASSOCIATE_OP    reduce using rule 102 (expression -> expression RANGE_OP expression .)
    RANGE_OP        reduce using rule 102 (expression -> expression RANGE_OP expression .)
    SEMICOLON       reduce using rule 102 (expression -> expression RANGE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 102 (expression -> expression RANGE_OP expression .)
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! AND_OP          [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! OR_OP           [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! REP_OP          [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 102 (expression -> expression RANGE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 167

    (79) expression -> expression BIT_XOR expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 79 (expression -> expression BIT_XOR expression .)
    XOR_STR_OP      reduce using rule 79 (expression -> expression BIT_XOR expression .)
    AND_STR_OP      reduce using rule 79 (expression -> expression BIT_XOR expression .)
    NOT_STR_OP      reduce using rule 79 (expression -> expression BIT_XOR expression .)
    BIT_OR          reduce using rule 79 (expression -> expression BIT_XOR expression .)
    BIT_XOR         reduce using rule 79 (expression -> expression BIT_XOR expression .)
    AND_OP          reduce using rule 79 (expression -> expression BIT_XOR expression .)
    OR_OP           reduce using rule 79 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 79 (expression -> expression BIT_XOR expression .)
    ASSOCIATE_OP    reduce using rule 79 (expression -> expression BIT_XOR expression .)
    RANGE_OP        reduce using rule 79 (expression -> expression BIT_XOR expression .)
    SEMICOLON       reduce using rule 79 (expression -> expression BIT_XOR expression .)
    CLOSE_PARANTHESIS reduce using rule 79 (expression -> expression BIT_XOR expression .)
    COMPARE_OP      shift and go to state 110
    BIT_AND         shift and go to state 126
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! EQUALS_OP       [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_OP      [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! LESS_OP         [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! PLUS_OP         [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! MINUS_OP        [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! DIVISION_OP     [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! MODULUS_OP      [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! CONCATENATE     [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! REP_OP          [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 79 (expression -> expression BIT_XOR expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 168

    (83) expression -> expression EQUALS_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    BIT_OR          reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    BIT_XOR         reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    BIT_AND         reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    AND_OP          reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    OR_OP           reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    COMMA           reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    RANGE_OP        reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    SEMICOLON       reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 83 (expression -> expression EQUALS_OP expression .)
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! GREATER_OP      [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 83 (expression -> expression EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 169

    (75) expression -> expression AND_STR_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 75 (expression -> expression AND_STR_OP expression .)
    XOR_STR_OP      reduce using rule 75 (expression -> expression AND_STR_OP expression .)
    AND_STR_OP      reduce using rule 75 (expression -> expression AND_STR_OP expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression AND_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 75 (expression -> expression AND_STR_OP expression .)
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! NOT_STR_OP      [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 75 (expression -> expression AND_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]


state 170

    (82) expression -> expression OR_OP Marker . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 204
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 171

    (86) expression -> expression LESS_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 86 (expression -> expression LESS_OP expression .)
    XOR_STR_OP      reduce using rule 86 (expression -> expression LESS_OP expression .)
    AND_STR_OP      reduce using rule 86 (expression -> expression LESS_OP expression .)
    NOT_STR_OP      reduce using rule 86 (expression -> expression LESS_OP expression .)
    COMPARE_OP      reduce using rule 86 (expression -> expression LESS_OP expression .)
    BIT_OR          reduce using rule 86 (expression -> expression LESS_OP expression .)
    BIT_XOR         reduce using rule 86 (expression -> expression LESS_OP expression .)
    BIT_AND         reduce using rule 86 (expression -> expression LESS_OP expression .)
    AND_OP          reduce using rule 86 (expression -> expression LESS_OP expression .)
    OR_OP           reduce using rule 86 (expression -> expression LESS_OP expression .)
    EQUALS_OP       reduce using rule 86 (expression -> expression LESS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 86 (expression -> expression LESS_OP expression .)
    GREATER_OP      reduce using rule 86 (expression -> expression LESS_OP expression .)
    LESS_OP         reduce using rule 86 (expression -> expression LESS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 86 (expression -> expression LESS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 86 (expression -> expression LESS_OP expression .)
    COMMA           reduce using rule 86 (expression -> expression LESS_OP expression .)
    ASSOCIATE_OP    reduce using rule 86 (expression -> expression LESS_OP expression .)
    RANGE_OP        reduce using rule 86 (expression -> expression LESS_OP expression .)
    SEMICOLON       reduce using rule 86 (expression -> expression LESS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 86 (expression -> expression LESS_OP expression .)
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! PLUS_OP         [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! REP_OP          [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 86 (expression -> expression LESS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 172

    (100) expression -> expression COMMA expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 100 (expression -> expression COMMA expression .)
    XOR_STR_OP      reduce using rule 100 (expression -> expression COMMA expression .)
    AND_STR_OP      reduce using rule 100 (expression -> expression COMMA expression .)
    NOT_STR_OP      reduce using rule 100 (expression -> expression COMMA expression .)
    COMMA           reduce using rule 100 (expression -> expression COMMA expression .)
    ASSOCIATE_OP    reduce using rule 100 (expression -> expression COMMA expression .)
    SEMICOLON       reduce using rule 100 (expression -> expression COMMA expression .)
    CLOSE_PARANTHESIS reduce using rule 100 (expression -> expression COMMA expression .)
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_OR          [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_XOR         [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_AND         [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! AND_OP          [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! OR_OP           [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! EQUALS_OP       [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! GREATER_OP      [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! LESS_OP         [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! PLUS_OP         [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! MINUS_OP        [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! DIVISION_OP     [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! MODULUS_OP      [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! EXPONENT_OP     [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! CONCATENATE     [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! REP_OP          [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! RANGE_OP        [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]


state 173

    (94) expression -> expression MODULUS_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    XOR_STR_OP      reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    AND_STR_OP      reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    NOT_STR_OP      reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    COMPARE_OP      reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    BIT_OR          reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    BIT_XOR         reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    BIT_AND         reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    AND_OP          reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    OR_OP           reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    EQUALS_OP       reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    GREATER_OP      reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    LESS_OP         reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    PLUS_OP         reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    MINUS_OP        reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    DIVISION_OP     reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    MODULUS_OP      reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    CONCATENATE     reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    REP_OP          reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    COMMA           reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    RANGE_OP        reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    SEMICOLON       reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 94 (expression -> expression MODULUS_OP expression .)
    EXPONENT_OP     shift and go to state 112
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! EXPONENT_OP     [ reduce using rule 94 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 94 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 94 (expression -> expression MODULUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 174

    (87) expression -> expression GREATER_EQUAL_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_OR          reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_AND         reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_OP          reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    OR_OP           reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_OP         reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    COMMA           reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    SEMICOLON       reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! PLUS_OP         [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 87 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 175

    (74) expression -> expression XOR_STR_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 74 (expression -> expression XOR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 74 (expression -> expression XOR_STR_OP expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression XOR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 74 (expression -> expression XOR_STR_OP expression .)
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! AND_STR_OP      [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 74 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]


state 176

    (80) expression -> expression BIT_AND expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 80 (expression -> expression BIT_AND expression .)
    XOR_STR_OP      reduce using rule 80 (expression -> expression BIT_AND expression .)
    AND_STR_OP      reduce using rule 80 (expression -> expression BIT_AND expression .)
    NOT_STR_OP      reduce using rule 80 (expression -> expression BIT_AND expression .)
    BIT_OR          reduce using rule 80 (expression -> expression BIT_AND expression .)
    BIT_XOR         reduce using rule 80 (expression -> expression BIT_AND expression .)
    BIT_AND         reduce using rule 80 (expression -> expression BIT_AND expression .)
    AND_OP          reduce using rule 80 (expression -> expression BIT_AND expression .)
    OR_OP           reduce using rule 80 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 80 (expression -> expression BIT_AND expression .)
    ASSOCIATE_OP    reduce using rule 80 (expression -> expression BIT_AND expression .)
    RANGE_OP        reduce using rule 80 (expression -> expression BIT_AND expression .)
    SEMICOLON       reduce using rule 80 (expression -> expression BIT_AND expression .)
    CLOSE_PARANTHESIS reduce using rule 80 (expression -> expression BIT_AND expression .)
    COMPARE_OP      shift and go to state 110
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! EQUALS_OP       [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! GREATER_OP      [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! LESS_OP         [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! PLUS_OP         [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! MINUS_OP        [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! DIVISION_OP     [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! MODULUS_OP      [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! EXPONENT_OP     [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! CONCATENATE     [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! REP_OP          [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 80 (expression -> expression BIT_AND expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 177

    (92) expression -> expression MULTIPLICATION_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    XOR_STR_OP      reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    AND_STR_OP      reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_STR_OP      reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    COMPARE_OP      reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_OR          reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_XOR         reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_AND         reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    AND_OP          reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    OR_OP           reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    EQUALS_OP       reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_OP      reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_OP         reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    PLUS_OP         reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    MINUS_OP        reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    MULTIPLICATION_OP reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    DIVISION_OP     reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    MODULUS_OP      reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    CONCATENATE     reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    REP_OP          reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    COMMA           reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    ASSOCIATE_OP    reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    RANGE_OP        reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    SEMICOLON       reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .)
    EXPONENT_OP     shift and go to state 112
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! EXPONENT_OP     [ reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 92 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 178

    (101) expression -> expression ASSOCIATE_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .)
    XOR_STR_OP      reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .)
    AND_STR_OP      reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .)
    NOT_STR_OP      reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .)
    COMMA           reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .)
    ASSOCIATE_OP    reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .)
    SEMICOLON       reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .)
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! AND_OP          [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_OP           [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! REP_OP          [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 101 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]


state 179

    (73) expression -> expression OR_STR_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 73 (expression -> expression OR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 73 (expression -> expression OR_STR_OP expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression OR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 73 (expression -> expression OR_STR_OP expression .)
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! AND_STR_OP      [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 73 (expression -> expression OR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]


state 180

    (81) expression -> expression AND_OP Marker . expression
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    expression                     shift and go to state 205
    number                         shift and go to state 50
    variable                       shift and go to state 33
    type                           shift and go to state 56
    empty                          shift and go to state 57

state 181

    (97) expression -> expression BIT_LEFT_SHIFT expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_STR_OP      reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMPARE_OP      reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_OR          reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_XOR         reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_AND         reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_OP          reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    OR_OP           reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    EQUALS_OP       reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_OP      reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_OP         reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMMA           reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    RANGE_OP        reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    SEMICOLON       reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .)
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! PLUS_OP         [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 97 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 182

    (99) expression -> expression REP_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 99 (expression -> expression REP_OP expression .)
    XOR_STR_OP      reduce using rule 99 (expression -> expression REP_OP expression .)
    AND_STR_OP      reduce using rule 99 (expression -> expression REP_OP expression .)
    NOT_STR_OP      reduce using rule 99 (expression -> expression REP_OP expression .)
    COMPARE_OP      reduce using rule 99 (expression -> expression REP_OP expression .)
    BIT_OR          reduce using rule 99 (expression -> expression REP_OP expression .)
    BIT_XOR         reduce using rule 99 (expression -> expression REP_OP expression .)
    BIT_AND         reduce using rule 99 (expression -> expression REP_OP expression .)
    AND_OP          reduce using rule 99 (expression -> expression REP_OP expression .)
    OR_OP           reduce using rule 99 (expression -> expression REP_OP expression .)
    EQUALS_OP       reduce using rule 99 (expression -> expression REP_OP expression .)
    NOT_EQUALS_OP   reduce using rule 99 (expression -> expression REP_OP expression .)
    GREATER_OP      reduce using rule 99 (expression -> expression REP_OP expression .)
    LESS_OP         reduce using rule 99 (expression -> expression REP_OP expression .)
    GREATER_EQUAL_OP reduce using rule 99 (expression -> expression REP_OP expression .)
    LESS_EQUAL_OP   reduce using rule 99 (expression -> expression REP_OP expression .)
    PLUS_OP         reduce using rule 99 (expression -> expression REP_OP expression .)
    MINUS_OP        reduce using rule 99 (expression -> expression REP_OP expression .)
    MULTIPLICATION_OP reduce using rule 99 (expression -> expression REP_OP expression .)
    DIVISION_OP     reduce using rule 99 (expression -> expression REP_OP expression .)
    MODULUS_OP      reduce using rule 99 (expression -> expression REP_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 99 (expression -> expression REP_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 99 (expression -> expression REP_OP expression .)
    CONCATENATE     reduce using rule 99 (expression -> expression REP_OP expression .)
    REP_OP          reduce using rule 99 (expression -> expression REP_OP expression .)
    COMMA           reduce using rule 99 (expression -> expression REP_OP expression .)
    ASSOCIATE_OP    reduce using rule 99 (expression -> expression REP_OP expression .)
    RANGE_OP        reduce using rule 99 (expression -> expression REP_OP expression .)
    SEMICOLON       reduce using rule 99 (expression -> expression REP_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 99 (expression -> expression REP_OP expression .)
    EXPONENT_OP     shift and go to state 112
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! EXPONENT_OP     [ reduce using rule 99 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 99 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 99 (expression -> expression REP_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 183

    (98) expression -> expression CONCATENATE expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 98 (expression -> expression CONCATENATE expression .)
    XOR_STR_OP      reduce using rule 98 (expression -> expression CONCATENATE expression .)
    AND_STR_OP      reduce using rule 98 (expression -> expression CONCATENATE expression .)
    NOT_STR_OP      reduce using rule 98 (expression -> expression CONCATENATE expression .)
    COMPARE_OP      reduce using rule 98 (expression -> expression CONCATENATE expression .)
    BIT_OR          reduce using rule 98 (expression -> expression CONCATENATE expression .)
    BIT_XOR         reduce using rule 98 (expression -> expression CONCATENATE expression .)
    BIT_AND         reduce using rule 98 (expression -> expression CONCATENATE expression .)
    AND_OP          reduce using rule 98 (expression -> expression CONCATENATE expression .)
    OR_OP           reduce using rule 98 (expression -> expression CONCATENATE expression .)
    EQUALS_OP       reduce using rule 98 (expression -> expression CONCATENATE expression .)
    NOT_EQUALS_OP   reduce using rule 98 (expression -> expression CONCATENATE expression .)
    GREATER_OP      reduce using rule 98 (expression -> expression CONCATENATE expression .)
    LESS_OP         reduce using rule 98 (expression -> expression CONCATENATE expression .)
    GREATER_EQUAL_OP reduce using rule 98 (expression -> expression CONCATENATE expression .)
    LESS_EQUAL_OP   reduce using rule 98 (expression -> expression CONCATENATE expression .)
    PLUS_OP         reduce using rule 98 (expression -> expression CONCATENATE expression .)
    MINUS_OP        reduce using rule 98 (expression -> expression CONCATENATE expression .)
    BIT_RIGHT_SHIFT reduce using rule 98 (expression -> expression CONCATENATE expression .)
    BIT_LEFT_SHIFT  reduce using rule 98 (expression -> expression CONCATENATE expression .)
    CONCATENATE     reduce using rule 98 (expression -> expression CONCATENATE expression .)
    COMMA           reduce using rule 98 (expression -> expression CONCATENATE expression .)
    ASSOCIATE_OP    reduce using rule 98 (expression -> expression CONCATENATE expression .)
    RANGE_OP        reduce using rule 98 (expression -> expression CONCATENATE expression .)
    SEMICOLON       reduce using rule 98 (expression -> expression CONCATENATE expression .)
    CLOSE_PARANTHESIS reduce using rule 98 (expression -> expression CONCATENATE expression .)
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! MULTIPLICATION_OP [ reduce using rule 98 (expression -> expression CONCATENATE expression .) ]
  ! DIVISION_OP     [ reduce using rule 98 (expression -> expression CONCATENATE expression .) ]
  ! MODULUS_OP      [ reduce using rule 98 (expression -> expression CONCATENATE expression .) ]
  ! EXPONENT_OP     [ reduce using rule 98 (expression -> expression CONCATENATE expression .) ]
  ! REP_OP          [ reduce using rule 98 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 98 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 98 (expression -> expression CONCATENATE expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 184

    (96) expression -> expression BIT_RIGHT_SHIFT expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_STR_OP      reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMPARE_OP      reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_OR          reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_XOR         reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_AND         reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_OP          reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    OR_OP           reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    EQUALS_OP       reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_OP      reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_OP         reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMMA           reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    RANGE_OP        reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    SEMICOLON       reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .)
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! PLUS_OP         [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 96 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 185

    (78) expression -> expression BIT_OR expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 78 (expression -> expression BIT_OR expression .)
    XOR_STR_OP      reduce using rule 78 (expression -> expression BIT_OR expression .)
    AND_STR_OP      reduce using rule 78 (expression -> expression BIT_OR expression .)
    NOT_STR_OP      reduce using rule 78 (expression -> expression BIT_OR expression .)
    BIT_OR          reduce using rule 78 (expression -> expression BIT_OR expression .)
    BIT_XOR         reduce using rule 78 (expression -> expression BIT_OR expression .)
    AND_OP          reduce using rule 78 (expression -> expression BIT_OR expression .)
    OR_OP           reduce using rule 78 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 78 (expression -> expression BIT_OR expression .)
    ASSOCIATE_OP    reduce using rule 78 (expression -> expression BIT_OR expression .)
    RANGE_OP        reduce using rule 78 (expression -> expression BIT_OR expression .)
    SEMICOLON       reduce using rule 78 (expression -> expression BIT_OR expression .)
    CLOSE_PARANTHESIS reduce using rule 78 (expression -> expression BIT_OR expression .)
    COMPARE_OP      shift and go to state 110
    BIT_AND         shift and go to state 126
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! EQUALS_OP       [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! GREATER_OP      [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! LESS_OP         [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! PLUS_OP         [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! MINUS_OP        [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! DIVISION_OP     [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! MODULUS_OP      [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! CONCATENATE     [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! REP_OP          [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 78 (expression -> expression BIT_OR expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 186

    (90) expression -> expression PLUS_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 90 (expression -> expression PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 90 (expression -> expression PLUS_OP expression .)
    AND_STR_OP      reduce using rule 90 (expression -> expression PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 90 (expression -> expression PLUS_OP expression .)
    COMPARE_OP      reduce using rule 90 (expression -> expression PLUS_OP expression .)
    BIT_OR          reduce using rule 90 (expression -> expression PLUS_OP expression .)
    BIT_XOR         reduce using rule 90 (expression -> expression PLUS_OP expression .)
    BIT_AND         reduce using rule 90 (expression -> expression PLUS_OP expression .)
    AND_OP          reduce using rule 90 (expression -> expression PLUS_OP expression .)
    OR_OP           reduce using rule 90 (expression -> expression PLUS_OP expression .)
    EQUALS_OP       reduce using rule 90 (expression -> expression PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 90 (expression -> expression PLUS_OP expression .)
    GREATER_OP      reduce using rule 90 (expression -> expression PLUS_OP expression .)
    LESS_OP         reduce using rule 90 (expression -> expression PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 90 (expression -> expression PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 90 (expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 90 (expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 90 (expression -> expression PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 90 (expression -> expression PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 90 (expression -> expression PLUS_OP expression .)
    CONCATENATE     reduce using rule 90 (expression -> expression PLUS_OP expression .)
    COMMA           reduce using rule 90 (expression -> expression PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 90 (expression -> expression PLUS_OP expression .)
    RANGE_OP        reduce using rule 90 (expression -> expression PLUS_OP expression .)
    SEMICOLON       reduce using rule 90 (expression -> expression PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 90 (expression -> expression PLUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! MULTIPLICATION_OP [ reduce using rule 90 (expression -> expression PLUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 90 (expression -> expression PLUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 90 (expression -> expression PLUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 90 (expression -> expression PLUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 90 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 90 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 90 (expression -> expression PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 187

    (104) expression -> expression SEARCH_MODIFY_NEG expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    XOR_STR_OP      reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_STR_OP      reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_STR_OP      reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMPARE_OP      reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_OR          reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_XOR         reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_AND         reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_OP          reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    OR_OP           reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EQUALS_OP       reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_EQUALS_OP   reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_OP      reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_OP         reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_EQUAL_OP reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_EQUAL_OP   reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    PLUS_OP         reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MINUS_OP        reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MULTIPLICATION_OP reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    DIVISION_OP     reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MODULUS_OP      reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_RIGHT_SHIFT reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_LEFT_SHIFT  reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CONCATENATE     reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    REP_OP          reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMMA           reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    ASSOCIATE_OP    reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    RANGE_OP        reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY   reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY_NEG reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEMICOLON       reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CLOSE_PARANTHESIS reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EXPONENT_OP     shift and go to state 112

  ! EXPONENT_OP     [ reduce using rule 104 (expression -> expression SEARCH_MODIFY_NEG expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! PLUS_OP         [ shift and go to state 136 ]
  ! MINUS_OP        [ shift and go to state 109 ]
  ! MULTIPLICATION_OP [ shift and go to state 127 ]
  ! DIVISION_OP     [ shift and go to state 114 ]
  ! MODULUS_OP      [ shift and go to state 123 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 134 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 131 ]
  ! CONCATENATE     [ shift and go to state 133 ]
  ! REP_OP          [ shift and go to state 132 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]
  ! SEARCH_MODIFY   [ shift and go to state 107 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 137 ]


state 188

    (85) expression -> expression GREATER_OP expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 85 (expression -> expression GREATER_OP expression .)
    XOR_STR_OP      reduce using rule 85 (expression -> expression GREATER_OP expression .)
    AND_STR_OP      reduce using rule 85 (expression -> expression GREATER_OP expression .)
    NOT_STR_OP      reduce using rule 85 (expression -> expression GREATER_OP expression .)
    COMPARE_OP      reduce using rule 85 (expression -> expression GREATER_OP expression .)
    BIT_OR          reduce using rule 85 (expression -> expression GREATER_OP expression .)
    BIT_XOR         reduce using rule 85 (expression -> expression GREATER_OP expression .)
    BIT_AND         reduce using rule 85 (expression -> expression GREATER_OP expression .)
    AND_OP          reduce using rule 85 (expression -> expression GREATER_OP expression .)
    OR_OP           reduce using rule 85 (expression -> expression GREATER_OP expression .)
    EQUALS_OP       reduce using rule 85 (expression -> expression GREATER_OP expression .)
    NOT_EQUALS_OP   reduce using rule 85 (expression -> expression GREATER_OP expression .)
    GREATER_OP      reduce using rule 85 (expression -> expression GREATER_OP expression .)
    LESS_OP         reduce using rule 85 (expression -> expression GREATER_OP expression .)
    GREATER_EQUAL_OP reduce using rule 85 (expression -> expression GREATER_OP expression .)
    LESS_EQUAL_OP   reduce using rule 85 (expression -> expression GREATER_OP expression .)
    COMMA           reduce using rule 85 (expression -> expression GREATER_OP expression .)
    ASSOCIATE_OP    reduce using rule 85 (expression -> expression GREATER_OP expression .)
    RANGE_OP        reduce using rule 85 (expression -> expression GREATER_OP expression .)
    SEMICOLON       reduce using rule 85 (expression -> expression GREATER_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 85 (expression -> expression GREATER_OP expression .)
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! PLUS_OP         [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! REP_OP          [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 85 (expression -> expression GREATER_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! COMPARE_OP      [ shift and go to state 110 ]
  ! BIT_OR          [ shift and go to state 135 ]
  ! BIT_XOR         [ shift and go to state 116 ]
  ! BIT_AND         [ shift and go to state 126 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! EQUALS_OP       [ shift and go to state 117 ]
  ! NOT_EQUALS_OP   [ shift and go to state 111 ]
  ! GREATER_OP      [ shift and go to state 138 ]
  ! LESS_OP         [ shift and go to state 121 ]
  ! GREATER_EQUAL_OP [ shift and go to state 124 ]
  ! LESS_EQUAL_OP   [ shift and go to state 108 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 189

    (64) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

    OR_STR_OP       reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEMICOLON       reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 64 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)


state 190

    (23) caselist -> CASE . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist

    OPEN_PARANTHESIS shift and go to state 206


state 191

    (22) switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 207


state 192

    (24) caselist -> ELSE . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 208

state 193

    (25) caselist -> empty .

    BLOCK_ENDS      reduce using rule 25 (caselist -> empty .)


state 194

    (38) lefthandside -> PRIVATE OPEN_PARANTHESIS type decList . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS shift and go to state 209


state 195

    (46) functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 210


state 196

    (47) parameters -> expression COMMA . parameters
    (100) expression -> expression COMMA . expression
    (47) parameters -> . expression COMMA parameters
    (48) parameters -> . expression
    (49) parameters -> . empty
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    parameters                     shift and go to state 211
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 212
    empty                          shift and go to state 145

state 197

    (51) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON . expression SEMICOLON expression CLOSE_PARANTHESIS block
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 213
    empty                          shift and go to state 57

state 198

    (34) assignment -> lefthandside assignmenttype expression SEMICOLON .

    RETURN          reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    WHILE           reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    FOR             reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    PRINT           reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    SUB             reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    LAST            reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    NEXT            reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    IF              reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    USE             reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    SWITCH          reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    PRIVATE         reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    LOCAL           reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    ARRAY           reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    VARIABLE        reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    $end            reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 34 (assignment -> lefthandside assignmenttype expression SEMICOLON .)


state 199

    (40) lefthandside -> LOCAL OPEN_PARANTHESIS type decList . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS shift and go to state 214


state 200

    (26) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . block
    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . block ELSE block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 215

state 201

    (44) decList -> COMMA type decList .

    CLOSE_PARANTHESIS reduce using rule 44 (decList -> COMMA type decList .)
    SEMICOLON       reduce using rule 44 (decList -> COMMA type decList .)
    ADV_ASSIGNMENT_OP reduce using rule 44 (decList -> COMMA type decList .)
    ASSIGNMENT_OP   reduce using rule 44 (decList -> COMMA type decList .)
    BLOCK_BEGIN     reduce using rule 44 (decList -> COMMA type decList .)


state 202

    (50) whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .

    RETURN          reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    IDENTIFIER      reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    WHILE           reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    FOR             reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    PRINT           reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    SUB             reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    LAST            reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    NEXT            reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    IF              reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    USE             reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    SWITCH          reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    PRIVATE         reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    LOCAL           reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    OPEN_PARANTHESIS reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    ARRAY           reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    VARIABLE        reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    BLOCK_ENDS      reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    $end            reduce using rule 50 (whileStatement -> WHILE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)


state 203

    (31) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .

    RETURN          reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    ARRAY           reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    VARIABLE        reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 31 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)


state 204

    (82) expression -> expression OR_OP Marker expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    XOR_STR_OP      reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    AND_STR_OP      reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    NOT_STR_OP      reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    OR_OP           reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    COMMA           reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    RANGE_OP        reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    SEMICOLON       reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 82 (expression -> expression OR_OP Marker expression .)
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! AND_OP          [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 82 (expression -> expression OR_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 205

    (81) expression -> expression AND_OP Marker expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    XOR_STR_OP      reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    AND_STR_OP      reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    NOT_STR_OP      reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    AND_OP          reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    OR_OP           reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    COMMA           reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    RANGE_OP        reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    SEMICOLON       reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 81 (expression -> expression AND_OP Marker expression .)
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 81 (expression -> expression AND_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! AND_OP          [ shift and go to state 130 ]
  ! OR_OP           [ shift and go to state 120 ]
  ! COMMA           [ shift and go to state 122 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]
  ! RANGE_OP        [ shift and go to state 115 ]


state 206

    (23) caselist -> CASE OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS block caselist
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 216
    empty                          shift and go to state 57

state 207

    (22) switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .

    RETURN          reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    WHILE           reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    FOR             reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRINT           reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    SUB             reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    LAST            reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    NEXT            reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    IF              reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    USE             reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    SWITCH          reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRIVATE         reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    LOCAL           reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    OPEN_PARANTHESIS reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    ARRAY           reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    VARIABLE        reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    $end            reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 22 (switchStatement -> SWITCH lefthandside BLOCK_BEGIN caselist BLOCK_ENDS .)


state 208

    (24) caselist -> ELSE block .

    BLOCK_ENDS      reduce using rule 24 (caselist -> ELSE block .)


state 209

    (38) lefthandside -> PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .

    SEMICOLON       reduce using rule 38 (lefthandside -> PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    ADV_ASSIGNMENT_OP reduce using rule 38 (lefthandside -> PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    ASSIGNMENT_OP   reduce using rule 38 (lefthandside -> PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 38 (lefthandside -> PRIVATE OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)


state 210

    (46) functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .

    RETURN          reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    ARRAY           reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    VARIABLE        reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 46 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)


state 211

    (47) parameters -> expression COMMA parameters .

    CLOSE_PARANTHESIS reduce using rule 47 (parameters -> expression COMMA parameters .)


state 212

    (100) expression -> expression COMMA expression .
    (47) parameters -> expression . COMMA parameters
    (48) parameters -> expression .
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

  ! reduce/reduce conflict for CLOSE_PARANTHESIS resolved using rule 48 (parameters -> expression .)
    COMMA           reduce using rule 100 (expression -> expression COMMA expression .)
    OR_STR_OP       reduce using rule 100 (expression -> expression COMMA expression .)
    XOR_STR_OP      reduce using rule 100 (expression -> expression COMMA expression .)
    AND_STR_OP      reduce using rule 100 (expression -> expression COMMA expression .)
    NOT_STR_OP      reduce using rule 100 (expression -> expression COMMA expression .)
    ASSOCIATE_OP    reduce using rule 100 (expression -> expression COMMA expression .)
    CLOSE_PARANTHESIS reduce using rule 48 (parameters -> expression .)
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137

  ! COMPARE_OP      [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_OR          [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_XOR         [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_AND         [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! AND_OP          [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! OR_OP           [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! EQUALS_OP       [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! GREATER_OP      [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! LESS_OP         [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! PLUS_OP         [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! MINUS_OP        [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! DIVISION_OP     [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! MODULUS_OP      [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! EXPONENT_OP     [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! CONCATENATE     [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! REP_OP          [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! RANGE_OP        [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! CLOSE_PARANTHESIS [ reduce using rule 100 (expression -> expression COMMA expression .) ]
  ! COMMA           [ shift and go to state 196 ]
  ! OR_STR_OP       [ shift and go to state 129 ]
  ! XOR_STR_OP      [ shift and go to state 125 ]
  ! AND_STR_OP      [ shift and go to state 119 ]
  ! NOT_STR_OP      [ shift and go to state 113 ]
  ! ASSOCIATE_OP    [ shift and go to state 128 ]


state 213

    (51) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression . SEMICOLON expression CLOSE_PARANTHESIS block
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 217
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 214

    (40) lefthandside -> LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .

    SEMICOLON       reduce using rule 40 (lefthandside -> LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    ADV_ASSIGNMENT_OP reduce using rule 40 (lefthandside -> LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    ASSIGNMENT_OP   reduce using rule 40 (lefthandside -> LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 40 (lefthandside -> LOCAL OPEN_PARANTHESIS type decList CLOSE_PARANTHESIS .)


state 215

    (26) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .
    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block . ELSE block

    RETURN          reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    IDENTIFIER      reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    WHILE           reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    FOR             reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    PRINT           reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    SUB             reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    LAST            reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    NEXT            reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    IF              reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    USE             reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    SWITCH          reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    PRIVATE         reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    LOCAL           reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    OPEN_PARANTHESIS reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    ARRAY           reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    VARIABLE        reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    BLOCK_ENDS      reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    $end            reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block .)
    ELSE            shift and go to state 218


state 216

    (23) caselist -> CASE OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS block caselist
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 219
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 217

    (51) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON . expression CLOSE_PARANTHESIS block
    (67) expression -> . PLUS_OP expression
    (68) expression -> . MINUS_OP expression
    (69) expression -> . BIT_FLIP expression
    (70) expression -> . NOT_OP expression
    (71) expression -> . empty
    (72) expression -> . term
    (73) expression -> . expression OR_STR_OP expression
    (74) expression -> . expression XOR_STR_OP expression
    (75) expression -> . expression AND_STR_OP expression
    (76) expression -> . expression NOT_STR_OP expression
    (77) expression -> . expression COMPARE_OP expression
    (78) expression -> . expression BIT_OR expression
    (79) expression -> . expression BIT_XOR expression
    (80) expression -> . expression BIT_AND expression
    (81) expression -> . expression AND_OP Marker expression
    (82) expression -> . expression OR_OP Marker expression
    (83) expression -> . expression EQUALS_OP expression
    (84) expression -> . expression NOT_EQUALS_OP expression
    (85) expression -> . expression GREATER_OP expression
    (86) expression -> . expression LESS_OP expression
    (87) expression -> . expression GREATER_EQUAL_OP expression
    (88) expression -> . expression LESS_EQUAL_OP expression
    (90) expression -> . expression PLUS_OP expression
    (91) expression -> . expression MINUS_OP expression
    (92) expression -> . expression MULTIPLICATION_OP expression
    (93) expression -> . expression DIVISION_OP expression
    (94) expression -> . expression MODULUS_OP expression
    (95) expression -> . expression EXPONENT_OP expression
    (96) expression -> . expression BIT_RIGHT_SHIFT expression
    (97) expression -> . expression BIT_LEFT_SHIFT expression
    (98) expression -> . expression CONCATENATE expression
    (99) expression -> . expression REP_OP expression
    (100) expression -> . expression COMMA expression
    (101) expression -> . expression ASSOCIATE_OP expression
    (102) expression -> . expression RANGE_OP expression
    (103) expression -> . expression SEARCH_MODIFY expression
    (104) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (61) term -> . number
    (62) term -> . type
    (63) term -> . string
    (64) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (54) number -> . NUMBER
    (55) number -> . SCI_NOT
    (56) number -> . FLOAT
    (57) number -> . HEXADECIMAL
    (58) number -> . OCTAL
    (65) type -> . variable
    (66) type -> . ARRAY
    (52) string -> . STRING
    (53) string -> . RES_STRING
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE OPEN_BRACKET NUMBER CLOSE_BRACKET

    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 49
    BIT_FLIP        shift and go to state 55
    NOT_OP          shift and go to state 52
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 66
    NUMBER          shift and go to state 59
    SCI_NOT         shift and go to state 60
    FLOAT           shift and go to state 63
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 61
    ARRAY           shift and go to state 36
    STRING          shift and go to state 51
    RES_STRING      shift and go to state 58
    VARIABLE        shift and go to state 8

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 62
    string                         shift and go to state 54
    type                           shift and go to state 56
    number                         shift and go to state 50
    variable                       shift and go to state 33
    expression                     shift and go to state 220
    empty                          shift and go to state 57

state 218

    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 221

state 219

    (23) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . block caselist
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 222

state 220

    (51) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression . CLOSE_PARANTHESIS block
    (73) expression -> expression . OR_STR_OP expression
    (74) expression -> expression . XOR_STR_OP expression
    (75) expression -> expression . AND_STR_OP expression
    (76) expression -> expression . NOT_STR_OP expression
    (77) expression -> expression . COMPARE_OP expression
    (78) expression -> expression . BIT_OR expression
    (79) expression -> expression . BIT_XOR expression
    (80) expression -> expression . BIT_AND expression
    (81) expression -> expression . AND_OP Marker expression
    (82) expression -> expression . OR_OP Marker expression
    (83) expression -> expression . EQUALS_OP expression
    (84) expression -> expression . NOT_EQUALS_OP expression
    (85) expression -> expression . GREATER_OP expression
    (86) expression -> expression . LESS_OP expression
    (87) expression -> expression . GREATER_EQUAL_OP expression
    (88) expression -> expression . LESS_EQUAL_OP expression
    (90) expression -> expression . PLUS_OP expression
    (91) expression -> expression . MINUS_OP expression
    (92) expression -> expression . MULTIPLICATION_OP expression
    (93) expression -> expression . DIVISION_OP expression
    (94) expression -> expression . MODULUS_OP expression
    (95) expression -> expression . EXPONENT_OP expression
    (96) expression -> expression . BIT_RIGHT_SHIFT expression
    (97) expression -> expression . BIT_LEFT_SHIFT expression
    (98) expression -> expression . CONCATENATE expression
    (99) expression -> expression . REP_OP expression
    (100) expression -> expression . COMMA expression
    (101) expression -> expression . ASSOCIATE_OP expression
    (102) expression -> expression . RANGE_OP expression
    (103) expression -> expression . SEARCH_MODIFY expression
    (104) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 223
    OR_STR_OP       shift and go to state 129
    XOR_STR_OP      shift and go to state 125
    AND_STR_OP      shift and go to state 119
    NOT_STR_OP      shift and go to state 113
    COMPARE_OP      shift and go to state 110
    BIT_OR          shift and go to state 135
    BIT_XOR         shift and go to state 116
    BIT_AND         shift and go to state 126
    AND_OP          shift and go to state 130
    OR_OP           shift and go to state 120
    EQUALS_OP       shift and go to state 117
    NOT_EQUALS_OP   shift and go to state 111
    GREATER_OP      shift and go to state 138
    LESS_OP         shift and go to state 121
    GREATER_EQUAL_OP shift and go to state 124
    LESS_EQUAL_OP   shift and go to state 108
    PLUS_OP         shift and go to state 136
    MINUS_OP        shift and go to state 109
    MULTIPLICATION_OP shift and go to state 127
    DIVISION_OP     shift and go to state 114
    MODULUS_OP      shift and go to state 123
    EXPONENT_OP     shift and go to state 112
    BIT_RIGHT_SHIFT shift and go to state 134
    BIT_LEFT_SHIFT  shift and go to state 131
    CONCATENATE     shift and go to state 133
    REP_OP          shift and go to state 132
    COMMA           shift and go to state 122
    ASSOCIATE_OP    shift and go to state 128
    RANGE_OP        shift and go to state 115
    SEARCH_MODIFY   shift and go to state 107
    SEARCH_MODIFY_NEG shift and go to state 137


state 221

    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .

    RETURN          reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    IDENTIFIER      reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    WHILE           reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    FOR             reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    PRINT           reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    SUB             reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    LAST            reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    NEXT            reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    IF              reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    USE             reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    SWITCH          reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    PRIVATE         reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    LOCAL           reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    OPEN_PARANTHESIS reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    ARRAY           reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    VARIABLE        reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    BLOCK_ENDS      reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)
    $end            reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block ELSE block .)


state 222

    (23) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block . caselist
    (23) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (24) caselist -> . ELSE block
    (25) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 190
    ELSE            shift and go to state 192
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 224
    empty                          shift and go to state 193

state 223

    (51) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 225

state 224

    (23) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .

    BLOCK_ENDS      reduce using rule 23 (caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .)


state 225

    (51) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .

    RETURN          reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    IDENTIFIER      reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    WHILE           reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    FOR             reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    PRINT           reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    SUB             reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    LAST            reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    NEXT            reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    IF              reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    USE             reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    SWITCH          reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    PRIVATE         reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    LOCAL           reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    OPEN_PARANTHESIS reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    ARRAY           reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    VARIABLE        reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    BLOCK_ENDS      reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    $end            reduce using rule 51 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 157 resolved as shift
WARNING: reduce/reduce conflict in state 145 resolved using rule (parameters -> empty)
WARNING: rejected rule (expression -> empty) in state 145
WARNING: reduce/reduce conflict in state 212 resolved using rule (parameters -> expression)
WARNING: rejected rule (expression -> expression COMMA expression) in state 212
