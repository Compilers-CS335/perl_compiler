Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    FORMAT
    COMMENT
    OPEN_BRACKET
    TRANSLATION
    GOTO
    FOREACH
    ELSIF
    SUBSTITUTE
    SELECT
    FILE_HANDLING_OPTIONS
    COLON
    UNLESS
    DECREMENT_OP
    UNTIL
    WHITESPACE
    USER_INPUT_OP
    QUESTION_MARK
    REDO
    ARRAY
    HASH
    WRITE
    MATCH
    INCREMENT_OP
    CLOSE_BRACKET
    DO
    SYSTEM_COMMAND
    CONTINUE

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     start -> statements
Rule 3     block -> BLOCK_BEGIN statements BLOCK_ENDS
Rule 4     statements -> statement statements
Rule 5     statements -> statement
Rule 6     empty -> <empty>
Rule 7     statement -> assignment Marker
Rule 8     statement -> declaration Marker
Rule 9     statement -> returnStatement Marker
Rule 10    statement -> functionCall Marker
Rule 11    statement -> whileStatement Marker
Rule 12    statement -> forStatement Marker
Rule 13    statement -> printStatement Marker
Rule 14    statement -> functionStatement Marker
Rule 15    statement -> lastStatement Marker
Rule 16    statement -> nextStatement Marker
Rule 17    statement -> ifthen Marker
Rule 18    statement -> ifthenelse Marker
Rule 19    statement -> useStatement Marker
Rule 20    statement -> switchStatement Marker
Rule 21    useStatement -> USE IDENTIFIER SEMICOLON
Rule 22    switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
Rule 23    caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
Rule 24    caselist -> ELSE block
Rule 25    caselist -> empty
Rule 26    ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block
Rule 27    ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block
Rule 28    Markerif -> empty
Rule 29    Markerelse -> empty
Rule 30    lastStatement -> LAST SEMICOLON
Rule 31    nextStatement -> NEXT SEMICOLON
Rule 32    functionStatement -> SUB IDENTIFIER block
Rule 33    printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
Rule 34    printStatement -> PRINT expression SEMICOLON
Rule 35    returnStatement -> RETURN expression SEMICOLON
Rule 36    assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 37    assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 38    assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 39    assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
Rule 40    assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
Rule 41    assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
Rule 42    declaration -> VARIABLE decList SEMICOLON
Rule 43    declaration -> PRIVATE VARIABLE decList SEMICOLON
Rule 44    declaration -> LOCAL VARIABLE decList SEMICOLON
Rule 45    decList -> COMMA VARIABLE decList
Rule 46    decList -> empty
Rule 47    functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
Rule 48    term -> functionCall
Rule 49    parameters -> expression COMMA parameters
Rule 50    parameters -> expression
Rule 51    parameters -> empty
Rule 52    whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
Rule 53    Markerwhile -> empty
Rule 54    forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
Rule 55    string -> STRING
Rule 56    string -> RES_STRING
Rule 57    number -> NUMBER
Rule 58    number -> SCI_NOT
Rule 59    number -> FLOAT
Rule 60    number -> HEXADECIMAL
Rule 61    number -> OCTAL
Rule 62    term -> number
Rule 63    term -> string
Rule 64    term -> VARIABLE
Rule 65    term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
Rule 66    expression -> PLUS_OP expression
Rule 67    expression -> MINUS_OP expression
Rule 68    expression -> BIT_FLIP expression
Rule 69    expression -> NOT_OP expression
Rule 70    expression -> empty
Rule 71    expression -> term
Rule 72    expression -> expression OR_STR_OP expression
Rule 73    expression -> expression XOR_STR_OP expression
Rule 74    expression -> expression AND_STR_OP expression
Rule 75    expression -> expression NOT_STR_OP expression
Rule 76    expression -> expression COMPARE_OP expression
Rule 77    expression -> expression BIT_OR expression
Rule 78    expression -> expression BIT_XOR expression
Rule 79    expression -> expression BIT_AND expression
Rule 80    expression -> expression AND_OP Marker expression
Rule 81    expression -> expression OR_OP Marker expression
Rule 82    expression -> expression EQUALS_OP expression
Rule 83    expression -> expression NOT_EQUALS_OP expression
Rule 84    expression -> expression GREATER_OP expression
Rule 85    expression -> expression LESS_OP expression
Rule 86    expression -> expression GREATER_EQUAL_OP expression
Rule 87    expression -> expression LESS_EQUAL_OP expression
Rule 88    Marker -> empty
Rule 89    expression -> expression PLUS_OP expression
Rule 90    expression -> expression MINUS_OP expression
Rule 91    expression -> expression MULTIPLICATION_OP expression
Rule 92    expression -> expression DIVISION_OP expression
Rule 93    expression -> expression MODULUS_OP expression
Rule 94    expression -> expression EXPONENT_OP expression
Rule 95    expression -> expression BIT_RIGHT_SHIFT expression
Rule 96    expression -> expression BIT_LEFT_SHIFT expression
Rule 97    expression -> expression CONCATENATE expression
Rule 98    expression -> expression REP_OP expression
Rule 99    expression -> expression COMMA expression
Rule 100   expression -> expression ASSOCIATE_OP expression
Rule 101   expression -> expression RANGE_OP expression
Rule 102   expression -> expression SEARCH_MODIFY expression
Rule 103   expression -> expression SEARCH_MODIFY_NEG expression

Terminals, with rules where they appear

ADV_ASSIGNMENT_OP    : 39 40 41
AND_OP               : 80
AND_STR_OP           : 74
ARRAY                : 
ASSIGNMENT_OP        : 36 37 38
ASSOCIATE_OP         : 100
BIT_AND              : 79
BIT_FLIP             : 68
BIT_LEFT_SHIFT       : 96
BIT_OR               : 77
BIT_RIGHT_SHIFT      : 95
BIT_XOR              : 78
BLOCK_BEGIN          : 3 22
BLOCK_ENDS           : 3 22
CASE                 : 23
CLOSE_BRACKET        : 
CLOSE_PARANTHESIS    : 23 26 27 33 47 52 54 65
COLON                : 
COMMA                : 45 49 99
COMMENT              : 
COMPARE_OP           : 76
CONCATENATE          : 97
CONTINUE             : 
DECREMENT_OP         : 
DIVISION_OP          : 92
DO                   : 
ELSE                 : 24 27
ELSIF                : 
EQUALS_OP            : 82
EXPONENT_OP          : 94
FILE_HANDLING_OPTIONS : 
FLOAT                : 59
FOR                  : 54
FOREACH              : 
FORMAT               : 
GOTO                 : 
GREATER_EQUAL_OP     : 86
GREATER_OP           : 84
HASH                 : 
HEXADECIMAL          : 60
IDENTIFIER           : 21 32 47
IF                   : 26 27
INCREMENT_OP         : 
LAST                 : 30
LESS_EQUAL_OP        : 87
LESS_OP              : 85
LOCAL                : 38 41 44
MATCH                : 
MINUS_OP             : 67 90
MODULUS_OP           : 93
MULTIPLICATION_OP    : 91
NEXT                 : 31
NOT_EQUALS_OP        : 83
NOT_OP               : 69
NOT_STR_OP           : 75
NUMBER               : 57
OCTAL                : 61
OPEN_BRACKET         : 
OPEN_PARANTHESIS     : 23 26 27 33 47 52 54 65
OR_OP                : 81
OR_STR_OP            : 72
PLUS_OP              : 66 89
PRINT                : 33 34
PRIVATE              : 37 40 43
QUESTION_MARK        : 
RANGE_OP             : 101
REDO                 : 
REP_OP               : 98
RES_STRING           : 56
RETURN               : 35
SCI_NOT              : 58
SEARCH_MODIFY        : 102
SEARCH_MODIFY_NEG    : 103
SELECT               : 
SEMICOLON            : 21 30 31 33 34 35 36 37 38 39 40 41 42 43 44 47 54 54
STRING               : 55
SUB                  : 32
SUBSTITUTE           : 
SWITCH               : 22
SYSTEM_COMMAND       : 
TRANSLATION          : 
UNLESS               : 
UNTIL                : 
USE                  : 21
USER_INPUT_OP        : 
VARIABLE             : 36 37 38 39 40 41 42 43 44 45 64
WHILE                : 52
WHITESPACE           : 
WRITE                : 
XOR_STR_OP           : 73
error                : 

Nonterminals, with rules where they appear

Marker               : 7 8 9 10 11 12 13 14 15 16 17 18 19 20 52 80 81
Markerelse           : 27
Markerif             : 26 27
Markerwhile          : 52
assignment           : 7
block                : 1 23 24 26 27 27 32 52 54
caselist             : 22 23
decList              : 42 43 44 45
declaration          : 8
empty                : 25 28 29 46 51 53 70 88
expression           : 22 23 26 27 33 34 35 36 37 38 39 40 41 49 50 52 54 54 54 65 66 67 68 69 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103
forStatement         : 12
functionCall         : 10 48
functionStatement    : 14
ifthen               : 17
ifthenelse           : 18
lastStatement        : 15
nextStatement        : 16
number               : 62
parameters           : 47 49
printStatement       : 13
returnStatement      : 9
start                : 0
statement            : 4 5
statements           : 2 3 4
string               : 63
switchStatement      : 20
term                 : 71
useStatement         : 19
whileStatement       : 11

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) start -> . statements
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . switchStatement Marker
    (36) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (37) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (38) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (39) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (42) declaration -> . VARIABLE decList SEMICOLON
    (43) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (44) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (35) returnStatement -> . RETURN expression SEMICOLON
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (52) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (54) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (33) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (34) printStatement -> . PRINT expression SEMICOLON
    (32) functionStatement -> . SUB IDENTIFIER block
    (30) lastStatement -> . LAST SEMICOLON
    (31) nextStatement -> . NEXT SEMICOLON
    (26) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block
    (27) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block
    (21) useStatement -> . USE IDENTIFIER SEMICOLON
    (22) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 6
    VARIABLE        shift and go to state 29
    PRIVATE         shift and go to state 15
    LOCAL           shift and go to state 31
    RETURN          shift and go to state 9
    IDENTIFIER      shift and go to state 22
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    PRINT           shift and go to state 8
    SUB             shift and go to state 11
    LAST            shift and go to state 12
    NEXT            shift and go to state 16
    IF              shift and go to state 32
    USE             shift and go to state 2
    SWITCH          shift and go to state 14

    forStatement                   shift and go to state 1
    statements                     shift and go to state 3
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 5
    ifthen                         shift and go to state 10
    nextStatement                  shift and go to state 13
    start                          shift and go to state 17
    lastStatement                  shift and go to state 18
    useStatement                   shift and go to state 19
    statement                      shift and go to state 20
    printStatement                 shift and go to state 21
    ifthenelse                     shift and go to state 23
    assignment                     shift and go to state 25
    whileStatement                 shift and go to state 26
    functionCall                   shift and go to state 27
    declaration                    shift and go to state 28
    returnStatement                shift and go to state 30
    block                          shift and go to state 33

state 1

    (12) statement -> forStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 34
    empty                          shift and go to state 35

state 2

    (21) useStatement -> USE . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 36


state 3

    (2) start -> statements .

    $end            reduce using rule 2 (start -> statements .)


state 4

    (14) statement -> functionStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 37
    empty                          shift and go to state 35

state 5

    (20) statement -> switchStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 38
    empty                          shift and go to state 35

state 6

    (3) block -> BLOCK_BEGIN . statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . switchStatement Marker
    (36) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (37) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (38) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (39) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (42) declaration -> . VARIABLE decList SEMICOLON
    (43) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (44) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (35) returnStatement -> . RETURN expression SEMICOLON
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (52) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (54) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (33) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (34) printStatement -> . PRINT expression SEMICOLON
    (32) functionStatement -> . SUB IDENTIFIER block
    (30) lastStatement -> . LAST SEMICOLON
    (31) nextStatement -> . NEXT SEMICOLON
    (26) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block
    (27) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block
    (21) useStatement -> . USE IDENTIFIER SEMICOLON
    (22) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS

    VARIABLE        shift and go to state 29
    PRIVATE         shift and go to state 15
    LOCAL           shift and go to state 31
    RETURN          shift and go to state 9
    IDENTIFIER      shift and go to state 22
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    PRINT           shift and go to state 8
    SUB             shift and go to state 11
    LAST            shift and go to state 12
    NEXT            shift and go to state 16
    IF              shift and go to state 32
    USE             shift and go to state 2
    SWITCH          shift and go to state 14

    forStatement                   shift and go to state 1
    statements                     shift and go to state 39
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 5
    ifthen                         shift and go to state 10
    nextStatement                  shift and go to state 13
    lastStatement                  shift and go to state 18
    useStatement                   shift and go to state 19
    statement                      shift and go to state 20
    printStatement                 shift and go to state 21
    ifthenelse                     shift and go to state 23
    assignment                     shift and go to state 25
    whileStatement                 shift and go to state 26
    functionCall                   shift and go to state 27
    declaration                    shift and go to state 28
    returnStatement                shift and go to state 30

state 7

    (52) whileStatement -> WHILE . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (88) Marker -> . empty
    (6) empty -> .

    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 40
    empty                          shift and go to state 35

state 8

    (33) printStatement -> PRINT . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (34) printStatement -> PRINT . expression SEMICOLON
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    OPEN_PARANTHESIS shift and go to state 41
    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 59
    empty                          shift and go to state 49

state 9

    (35) returnStatement -> RETURN . expression SEMICOLON
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 61
    empty                          shift and go to state 49

state 10

    (17) statement -> ifthen . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 62
    empty                          shift and go to state 35

state 11

    (32) functionStatement -> SUB . IDENTIFIER block

    IDENTIFIER      shift and go to state 63


state 12

    (30) lastStatement -> LAST . SEMICOLON

    SEMICOLON       shift and go to state 64


state 13

    (16) statement -> nextStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 65
    empty                          shift and go to state 35

state 14

    (22) switchStatement -> SWITCH . expression BLOCK_BEGIN caselist BLOCK_ENDS
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 66
    empty                          shift and go to state 49

state 15

    (37) assignment -> PRIVATE . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> PRIVATE . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (43) declaration -> PRIVATE . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 67


state 16

    (31) nextStatement -> NEXT . SEMICOLON

    SEMICOLON       shift and go to state 68


state 17

    (0) S' -> start .



state 18

    (15) statement -> lastStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 69
    empty                          shift and go to state 35

state 19

    (19) statement -> useStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 70
    empty                          shift and go to state 35

state 20

    (4) statements -> statement . statements
    (5) statements -> statement .
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . returnStatement Marker
    (10) statement -> . functionCall Marker
    (11) statement -> . whileStatement Marker
    (12) statement -> . forStatement Marker
    (13) statement -> . printStatement Marker
    (14) statement -> . functionStatement Marker
    (15) statement -> . lastStatement Marker
    (16) statement -> . nextStatement Marker
    (17) statement -> . ifthen Marker
    (18) statement -> . ifthenelse Marker
    (19) statement -> . useStatement Marker
    (20) statement -> . switchStatement Marker
    (36) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (37) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (38) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (39) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (42) declaration -> . VARIABLE decList SEMICOLON
    (43) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (44) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (35) returnStatement -> . RETURN expression SEMICOLON
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (52) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (54) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (33) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (34) printStatement -> . PRINT expression SEMICOLON
    (32) functionStatement -> . SUB IDENTIFIER block
    (30) lastStatement -> . LAST SEMICOLON
    (31) nextStatement -> . NEXT SEMICOLON
    (26) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block
    (27) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block
    (21) useStatement -> . USE IDENTIFIER SEMICOLON
    (22) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS

    $end            reduce using rule 5 (statements -> statement .)
    BLOCK_ENDS      reduce using rule 5 (statements -> statement .)
    VARIABLE        shift and go to state 29
    PRIVATE         shift and go to state 15
    LOCAL           shift and go to state 31
    RETURN          shift and go to state 9
    IDENTIFIER      shift and go to state 22
    WHILE           shift and go to state 7
    FOR             shift and go to state 24
    PRINT           shift and go to state 8
    SUB             shift and go to state 11
    LAST            shift and go to state 12
    NEXT            shift and go to state 16
    IF              shift and go to state 32
    USE             shift and go to state 2
    SWITCH          shift and go to state 14

    forStatement                   shift and go to state 1
    statements                     shift and go to state 71
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 5
    ifthen                         shift and go to state 10
    nextStatement                  shift and go to state 13
    lastStatement                  shift and go to state 18
    useStatement                   shift and go to state 19
    statement                      shift and go to state 20
    printStatement                 shift and go to state 21
    ifthenelse                     shift and go to state 23
    assignment                     shift and go to state 25
    whileStatement                 shift and go to state 26
    functionCall                   shift and go to state 27
    declaration                    shift and go to state 28
    returnStatement                shift and go to state 30

state 21

    (13) statement -> printStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 72
    empty                          shift and go to state 35

state 22

    (47) functionCall -> IDENTIFIER . OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS shift and go to state 73


state 23

    (18) statement -> ifthenelse . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 74
    empty                          shift and go to state 35

state 24

    (54) forStatement -> FOR . OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block

    OPEN_PARANTHESIS shift and go to state 75


state 25

    (7) statement -> assignment . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 76
    empty                          shift and go to state 35

state 26

    (11) statement -> whileStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 77
    empty                          shift and go to state 35

state 27

    (10) statement -> functionCall . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 78
    empty                          shift and go to state 35

state 28

    (8) statement -> declaration . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 79
    empty                          shift and go to state 35

state 29

    (36) assignment -> VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (39) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression SEMICOLON
    (42) declaration -> VARIABLE . decList SEMICOLON
    (45) decList -> . COMMA VARIABLE decList
    (46) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 83
    ADV_ASSIGNMENT_OP shift and go to state 81
    COMMA           shift and go to state 82
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 84
    decList                        shift and go to state 80

state 30

    (9) statement -> returnStatement . Marker
    (88) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 85
    empty                          shift and go to state 35

state 31

    (38) assignment -> LOCAL . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> LOCAL . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (44) declaration -> LOCAL . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 86


state 32

    (26) ifthen -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block
    (27) ifthenelse -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block

    OPEN_PARANTHESIS shift and go to state 87


state 33

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 34

    (12) statement -> forStatement Marker .

    VARIABLE        reduce using rule 12 (statement -> forStatement Marker .)
    PRIVATE         reduce using rule 12 (statement -> forStatement Marker .)
    LOCAL           reduce using rule 12 (statement -> forStatement Marker .)
    RETURN          reduce using rule 12 (statement -> forStatement Marker .)
    IDENTIFIER      reduce using rule 12 (statement -> forStatement Marker .)
    WHILE           reduce using rule 12 (statement -> forStatement Marker .)
    FOR             reduce using rule 12 (statement -> forStatement Marker .)
    PRINT           reduce using rule 12 (statement -> forStatement Marker .)
    SUB             reduce using rule 12 (statement -> forStatement Marker .)
    LAST            reduce using rule 12 (statement -> forStatement Marker .)
    NEXT            reduce using rule 12 (statement -> forStatement Marker .)
    IF              reduce using rule 12 (statement -> forStatement Marker .)
    USE             reduce using rule 12 (statement -> forStatement Marker .)
    SWITCH          reduce using rule 12 (statement -> forStatement Marker .)
    $end            reduce using rule 12 (statement -> forStatement Marker .)
    BLOCK_ENDS      reduce using rule 12 (statement -> forStatement Marker .)


state 35

    (88) Marker -> empty .

    VARIABLE        reduce using rule 88 (Marker -> empty .)
    PRIVATE         reduce using rule 88 (Marker -> empty .)
    LOCAL           reduce using rule 88 (Marker -> empty .)
    RETURN          reduce using rule 88 (Marker -> empty .)
    IDENTIFIER      reduce using rule 88 (Marker -> empty .)
    WHILE           reduce using rule 88 (Marker -> empty .)
    FOR             reduce using rule 88 (Marker -> empty .)
    PRINT           reduce using rule 88 (Marker -> empty .)
    SUB             reduce using rule 88 (Marker -> empty .)
    LAST            reduce using rule 88 (Marker -> empty .)
    NEXT            reduce using rule 88 (Marker -> empty .)
    IF              reduce using rule 88 (Marker -> empty .)
    USE             reduce using rule 88 (Marker -> empty .)
    SWITCH          reduce using rule 88 (Marker -> empty .)
    $end            reduce using rule 88 (Marker -> empty .)
    BLOCK_ENDS      reduce using rule 88 (Marker -> empty .)
    PLUS_OP         reduce using rule 88 (Marker -> empty .)
    MINUS_OP        reduce using rule 88 (Marker -> empty .)
    BIT_FLIP        reduce using rule 88 (Marker -> empty .)
    NOT_OP          reduce using rule 88 (Marker -> empty .)
    OPEN_PARANTHESIS reduce using rule 88 (Marker -> empty .)
    NUMBER          reduce using rule 88 (Marker -> empty .)
    SCI_NOT         reduce using rule 88 (Marker -> empty .)
    FLOAT           reduce using rule 88 (Marker -> empty .)
    HEXADECIMAL     reduce using rule 88 (Marker -> empty .)
    OCTAL           reduce using rule 88 (Marker -> empty .)
    STRING          reduce using rule 88 (Marker -> empty .)
    RES_STRING      reduce using rule 88 (Marker -> empty .)
    OR_STR_OP       reduce using rule 88 (Marker -> empty .)
    XOR_STR_OP      reduce using rule 88 (Marker -> empty .)
    AND_STR_OP      reduce using rule 88 (Marker -> empty .)
    NOT_STR_OP      reduce using rule 88 (Marker -> empty .)
    COMPARE_OP      reduce using rule 88 (Marker -> empty .)
    BIT_OR          reduce using rule 88 (Marker -> empty .)
    BIT_XOR         reduce using rule 88 (Marker -> empty .)
    BIT_AND         reduce using rule 88 (Marker -> empty .)
    AND_OP          reduce using rule 88 (Marker -> empty .)
    OR_OP           reduce using rule 88 (Marker -> empty .)
    EQUALS_OP       reduce using rule 88 (Marker -> empty .)
    NOT_EQUALS_OP   reduce using rule 88 (Marker -> empty .)
    GREATER_OP      reduce using rule 88 (Marker -> empty .)
    LESS_OP         reduce using rule 88 (Marker -> empty .)
    GREATER_EQUAL_OP reduce using rule 88 (Marker -> empty .)
    LESS_EQUAL_OP   reduce using rule 88 (Marker -> empty .)
    MULTIPLICATION_OP reduce using rule 88 (Marker -> empty .)
    DIVISION_OP     reduce using rule 88 (Marker -> empty .)
    MODULUS_OP      reduce using rule 88 (Marker -> empty .)
    EXPONENT_OP     reduce using rule 88 (Marker -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 88 (Marker -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 88 (Marker -> empty .)
    CONCATENATE     reduce using rule 88 (Marker -> empty .)
    REP_OP          reduce using rule 88 (Marker -> empty .)
    COMMA           reduce using rule 88 (Marker -> empty .)
    ASSOCIATE_OP    reduce using rule 88 (Marker -> empty .)
    RANGE_OP        reduce using rule 88 (Marker -> empty .)
    SEARCH_MODIFY   reduce using rule 88 (Marker -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 88 (Marker -> empty .)
    SEMICOLON       reduce using rule 88 (Marker -> empty .)
    BLOCK_BEGIN     reduce using rule 88 (Marker -> empty .)
    CLOSE_PARANTHESIS reduce using rule 88 (Marker -> empty .)


state 36

    (21) useStatement -> USE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 88


state 37

    (14) statement -> functionStatement Marker .

    VARIABLE        reduce using rule 14 (statement -> functionStatement Marker .)
    PRIVATE         reduce using rule 14 (statement -> functionStatement Marker .)
    LOCAL           reduce using rule 14 (statement -> functionStatement Marker .)
    RETURN          reduce using rule 14 (statement -> functionStatement Marker .)
    IDENTIFIER      reduce using rule 14 (statement -> functionStatement Marker .)
    WHILE           reduce using rule 14 (statement -> functionStatement Marker .)
    FOR             reduce using rule 14 (statement -> functionStatement Marker .)
    PRINT           reduce using rule 14 (statement -> functionStatement Marker .)
    SUB             reduce using rule 14 (statement -> functionStatement Marker .)
    LAST            reduce using rule 14 (statement -> functionStatement Marker .)
    NEXT            reduce using rule 14 (statement -> functionStatement Marker .)
    IF              reduce using rule 14 (statement -> functionStatement Marker .)
    USE             reduce using rule 14 (statement -> functionStatement Marker .)
    SWITCH          reduce using rule 14 (statement -> functionStatement Marker .)
    $end            reduce using rule 14 (statement -> functionStatement Marker .)
    BLOCK_ENDS      reduce using rule 14 (statement -> functionStatement Marker .)


state 38

    (20) statement -> switchStatement Marker .

    VARIABLE        reduce using rule 20 (statement -> switchStatement Marker .)
    PRIVATE         reduce using rule 20 (statement -> switchStatement Marker .)
    LOCAL           reduce using rule 20 (statement -> switchStatement Marker .)
    RETURN          reduce using rule 20 (statement -> switchStatement Marker .)
    IDENTIFIER      reduce using rule 20 (statement -> switchStatement Marker .)
    WHILE           reduce using rule 20 (statement -> switchStatement Marker .)
    FOR             reduce using rule 20 (statement -> switchStatement Marker .)
    PRINT           reduce using rule 20 (statement -> switchStatement Marker .)
    SUB             reduce using rule 20 (statement -> switchStatement Marker .)
    LAST            reduce using rule 20 (statement -> switchStatement Marker .)
    NEXT            reduce using rule 20 (statement -> switchStatement Marker .)
    IF              reduce using rule 20 (statement -> switchStatement Marker .)
    USE             reduce using rule 20 (statement -> switchStatement Marker .)
    SWITCH          reduce using rule 20 (statement -> switchStatement Marker .)
    $end            reduce using rule 20 (statement -> switchStatement Marker .)
    BLOCK_ENDS      reduce using rule 20 (statement -> switchStatement Marker .)


state 39

    (3) block -> BLOCK_BEGIN statements . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 89


state 40

    (52) whileStatement -> WHILE Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block

    OPEN_PARANTHESIS shift and go to state 90


state 41

    (33) printStatement -> PRINT OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS SEMICOLON
    (65) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 91
    empty                          shift and go to state 49

state 42

    (67) expression -> MINUS_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 92
    empty                          shift and go to state 49

state 43

    (62) term -> number .

    SEMICOLON       reduce using rule 62 (term -> number .)
    OR_STR_OP       reduce using rule 62 (term -> number .)
    XOR_STR_OP      reduce using rule 62 (term -> number .)
    AND_STR_OP      reduce using rule 62 (term -> number .)
    NOT_STR_OP      reduce using rule 62 (term -> number .)
    COMPARE_OP      reduce using rule 62 (term -> number .)
    BIT_OR          reduce using rule 62 (term -> number .)
    BIT_XOR         reduce using rule 62 (term -> number .)
    BIT_AND         reduce using rule 62 (term -> number .)
    AND_OP          reduce using rule 62 (term -> number .)
    OR_OP           reduce using rule 62 (term -> number .)
    EQUALS_OP       reduce using rule 62 (term -> number .)
    NOT_EQUALS_OP   reduce using rule 62 (term -> number .)
    GREATER_OP      reduce using rule 62 (term -> number .)
    LESS_OP         reduce using rule 62 (term -> number .)
    GREATER_EQUAL_OP reduce using rule 62 (term -> number .)
    LESS_EQUAL_OP   reduce using rule 62 (term -> number .)
    PLUS_OP         reduce using rule 62 (term -> number .)
    MINUS_OP        reduce using rule 62 (term -> number .)
    MULTIPLICATION_OP reduce using rule 62 (term -> number .)
    DIVISION_OP     reduce using rule 62 (term -> number .)
    MODULUS_OP      reduce using rule 62 (term -> number .)
    EXPONENT_OP     reduce using rule 62 (term -> number .)
    BIT_RIGHT_SHIFT reduce using rule 62 (term -> number .)
    BIT_LEFT_SHIFT  reduce using rule 62 (term -> number .)
    CONCATENATE     reduce using rule 62 (term -> number .)
    REP_OP          reduce using rule 62 (term -> number .)
    COMMA           reduce using rule 62 (term -> number .)
    ASSOCIATE_OP    reduce using rule 62 (term -> number .)
    RANGE_OP        reduce using rule 62 (term -> number .)
    SEARCH_MODIFY   reduce using rule 62 (term -> number .)
    SEARCH_MODIFY_NEG reduce using rule 62 (term -> number .)
    BLOCK_BEGIN     reduce using rule 62 (term -> number .)
    CLOSE_PARANTHESIS reduce using rule 62 (term -> number .)


state 44

    (69) expression -> NOT_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 93
    empty                          shift and go to state 49

state 45

    (60) number -> HEXADECIMAL .

    OR_STR_OP       reduce using rule 60 (number -> HEXADECIMAL .)
    XOR_STR_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    AND_STR_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    NOT_STR_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    COMPARE_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_OR          reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_XOR         reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_AND         reduce using rule 60 (number -> HEXADECIMAL .)
    AND_OP          reduce using rule 60 (number -> HEXADECIMAL .)
    OR_OP           reduce using rule 60 (number -> HEXADECIMAL .)
    EQUALS_OP       reduce using rule 60 (number -> HEXADECIMAL .)
    NOT_EQUALS_OP   reduce using rule 60 (number -> HEXADECIMAL .)
    GREATER_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    LESS_OP         reduce using rule 60 (number -> HEXADECIMAL .)
    GREATER_EQUAL_OP reduce using rule 60 (number -> HEXADECIMAL .)
    LESS_EQUAL_OP   reduce using rule 60 (number -> HEXADECIMAL .)
    PLUS_OP         reduce using rule 60 (number -> HEXADECIMAL .)
    MINUS_OP        reduce using rule 60 (number -> HEXADECIMAL .)
    MULTIPLICATION_OP reduce using rule 60 (number -> HEXADECIMAL .)
    DIVISION_OP     reduce using rule 60 (number -> HEXADECIMAL .)
    MODULUS_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    EXPONENT_OP     reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_RIGHT_SHIFT reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_LEFT_SHIFT  reduce using rule 60 (number -> HEXADECIMAL .)
    CONCATENATE     reduce using rule 60 (number -> HEXADECIMAL .)
    REP_OP          reduce using rule 60 (number -> HEXADECIMAL .)
    COMMA           reduce using rule 60 (number -> HEXADECIMAL .)
    ASSOCIATE_OP    reduce using rule 60 (number -> HEXADECIMAL .)
    RANGE_OP        reduce using rule 60 (number -> HEXADECIMAL .)
    SEARCH_MODIFY   reduce using rule 60 (number -> HEXADECIMAL .)
    SEARCH_MODIFY_NEG reduce using rule 60 (number -> HEXADECIMAL .)
    SEMICOLON       reduce using rule 60 (number -> HEXADECIMAL .)
    BLOCK_BEGIN     reduce using rule 60 (number -> HEXADECIMAL .)
    CLOSE_PARANTHESIS reduce using rule 60 (number -> HEXADECIMAL .)


state 46

    (63) term -> string .

    SEMICOLON       reduce using rule 63 (term -> string .)
    OR_STR_OP       reduce using rule 63 (term -> string .)
    XOR_STR_OP      reduce using rule 63 (term -> string .)
    AND_STR_OP      reduce using rule 63 (term -> string .)
    NOT_STR_OP      reduce using rule 63 (term -> string .)
    COMPARE_OP      reduce using rule 63 (term -> string .)
    BIT_OR          reduce using rule 63 (term -> string .)
    BIT_XOR         reduce using rule 63 (term -> string .)
    BIT_AND         reduce using rule 63 (term -> string .)
    AND_OP          reduce using rule 63 (term -> string .)
    OR_OP           reduce using rule 63 (term -> string .)
    EQUALS_OP       reduce using rule 63 (term -> string .)
    NOT_EQUALS_OP   reduce using rule 63 (term -> string .)
    GREATER_OP      reduce using rule 63 (term -> string .)
    LESS_OP         reduce using rule 63 (term -> string .)
    GREATER_EQUAL_OP reduce using rule 63 (term -> string .)
    LESS_EQUAL_OP   reduce using rule 63 (term -> string .)
    PLUS_OP         reduce using rule 63 (term -> string .)
    MINUS_OP        reduce using rule 63 (term -> string .)
    MULTIPLICATION_OP reduce using rule 63 (term -> string .)
    DIVISION_OP     reduce using rule 63 (term -> string .)
    MODULUS_OP      reduce using rule 63 (term -> string .)
    EXPONENT_OP     reduce using rule 63 (term -> string .)
    BIT_RIGHT_SHIFT reduce using rule 63 (term -> string .)
    BIT_LEFT_SHIFT  reduce using rule 63 (term -> string .)
    CONCATENATE     reduce using rule 63 (term -> string .)
    REP_OP          reduce using rule 63 (term -> string .)
    COMMA           reduce using rule 63 (term -> string .)
    ASSOCIATE_OP    reduce using rule 63 (term -> string .)
    RANGE_OP        reduce using rule 63 (term -> string .)
    SEARCH_MODIFY   reduce using rule 63 (term -> string .)
    SEARCH_MODIFY_NEG reduce using rule 63 (term -> string .)
    BLOCK_BEGIN     reduce using rule 63 (term -> string .)
    CLOSE_PARANTHESIS reduce using rule 63 (term -> string .)


state 47

    (68) expression -> BIT_FLIP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 94
    empty                          shift and go to state 49

state 48

    (55) string -> STRING .

    OR_STR_OP       reduce using rule 55 (string -> STRING .)
    XOR_STR_OP      reduce using rule 55 (string -> STRING .)
    AND_STR_OP      reduce using rule 55 (string -> STRING .)
    NOT_STR_OP      reduce using rule 55 (string -> STRING .)
    COMPARE_OP      reduce using rule 55 (string -> STRING .)
    BIT_OR          reduce using rule 55 (string -> STRING .)
    BIT_XOR         reduce using rule 55 (string -> STRING .)
    BIT_AND         reduce using rule 55 (string -> STRING .)
    AND_OP          reduce using rule 55 (string -> STRING .)
    OR_OP           reduce using rule 55 (string -> STRING .)
    EQUALS_OP       reduce using rule 55 (string -> STRING .)
    NOT_EQUALS_OP   reduce using rule 55 (string -> STRING .)
    GREATER_OP      reduce using rule 55 (string -> STRING .)
    LESS_OP         reduce using rule 55 (string -> STRING .)
    GREATER_EQUAL_OP reduce using rule 55 (string -> STRING .)
    LESS_EQUAL_OP   reduce using rule 55 (string -> STRING .)
    PLUS_OP         reduce using rule 55 (string -> STRING .)
    MINUS_OP        reduce using rule 55 (string -> STRING .)
    MULTIPLICATION_OP reduce using rule 55 (string -> STRING .)
    DIVISION_OP     reduce using rule 55 (string -> STRING .)
    MODULUS_OP      reduce using rule 55 (string -> STRING .)
    EXPONENT_OP     reduce using rule 55 (string -> STRING .)
    BIT_RIGHT_SHIFT reduce using rule 55 (string -> STRING .)
    BIT_LEFT_SHIFT  reduce using rule 55 (string -> STRING .)
    CONCATENATE     reduce using rule 55 (string -> STRING .)
    REP_OP          reduce using rule 55 (string -> STRING .)
    COMMA           reduce using rule 55 (string -> STRING .)
    ASSOCIATE_OP    reduce using rule 55 (string -> STRING .)
    RANGE_OP        reduce using rule 55 (string -> STRING .)
    SEARCH_MODIFY   reduce using rule 55 (string -> STRING .)
    SEARCH_MODIFY_NEG reduce using rule 55 (string -> STRING .)
    SEMICOLON       reduce using rule 55 (string -> STRING .)
    BLOCK_BEGIN     reduce using rule 55 (string -> STRING .)
    CLOSE_PARANTHESIS reduce using rule 55 (string -> STRING .)


state 49

    (70) expression -> empty .

    OR_STR_OP       reduce using rule 70 (expression -> empty .)
    XOR_STR_OP      reduce using rule 70 (expression -> empty .)
    AND_STR_OP      reduce using rule 70 (expression -> empty .)
    NOT_STR_OP      reduce using rule 70 (expression -> empty .)
    COMPARE_OP      reduce using rule 70 (expression -> empty .)
    BIT_OR          reduce using rule 70 (expression -> empty .)
    BIT_XOR         reduce using rule 70 (expression -> empty .)
    BIT_AND         reduce using rule 70 (expression -> empty .)
    AND_OP          reduce using rule 70 (expression -> empty .)
    OR_OP           reduce using rule 70 (expression -> empty .)
    EQUALS_OP       reduce using rule 70 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 70 (expression -> empty .)
    GREATER_OP      reduce using rule 70 (expression -> empty .)
    LESS_OP         reduce using rule 70 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 70 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 70 (expression -> empty .)
    PLUS_OP         reduce using rule 70 (expression -> empty .)
    MINUS_OP        reduce using rule 70 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 70 (expression -> empty .)
    DIVISION_OP     reduce using rule 70 (expression -> empty .)
    MODULUS_OP      reduce using rule 70 (expression -> empty .)
    EXPONENT_OP     reduce using rule 70 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 70 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 70 (expression -> empty .)
    CONCATENATE     reduce using rule 70 (expression -> empty .)
    REP_OP          reduce using rule 70 (expression -> empty .)
    COMMA           reduce using rule 70 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 70 (expression -> empty .)
    RANGE_OP        reduce using rule 70 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 70 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 70 (expression -> empty .)
    SEMICOLON       reduce using rule 70 (expression -> empty .)
    BLOCK_BEGIN     reduce using rule 70 (expression -> empty .)
    CLOSE_PARANTHESIS reduce using rule 70 (expression -> empty .)


state 50

    (56) string -> RES_STRING .

    OR_STR_OP       reduce using rule 56 (string -> RES_STRING .)
    XOR_STR_OP      reduce using rule 56 (string -> RES_STRING .)
    AND_STR_OP      reduce using rule 56 (string -> RES_STRING .)
    NOT_STR_OP      reduce using rule 56 (string -> RES_STRING .)
    COMPARE_OP      reduce using rule 56 (string -> RES_STRING .)
    BIT_OR          reduce using rule 56 (string -> RES_STRING .)
    BIT_XOR         reduce using rule 56 (string -> RES_STRING .)
    BIT_AND         reduce using rule 56 (string -> RES_STRING .)
    AND_OP          reduce using rule 56 (string -> RES_STRING .)
    OR_OP           reduce using rule 56 (string -> RES_STRING .)
    EQUALS_OP       reduce using rule 56 (string -> RES_STRING .)
    NOT_EQUALS_OP   reduce using rule 56 (string -> RES_STRING .)
    GREATER_OP      reduce using rule 56 (string -> RES_STRING .)
    LESS_OP         reduce using rule 56 (string -> RES_STRING .)
    GREATER_EQUAL_OP reduce using rule 56 (string -> RES_STRING .)
    LESS_EQUAL_OP   reduce using rule 56 (string -> RES_STRING .)
    PLUS_OP         reduce using rule 56 (string -> RES_STRING .)
    MINUS_OP        reduce using rule 56 (string -> RES_STRING .)
    MULTIPLICATION_OP reduce using rule 56 (string -> RES_STRING .)
    DIVISION_OP     reduce using rule 56 (string -> RES_STRING .)
    MODULUS_OP      reduce using rule 56 (string -> RES_STRING .)
    EXPONENT_OP     reduce using rule 56 (string -> RES_STRING .)
    BIT_RIGHT_SHIFT reduce using rule 56 (string -> RES_STRING .)
    BIT_LEFT_SHIFT  reduce using rule 56 (string -> RES_STRING .)
    CONCATENATE     reduce using rule 56 (string -> RES_STRING .)
    REP_OP          reduce using rule 56 (string -> RES_STRING .)
    COMMA           reduce using rule 56 (string -> RES_STRING .)
    ASSOCIATE_OP    reduce using rule 56 (string -> RES_STRING .)
    RANGE_OP        reduce using rule 56 (string -> RES_STRING .)
    SEARCH_MODIFY   reduce using rule 56 (string -> RES_STRING .)
    SEARCH_MODIFY_NEG reduce using rule 56 (string -> RES_STRING .)
    SEMICOLON       reduce using rule 56 (string -> RES_STRING .)
    BLOCK_BEGIN     reduce using rule 56 (string -> RES_STRING .)
    CLOSE_PARANTHESIS reduce using rule 56 (string -> RES_STRING .)


state 51

    (57) number -> NUMBER .

    OR_STR_OP       reduce using rule 57 (number -> NUMBER .)
    XOR_STR_OP      reduce using rule 57 (number -> NUMBER .)
    AND_STR_OP      reduce using rule 57 (number -> NUMBER .)
    NOT_STR_OP      reduce using rule 57 (number -> NUMBER .)
    COMPARE_OP      reduce using rule 57 (number -> NUMBER .)
    BIT_OR          reduce using rule 57 (number -> NUMBER .)
    BIT_XOR         reduce using rule 57 (number -> NUMBER .)
    BIT_AND         reduce using rule 57 (number -> NUMBER .)
    AND_OP          reduce using rule 57 (number -> NUMBER .)
    OR_OP           reduce using rule 57 (number -> NUMBER .)
    EQUALS_OP       reduce using rule 57 (number -> NUMBER .)
    NOT_EQUALS_OP   reduce using rule 57 (number -> NUMBER .)
    GREATER_OP      reduce using rule 57 (number -> NUMBER .)
    LESS_OP         reduce using rule 57 (number -> NUMBER .)
    GREATER_EQUAL_OP reduce using rule 57 (number -> NUMBER .)
    LESS_EQUAL_OP   reduce using rule 57 (number -> NUMBER .)
    PLUS_OP         reduce using rule 57 (number -> NUMBER .)
    MINUS_OP        reduce using rule 57 (number -> NUMBER .)
    MULTIPLICATION_OP reduce using rule 57 (number -> NUMBER .)
    DIVISION_OP     reduce using rule 57 (number -> NUMBER .)
    MODULUS_OP      reduce using rule 57 (number -> NUMBER .)
    EXPONENT_OP     reduce using rule 57 (number -> NUMBER .)
    BIT_RIGHT_SHIFT reduce using rule 57 (number -> NUMBER .)
    BIT_LEFT_SHIFT  reduce using rule 57 (number -> NUMBER .)
    CONCATENATE     reduce using rule 57 (number -> NUMBER .)
    REP_OP          reduce using rule 57 (number -> NUMBER .)
    COMMA           reduce using rule 57 (number -> NUMBER .)
    ASSOCIATE_OP    reduce using rule 57 (number -> NUMBER .)
    RANGE_OP        reduce using rule 57 (number -> NUMBER .)
    SEARCH_MODIFY   reduce using rule 57 (number -> NUMBER .)
    SEARCH_MODIFY_NEG reduce using rule 57 (number -> NUMBER .)
    SEMICOLON       reduce using rule 57 (number -> NUMBER .)
    BLOCK_BEGIN     reduce using rule 57 (number -> NUMBER .)
    CLOSE_PARANTHESIS reduce using rule 57 (number -> NUMBER .)


state 52

    (48) term -> functionCall .

    SEMICOLON       reduce using rule 48 (term -> functionCall .)
    OR_STR_OP       reduce using rule 48 (term -> functionCall .)
    XOR_STR_OP      reduce using rule 48 (term -> functionCall .)
    AND_STR_OP      reduce using rule 48 (term -> functionCall .)
    NOT_STR_OP      reduce using rule 48 (term -> functionCall .)
    COMPARE_OP      reduce using rule 48 (term -> functionCall .)
    BIT_OR          reduce using rule 48 (term -> functionCall .)
    BIT_XOR         reduce using rule 48 (term -> functionCall .)
    BIT_AND         reduce using rule 48 (term -> functionCall .)
    AND_OP          reduce using rule 48 (term -> functionCall .)
    OR_OP           reduce using rule 48 (term -> functionCall .)
    EQUALS_OP       reduce using rule 48 (term -> functionCall .)
    NOT_EQUALS_OP   reduce using rule 48 (term -> functionCall .)
    GREATER_OP      reduce using rule 48 (term -> functionCall .)
    LESS_OP         reduce using rule 48 (term -> functionCall .)
    GREATER_EQUAL_OP reduce using rule 48 (term -> functionCall .)
    LESS_EQUAL_OP   reduce using rule 48 (term -> functionCall .)
    PLUS_OP         reduce using rule 48 (term -> functionCall .)
    MINUS_OP        reduce using rule 48 (term -> functionCall .)
    MULTIPLICATION_OP reduce using rule 48 (term -> functionCall .)
    DIVISION_OP     reduce using rule 48 (term -> functionCall .)
    MODULUS_OP      reduce using rule 48 (term -> functionCall .)
    EXPONENT_OP     reduce using rule 48 (term -> functionCall .)
    BIT_RIGHT_SHIFT reduce using rule 48 (term -> functionCall .)
    BIT_LEFT_SHIFT  reduce using rule 48 (term -> functionCall .)
    CONCATENATE     reduce using rule 48 (term -> functionCall .)
    REP_OP          reduce using rule 48 (term -> functionCall .)
    COMMA           reduce using rule 48 (term -> functionCall .)
    ASSOCIATE_OP    reduce using rule 48 (term -> functionCall .)
    RANGE_OP        reduce using rule 48 (term -> functionCall .)
    SEARCH_MODIFY   reduce using rule 48 (term -> functionCall .)
    SEARCH_MODIFY_NEG reduce using rule 48 (term -> functionCall .)
    BLOCK_BEGIN     reduce using rule 48 (term -> functionCall .)
    CLOSE_PARANTHESIS reduce using rule 48 (term -> functionCall .)


state 53

    (58) number -> SCI_NOT .

    OR_STR_OP       reduce using rule 58 (number -> SCI_NOT .)
    XOR_STR_OP      reduce using rule 58 (number -> SCI_NOT .)
    AND_STR_OP      reduce using rule 58 (number -> SCI_NOT .)
    NOT_STR_OP      reduce using rule 58 (number -> SCI_NOT .)
    COMPARE_OP      reduce using rule 58 (number -> SCI_NOT .)
    BIT_OR          reduce using rule 58 (number -> SCI_NOT .)
    BIT_XOR         reduce using rule 58 (number -> SCI_NOT .)
    BIT_AND         reduce using rule 58 (number -> SCI_NOT .)
    AND_OP          reduce using rule 58 (number -> SCI_NOT .)
    OR_OP           reduce using rule 58 (number -> SCI_NOT .)
    EQUALS_OP       reduce using rule 58 (number -> SCI_NOT .)
    NOT_EQUALS_OP   reduce using rule 58 (number -> SCI_NOT .)
    GREATER_OP      reduce using rule 58 (number -> SCI_NOT .)
    LESS_OP         reduce using rule 58 (number -> SCI_NOT .)
    GREATER_EQUAL_OP reduce using rule 58 (number -> SCI_NOT .)
    LESS_EQUAL_OP   reduce using rule 58 (number -> SCI_NOT .)
    PLUS_OP         reduce using rule 58 (number -> SCI_NOT .)
    MINUS_OP        reduce using rule 58 (number -> SCI_NOT .)
    MULTIPLICATION_OP reduce using rule 58 (number -> SCI_NOT .)
    DIVISION_OP     reduce using rule 58 (number -> SCI_NOT .)
    MODULUS_OP      reduce using rule 58 (number -> SCI_NOT .)
    EXPONENT_OP     reduce using rule 58 (number -> SCI_NOT .)
    BIT_RIGHT_SHIFT reduce using rule 58 (number -> SCI_NOT .)
    BIT_LEFT_SHIFT  reduce using rule 58 (number -> SCI_NOT .)
    CONCATENATE     reduce using rule 58 (number -> SCI_NOT .)
    REP_OP          reduce using rule 58 (number -> SCI_NOT .)
    COMMA           reduce using rule 58 (number -> SCI_NOT .)
    ASSOCIATE_OP    reduce using rule 58 (number -> SCI_NOT .)
    RANGE_OP        reduce using rule 58 (number -> SCI_NOT .)
    SEARCH_MODIFY   reduce using rule 58 (number -> SCI_NOT .)
    SEARCH_MODIFY_NEG reduce using rule 58 (number -> SCI_NOT .)
    SEMICOLON       reduce using rule 58 (number -> SCI_NOT .)
    BLOCK_BEGIN     reduce using rule 58 (number -> SCI_NOT .)
    CLOSE_PARANTHESIS reduce using rule 58 (number -> SCI_NOT .)


state 54

    (64) term -> VARIABLE .

    SEMICOLON       reduce using rule 64 (term -> VARIABLE .)
    OR_STR_OP       reduce using rule 64 (term -> VARIABLE .)
    XOR_STR_OP      reduce using rule 64 (term -> VARIABLE .)
    AND_STR_OP      reduce using rule 64 (term -> VARIABLE .)
    NOT_STR_OP      reduce using rule 64 (term -> VARIABLE .)
    COMPARE_OP      reduce using rule 64 (term -> VARIABLE .)
    BIT_OR          reduce using rule 64 (term -> VARIABLE .)
    BIT_XOR         reduce using rule 64 (term -> VARIABLE .)
    BIT_AND         reduce using rule 64 (term -> VARIABLE .)
    AND_OP          reduce using rule 64 (term -> VARIABLE .)
    OR_OP           reduce using rule 64 (term -> VARIABLE .)
    EQUALS_OP       reduce using rule 64 (term -> VARIABLE .)
    NOT_EQUALS_OP   reduce using rule 64 (term -> VARIABLE .)
    GREATER_OP      reduce using rule 64 (term -> VARIABLE .)
    LESS_OP         reduce using rule 64 (term -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 64 (term -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 64 (term -> VARIABLE .)
    PLUS_OP         reduce using rule 64 (term -> VARIABLE .)
    MINUS_OP        reduce using rule 64 (term -> VARIABLE .)
    MULTIPLICATION_OP reduce using rule 64 (term -> VARIABLE .)
    DIVISION_OP     reduce using rule 64 (term -> VARIABLE .)
    MODULUS_OP      reduce using rule 64 (term -> VARIABLE .)
    EXPONENT_OP     reduce using rule 64 (term -> VARIABLE .)
    BIT_RIGHT_SHIFT reduce using rule 64 (term -> VARIABLE .)
    BIT_LEFT_SHIFT  reduce using rule 64 (term -> VARIABLE .)
    CONCATENATE     reduce using rule 64 (term -> VARIABLE .)
    REP_OP          reduce using rule 64 (term -> VARIABLE .)
    COMMA           reduce using rule 64 (term -> VARIABLE .)
    ASSOCIATE_OP    reduce using rule 64 (term -> VARIABLE .)
    RANGE_OP        reduce using rule 64 (term -> VARIABLE .)
    SEARCH_MODIFY   reduce using rule 64 (term -> VARIABLE .)
    SEARCH_MODIFY_NEG reduce using rule 64 (term -> VARIABLE .)
    BLOCK_BEGIN     reduce using rule 64 (term -> VARIABLE .)
    CLOSE_PARANTHESIS reduce using rule 64 (term -> VARIABLE .)


state 55

    (71) expression -> term .

    OR_STR_OP       reduce using rule 71 (expression -> term .)
    XOR_STR_OP      reduce using rule 71 (expression -> term .)
    AND_STR_OP      reduce using rule 71 (expression -> term .)
    NOT_STR_OP      reduce using rule 71 (expression -> term .)
    COMPARE_OP      reduce using rule 71 (expression -> term .)
    BIT_OR          reduce using rule 71 (expression -> term .)
    BIT_XOR         reduce using rule 71 (expression -> term .)
    BIT_AND         reduce using rule 71 (expression -> term .)
    AND_OP          reduce using rule 71 (expression -> term .)
    OR_OP           reduce using rule 71 (expression -> term .)
    EQUALS_OP       reduce using rule 71 (expression -> term .)
    NOT_EQUALS_OP   reduce using rule 71 (expression -> term .)
    GREATER_OP      reduce using rule 71 (expression -> term .)
    LESS_OP         reduce using rule 71 (expression -> term .)
    GREATER_EQUAL_OP reduce using rule 71 (expression -> term .)
    LESS_EQUAL_OP   reduce using rule 71 (expression -> term .)
    PLUS_OP         reduce using rule 71 (expression -> term .)
    MINUS_OP        reduce using rule 71 (expression -> term .)
    MULTIPLICATION_OP reduce using rule 71 (expression -> term .)
    DIVISION_OP     reduce using rule 71 (expression -> term .)
    MODULUS_OP      reduce using rule 71 (expression -> term .)
    EXPONENT_OP     reduce using rule 71 (expression -> term .)
    BIT_RIGHT_SHIFT reduce using rule 71 (expression -> term .)
    BIT_LEFT_SHIFT  reduce using rule 71 (expression -> term .)
    CONCATENATE     reduce using rule 71 (expression -> term .)
    REP_OP          reduce using rule 71 (expression -> term .)
    COMMA           reduce using rule 71 (expression -> term .)
    ASSOCIATE_OP    reduce using rule 71 (expression -> term .)
    RANGE_OP        reduce using rule 71 (expression -> term .)
    SEARCH_MODIFY   reduce using rule 71 (expression -> term .)
    SEARCH_MODIFY_NEG reduce using rule 71 (expression -> term .)
    SEMICOLON       reduce using rule 71 (expression -> term .)
    BLOCK_BEGIN     reduce using rule 71 (expression -> term .)
    CLOSE_PARANTHESIS reduce using rule 71 (expression -> term .)


state 56

    (61) number -> OCTAL .

    OR_STR_OP       reduce using rule 61 (number -> OCTAL .)
    XOR_STR_OP      reduce using rule 61 (number -> OCTAL .)
    AND_STR_OP      reduce using rule 61 (number -> OCTAL .)
    NOT_STR_OP      reduce using rule 61 (number -> OCTAL .)
    COMPARE_OP      reduce using rule 61 (number -> OCTAL .)
    BIT_OR          reduce using rule 61 (number -> OCTAL .)
    BIT_XOR         reduce using rule 61 (number -> OCTAL .)
    BIT_AND         reduce using rule 61 (number -> OCTAL .)
    AND_OP          reduce using rule 61 (number -> OCTAL .)
    OR_OP           reduce using rule 61 (number -> OCTAL .)
    EQUALS_OP       reduce using rule 61 (number -> OCTAL .)
    NOT_EQUALS_OP   reduce using rule 61 (number -> OCTAL .)
    GREATER_OP      reduce using rule 61 (number -> OCTAL .)
    LESS_OP         reduce using rule 61 (number -> OCTAL .)
    GREATER_EQUAL_OP reduce using rule 61 (number -> OCTAL .)
    LESS_EQUAL_OP   reduce using rule 61 (number -> OCTAL .)
    PLUS_OP         reduce using rule 61 (number -> OCTAL .)
    MINUS_OP        reduce using rule 61 (number -> OCTAL .)
    MULTIPLICATION_OP reduce using rule 61 (number -> OCTAL .)
    DIVISION_OP     reduce using rule 61 (number -> OCTAL .)
    MODULUS_OP      reduce using rule 61 (number -> OCTAL .)
    EXPONENT_OP     reduce using rule 61 (number -> OCTAL .)
    BIT_RIGHT_SHIFT reduce using rule 61 (number -> OCTAL .)
    BIT_LEFT_SHIFT  reduce using rule 61 (number -> OCTAL .)
    CONCATENATE     reduce using rule 61 (number -> OCTAL .)
    REP_OP          reduce using rule 61 (number -> OCTAL .)
    COMMA           reduce using rule 61 (number -> OCTAL .)
    ASSOCIATE_OP    reduce using rule 61 (number -> OCTAL .)
    RANGE_OP        reduce using rule 61 (number -> OCTAL .)
    SEARCH_MODIFY   reduce using rule 61 (number -> OCTAL .)
    SEARCH_MODIFY_NEG reduce using rule 61 (number -> OCTAL .)
    SEMICOLON       reduce using rule 61 (number -> OCTAL .)
    BLOCK_BEGIN     reduce using rule 61 (number -> OCTAL .)
    CLOSE_PARANTHESIS reduce using rule 61 (number -> OCTAL .)


state 57

    (59) number -> FLOAT .

    OR_STR_OP       reduce using rule 59 (number -> FLOAT .)
    XOR_STR_OP      reduce using rule 59 (number -> FLOAT .)
    AND_STR_OP      reduce using rule 59 (number -> FLOAT .)
    NOT_STR_OP      reduce using rule 59 (number -> FLOAT .)
    COMPARE_OP      reduce using rule 59 (number -> FLOAT .)
    BIT_OR          reduce using rule 59 (number -> FLOAT .)
    BIT_XOR         reduce using rule 59 (number -> FLOAT .)
    BIT_AND         reduce using rule 59 (number -> FLOAT .)
    AND_OP          reduce using rule 59 (number -> FLOAT .)
    OR_OP           reduce using rule 59 (number -> FLOAT .)
    EQUALS_OP       reduce using rule 59 (number -> FLOAT .)
    NOT_EQUALS_OP   reduce using rule 59 (number -> FLOAT .)
    GREATER_OP      reduce using rule 59 (number -> FLOAT .)
    LESS_OP         reduce using rule 59 (number -> FLOAT .)
    GREATER_EQUAL_OP reduce using rule 59 (number -> FLOAT .)
    LESS_EQUAL_OP   reduce using rule 59 (number -> FLOAT .)
    PLUS_OP         reduce using rule 59 (number -> FLOAT .)
    MINUS_OP        reduce using rule 59 (number -> FLOAT .)
    MULTIPLICATION_OP reduce using rule 59 (number -> FLOAT .)
    DIVISION_OP     reduce using rule 59 (number -> FLOAT .)
    MODULUS_OP      reduce using rule 59 (number -> FLOAT .)
    EXPONENT_OP     reduce using rule 59 (number -> FLOAT .)
    BIT_RIGHT_SHIFT reduce using rule 59 (number -> FLOAT .)
    BIT_LEFT_SHIFT  reduce using rule 59 (number -> FLOAT .)
    CONCATENATE     reduce using rule 59 (number -> FLOAT .)
    REP_OP          reduce using rule 59 (number -> FLOAT .)
    COMMA           reduce using rule 59 (number -> FLOAT .)
    ASSOCIATE_OP    reduce using rule 59 (number -> FLOAT .)
    RANGE_OP        reduce using rule 59 (number -> FLOAT .)
    SEARCH_MODIFY   reduce using rule 59 (number -> FLOAT .)
    SEARCH_MODIFY_NEG reduce using rule 59 (number -> FLOAT .)
    SEMICOLON       reduce using rule 59 (number -> FLOAT .)
    BLOCK_BEGIN     reduce using rule 59 (number -> FLOAT .)
    CLOSE_PARANTHESIS reduce using rule 59 (number -> FLOAT .)


state 58

    (66) expression -> PLUS_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 95
    empty                          shift and go to state 49

state 59

    (34) printStatement -> PRINT expression . SEMICOLON
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 107
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 60

    (65) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 128
    empty                          shift and go to state 49

state 61

    (35) returnStatement -> RETURN expression . SEMICOLON
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 129
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 62

    (17) statement -> ifthen Marker .

    VARIABLE        reduce using rule 17 (statement -> ifthen Marker .)
    PRIVATE         reduce using rule 17 (statement -> ifthen Marker .)
    LOCAL           reduce using rule 17 (statement -> ifthen Marker .)
    RETURN          reduce using rule 17 (statement -> ifthen Marker .)
    IDENTIFIER      reduce using rule 17 (statement -> ifthen Marker .)
    WHILE           reduce using rule 17 (statement -> ifthen Marker .)
    FOR             reduce using rule 17 (statement -> ifthen Marker .)
    PRINT           reduce using rule 17 (statement -> ifthen Marker .)
    SUB             reduce using rule 17 (statement -> ifthen Marker .)
    LAST            reduce using rule 17 (statement -> ifthen Marker .)
    NEXT            reduce using rule 17 (statement -> ifthen Marker .)
    IF              reduce using rule 17 (statement -> ifthen Marker .)
    USE             reduce using rule 17 (statement -> ifthen Marker .)
    SWITCH          reduce using rule 17 (statement -> ifthen Marker .)
    $end            reduce using rule 17 (statement -> ifthen Marker .)
    BLOCK_ENDS      reduce using rule 17 (statement -> ifthen Marker .)


state 63

    (32) functionStatement -> SUB IDENTIFIER . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 6

    block                          shift and go to state 130

state 64

    (30) lastStatement -> LAST SEMICOLON .

    VARIABLE        reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    PRIVATE         reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    LOCAL           reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    RETURN          reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    WHILE           reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    FOR             reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    PRINT           reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    SUB             reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    LAST            reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    NEXT            reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    IF              reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    USE             reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    SWITCH          reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    $end            reduce using rule 30 (lastStatement -> LAST SEMICOLON .)
    BLOCK_ENDS      reduce using rule 30 (lastStatement -> LAST SEMICOLON .)


state 65

    (16) statement -> nextStatement Marker .

    VARIABLE        reduce using rule 16 (statement -> nextStatement Marker .)
    PRIVATE         reduce using rule 16 (statement -> nextStatement Marker .)
    LOCAL           reduce using rule 16 (statement -> nextStatement Marker .)
    RETURN          reduce using rule 16 (statement -> nextStatement Marker .)
    IDENTIFIER      reduce using rule 16 (statement -> nextStatement Marker .)
    WHILE           reduce using rule 16 (statement -> nextStatement Marker .)
    FOR             reduce using rule 16 (statement -> nextStatement Marker .)
    PRINT           reduce using rule 16 (statement -> nextStatement Marker .)
    SUB             reduce using rule 16 (statement -> nextStatement Marker .)
    LAST            reduce using rule 16 (statement -> nextStatement Marker .)
    NEXT            reduce using rule 16 (statement -> nextStatement Marker .)
    IF              reduce using rule 16 (statement -> nextStatement Marker .)
    USE             reduce using rule 16 (statement -> nextStatement Marker .)
    SWITCH          reduce using rule 16 (statement -> nextStatement Marker .)
    $end            reduce using rule 16 (statement -> nextStatement Marker .)
    BLOCK_ENDS      reduce using rule 16 (statement -> nextStatement Marker .)


state 66

    (22) switchStatement -> SWITCH expression . BLOCK_BEGIN caselist BLOCK_ENDS
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    BLOCK_BEGIN     shift and go to state 131
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 67

    (37) assignment -> PRIVATE VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> PRIVATE VARIABLE . ADV_ASSIGNMENT_OP expression SEMICOLON
    (43) declaration -> PRIVATE VARIABLE . decList SEMICOLON
    (45) decList -> . COMMA VARIABLE decList
    (46) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 134
    ADV_ASSIGNMENT_OP shift and go to state 133
    COMMA           shift and go to state 82
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 84
    decList                        shift and go to state 132

state 68

    (31) nextStatement -> NEXT SEMICOLON .

    VARIABLE        reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    PRIVATE         reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    LOCAL           reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    RETURN          reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    WHILE           reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    FOR             reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    PRINT           reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    SUB             reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    LAST            reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    NEXT            reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    IF              reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    USE             reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    SWITCH          reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    BLOCK_ENDS      reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)
    $end            reduce using rule 31 (nextStatement -> NEXT SEMICOLON .)


state 69

    (15) statement -> lastStatement Marker .

    VARIABLE        reduce using rule 15 (statement -> lastStatement Marker .)
    PRIVATE         reduce using rule 15 (statement -> lastStatement Marker .)
    LOCAL           reduce using rule 15 (statement -> lastStatement Marker .)
    RETURN          reduce using rule 15 (statement -> lastStatement Marker .)
    IDENTIFIER      reduce using rule 15 (statement -> lastStatement Marker .)
    WHILE           reduce using rule 15 (statement -> lastStatement Marker .)
    FOR             reduce using rule 15 (statement -> lastStatement Marker .)
    PRINT           reduce using rule 15 (statement -> lastStatement Marker .)
    SUB             reduce using rule 15 (statement -> lastStatement Marker .)
    LAST            reduce using rule 15 (statement -> lastStatement Marker .)
    NEXT            reduce using rule 15 (statement -> lastStatement Marker .)
    IF              reduce using rule 15 (statement -> lastStatement Marker .)
    USE             reduce using rule 15 (statement -> lastStatement Marker .)
    SWITCH          reduce using rule 15 (statement -> lastStatement Marker .)
    $end            reduce using rule 15 (statement -> lastStatement Marker .)
    BLOCK_ENDS      reduce using rule 15 (statement -> lastStatement Marker .)


state 70

    (19) statement -> useStatement Marker .

    VARIABLE        reduce using rule 19 (statement -> useStatement Marker .)
    PRIVATE         reduce using rule 19 (statement -> useStatement Marker .)
    LOCAL           reduce using rule 19 (statement -> useStatement Marker .)
    RETURN          reduce using rule 19 (statement -> useStatement Marker .)
    IDENTIFIER      reduce using rule 19 (statement -> useStatement Marker .)
    WHILE           reduce using rule 19 (statement -> useStatement Marker .)
    FOR             reduce using rule 19 (statement -> useStatement Marker .)
    PRINT           reduce using rule 19 (statement -> useStatement Marker .)
    SUB             reduce using rule 19 (statement -> useStatement Marker .)
    LAST            reduce using rule 19 (statement -> useStatement Marker .)
    NEXT            reduce using rule 19 (statement -> useStatement Marker .)
    IF              reduce using rule 19 (statement -> useStatement Marker .)
    USE             reduce using rule 19 (statement -> useStatement Marker .)
    SWITCH          reduce using rule 19 (statement -> useStatement Marker .)
    $end            reduce using rule 19 (statement -> useStatement Marker .)
    BLOCK_ENDS      reduce using rule 19 (statement -> useStatement Marker .)


state 71

    (4) statements -> statement statements .

    $end            reduce using rule 4 (statements -> statement statements .)
    BLOCK_ENDS      reduce using rule 4 (statements -> statement statements .)


state 72

    (13) statement -> printStatement Marker .

    VARIABLE        reduce using rule 13 (statement -> printStatement Marker .)
    PRIVATE         reduce using rule 13 (statement -> printStatement Marker .)
    LOCAL           reduce using rule 13 (statement -> printStatement Marker .)
    RETURN          reduce using rule 13 (statement -> printStatement Marker .)
    IDENTIFIER      reduce using rule 13 (statement -> printStatement Marker .)
    WHILE           reduce using rule 13 (statement -> printStatement Marker .)
    FOR             reduce using rule 13 (statement -> printStatement Marker .)
    PRINT           reduce using rule 13 (statement -> printStatement Marker .)
    SUB             reduce using rule 13 (statement -> printStatement Marker .)
    LAST            reduce using rule 13 (statement -> printStatement Marker .)
    NEXT            reduce using rule 13 (statement -> printStatement Marker .)
    IF              reduce using rule 13 (statement -> printStatement Marker .)
    USE             reduce using rule 13 (statement -> printStatement Marker .)
    SWITCH          reduce using rule 13 (statement -> printStatement Marker .)
    $end            reduce using rule 13 (statement -> printStatement Marker .)
    BLOCK_ENDS      reduce using rule 13 (statement -> printStatement Marker .)


state 73

    (47) functionCall -> IDENTIFIER OPEN_PARANTHESIS . parameters CLOSE_PARANTHESIS SEMICOLON
    (49) parameters -> . expression COMMA parameters
    (50) parameters -> . expression
    (51) parameters -> . empty
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    parameters                     shift and go to state 136
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 137
    empty                          shift and go to state 135

state 74

    (18) statement -> ifthenelse Marker .

    VARIABLE        reduce using rule 18 (statement -> ifthenelse Marker .)
    PRIVATE         reduce using rule 18 (statement -> ifthenelse Marker .)
    LOCAL           reduce using rule 18 (statement -> ifthenelse Marker .)
    RETURN          reduce using rule 18 (statement -> ifthenelse Marker .)
    IDENTIFIER      reduce using rule 18 (statement -> ifthenelse Marker .)
    WHILE           reduce using rule 18 (statement -> ifthenelse Marker .)
    FOR             reduce using rule 18 (statement -> ifthenelse Marker .)
    PRINT           reduce using rule 18 (statement -> ifthenelse Marker .)
    SUB             reduce using rule 18 (statement -> ifthenelse Marker .)
    LAST            reduce using rule 18 (statement -> ifthenelse Marker .)
    NEXT            reduce using rule 18 (statement -> ifthenelse Marker .)
    IF              reduce using rule 18 (statement -> ifthenelse Marker .)
    USE             reduce using rule 18 (statement -> ifthenelse Marker .)
    SWITCH          reduce using rule 18 (statement -> ifthenelse Marker .)
    $end            reduce using rule 18 (statement -> ifthenelse Marker .)
    BLOCK_ENDS      reduce using rule 18 (statement -> ifthenelse Marker .)


state 75

    (54) forStatement -> FOR OPEN_PARANTHESIS . expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 138
    empty                          shift and go to state 49

state 76

    (7) statement -> assignment Marker .

    VARIABLE        reduce using rule 7 (statement -> assignment Marker .)
    PRIVATE         reduce using rule 7 (statement -> assignment Marker .)
    LOCAL           reduce using rule 7 (statement -> assignment Marker .)
    RETURN          reduce using rule 7 (statement -> assignment Marker .)
    IDENTIFIER      reduce using rule 7 (statement -> assignment Marker .)
    WHILE           reduce using rule 7 (statement -> assignment Marker .)
    FOR             reduce using rule 7 (statement -> assignment Marker .)
    PRINT           reduce using rule 7 (statement -> assignment Marker .)
    SUB             reduce using rule 7 (statement -> assignment Marker .)
    LAST            reduce using rule 7 (statement -> assignment Marker .)
    NEXT            reduce using rule 7 (statement -> assignment Marker .)
    IF              reduce using rule 7 (statement -> assignment Marker .)
    USE             reduce using rule 7 (statement -> assignment Marker .)
    SWITCH          reduce using rule 7 (statement -> assignment Marker .)
    $end            reduce using rule 7 (statement -> assignment Marker .)
    BLOCK_ENDS      reduce using rule 7 (statement -> assignment Marker .)


state 77

    (11) statement -> whileStatement Marker .

    VARIABLE        reduce using rule 11 (statement -> whileStatement Marker .)
    PRIVATE         reduce using rule 11 (statement -> whileStatement Marker .)
    LOCAL           reduce using rule 11 (statement -> whileStatement Marker .)
    RETURN          reduce using rule 11 (statement -> whileStatement Marker .)
    IDENTIFIER      reduce using rule 11 (statement -> whileStatement Marker .)
    WHILE           reduce using rule 11 (statement -> whileStatement Marker .)
    FOR             reduce using rule 11 (statement -> whileStatement Marker .)
    PRINT           reduce using rule 11 (statement -> whileStatement Marker .)
    SUB             reduce using rule 11 (statement -> whileStatement Marker .)
    LAST            reduce using rule 11 (statement -> whileStatement Marker .)
    NEXT            reduce using rule 11 (statement -> whileStatement Marker .)
    IF              reduce using rule 11 (statement -> whileStatement Marker .)
    USE             reduce using rule 11 (statement -> whileStatement Marker .)
    SWITCH          reduce using rule 11 (statement -> whileStatement Marker .)
    $end            reduce using rule 11 (statement -> whileStatement Marker .)
    BLOCK_ENDS      reduce using rule 11 (statement -> whileStatement Marker .)


state 78

    (10) statement -> functionCall Marker .

    VARIABLE        reduce using rule 10 (statement -> functionCall Marker .)
    PRIVATE         reduce using rule 10 (statement -> functionCall Marker .)
    LOCAL           reduce using rule 10 (statement -> functionCall Marker .)
    RETURN          reduce using rule 10 (statement -> functionCall Marker .)
    IDENTIFIER      reduce using rule 10 (statement -> functionCall Marker .)
    WHILE           reduce using rule 10 (statement -> functionCall Marker .)
    FOR             reduce using rule 10 (statement -> functionCall Marker .)
    PRINT           reduce using rule 10 (statement -> functionCall Marker .)
    SUB             reduce using rule 10 (statement -> functionCall Marker .)
    LAST            reduce using rule 10 (statement -> functionCall Marker .)
    NEXT            reduce using rule 10 (statement -> functionCall Marker .)
    IF              reduce using rule 10 (statement -> functionCall Marker .)
    USE             reduce using rule 10 (statement -> functionCall Marker .)
    SWITCH          reduce using rule 10 (statement -> functionCall Marker .)
    $end            reduce using rule 10 (statement -> functionCall Marker .)
    BLOCK_ENDS      reduce using rule 10 (statement -> functionCall Marker .)


state 79

    (8) statement -> declaration Marker .

    VARIABLE        reduce using rule 8 (statement -> declaration Marker .)
    PRIVATE         reduce using rule 8 (statement -> declaration Marker .)
    LOCAL           reduce using rule 8 (statement -> declaration Marker .)
    RETURN          reduce using rule 8 (statement -> declaration Marker .)
    IDENTIFIER      reduce using rule 8 (statement -> declaration Marker .)
    WHILE           reduce using rule 8 (statement -> declaration Marker .)
    FOR             reduce using rule 8 (statement -> declaration Marker .)
    PRINT           reduce using rule 8 (statement -> declaration Marker .)
    SUB             reduce using rule 8 (statement -> declaration Marker .)
    LAST            reduce using rule 8 (statement -> declaration Marker .)
    NEXT            reduce using rule 8 (statement -> declaration Marker .)
    IF              reduce using rule 8 (statement -> declaration Marker .)
    USE             reduce using rule 8 (statement -> declaration Marker .)
    SWITCH          reduce using rule 8 (statement -> declaration Marker .)
    $end            reduce using rule 8 (statement -> declaration Marker .)
    BLOCK_ENDS      reduce using rule 8 (statement -> declaration Marker .)


state 80

    (42) declaration -> VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 139


state 81

    (39) assignment -> VARIABLE ADV_ASSIGNMENT_OP . expression SEMICOLON
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 140
    empty                          shift and go to state 49

state 82

    (45) decList -> COMMA . VARIABLE decList

    VARIABLE        shift and go to state 141


state 83

    (36) assignment -> VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 142
    empty                          shift and go to state 49

state 84

    (46) decList -> empty .

    SEMICOLON       reduce using rule 46 (decList -> empty .)


state 85

    (9) statement -> returnStatement Marker .

    VARIABLE        reduce using rule 9 (statement -> returnStatement Marker .)
    PRIVATE         reduce using rule 9 (statement -> returnStatement Marker .)
    LOCAL           reduce using rule 9 (statement -> returnStatement Marker .)
    RETURN          reduce using rule 9 (statement -> returnStatement Marker .)
    IDENTIFIER      reduce using rule 9 (statement -> returnStatement Marker .)
    WHILE           reduce using rule 9 (statement -> returnStatement Marker .)
    FOR             reduce using rule 9 (statement -> returnStatement Marker .)
    PRINT           reduce using rule 9 (statement -> returnStatement Marker .)
    SUB             reduce using rule 9 (statement -> returnStatement Marker .)
    LAST            reduce using rule 9 (statement -> returnStatement Marker .)
    NEXT            reduce using rule 9 (statement -> returnStatement Marker .)
    IF              reduce using rule 9 (statement -> returnStatement Marker .)
    USE             reduce using rule 9 (statement -> returnStatement Marker .)
    SWITCH          reduce using rule 9 (statement -> returnStatement Marker .)
    $end            reduce using rule 9 (statement -> returnStatement Marker .)
    BLOCK_ENDS      reduce using rule 9 (statement -> returnStatement Marker .)


state 86

    (38) assignment -> LOCAL VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> LOCAL VARIABLE . ADV_ASSIGNMENT_OP expression SEMICOLON
    (44) declaration -> LOCAL VARIABLE . decList SEMICOLON
    (45) decList -> . COMMA VARIABLE decList
    (46) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 145
    ADV_ASSIGNMENT_OP shift and go to state 144
    COMMA           shift and go to state 82
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 84
    decList                        shift and go to state 143

state 87

    (26) ifthen -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif block
    (27) ifthenelse -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 146
    empty                          shift and go to state 49

state 88

    (21) useStatement -> USE IDENTIFIER SEMICOLON .

    VARIABLE        reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LOCAL           reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SUB             reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LAST            reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NEXT            reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    USE             reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    $end            reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BLOCK_ENDS      reduce using rule 21 (useStatement -> USE IDENTIFIER SEMICOLON .)


state 89

    (3) block -> BLOCK_BEGIN statements BLOCK_ENDS .

    VARIABLE        reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRIVATE         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LOCAL           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    RETURN          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    WHILE           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    FOR             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRINT           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SUB             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LAST            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NEXT            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IF              reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    USE             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SWITCH          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    $end            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ELSE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    CASE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)


state 90

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerwhile block
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 147
    empty                          shift and go to state 49

state 91

    (33) printStatement -> PRINT OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS SEMICOLON
    (65) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 148
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 92

    (67) expression -> MINUS_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 67 (expression -> MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 67 (expression -> MINUS_OP expression .)
    AND_STR_OP      reduce using rule 67 (expression -> MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 67 (expression -> MINUS_OP expression .)
    COMPARE_OP      reduce using rule 67 (expression -> MINUS_OP expression .)
    BIT_OR          reduce using rule 67 (expression -> MINUS_OP expression .)
    BIT_XOR         reduce using rule 67 (expression -> MINUS_OP expression .)
    BIT_AND         reduce using rule 67 (expression -> MINUS_OP expression .)
    AND_OP          reduce using rule 67 (expression -> MINUS_OP expression .)
    OR_OP           reduce using rule 67 (expression -> MINUS_OP expression .)
    EQUALS_OP       reduce using rule 67 (expression -> MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 67 (expression -> MINUS_OP expression .)
    GREATER_OP      reduce using rule 67 (expression -> MINUS_OP expression .)
    LESS_OP         reduce using rule 67 (expression -> MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 67 (expression -> MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 67 (expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 67 (expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 67 (expression -> MINUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 67 (expression -> MINUS_OP expression .)
    DIVISION_OP     reduce using rule 67 (expression -> MINUS_OP expression .)
    MODULUS_OP      reduce using rule 67 (expression -> MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 67 (expression -> MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 67 (expression -> MINUS_OP expression .)
    CONCATENATE     reduce using rule 67 (expression -> MINUS_OP expression .)
    REP_OP          reduce using rule 67 (expression -> MINUS_OP expression .)
    COMMA           reduce using rule 67 (expression -> MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 67 (expression -> MINUS_OP expression .)
    RANGE_OP        reduce using rule 67 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 67 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 67 (expression -> MINUS_OP expression .)
    SEMICOLON       reduce using rule 67 (expression -> MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 67 (expression -> MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 67 (expression -> MINUS_OP expression .)
    EXPONENT_OP     shift and go to state 101

  ! EXPONENT_OP     [ reduce using rule 67 (expression -> MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]
  ! SEARCH_MODIFY   [ shift and go to state 96 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 126 ]


state 93

    (69) expression -> NOT_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 69 (expression -> NOT_OP expression .)
    XOR_STR_OP      reduce using rule 69 (expression -> NOT_OP expression .)
    AND_STR_OP      reduce using rule 69 (expression -> NOT_OP expression .)
    NOT_STR_OP      reduce using rule 69 (expression -> NOT_OP expression .)
    COMPARE_OP      reduce using rule 69 (expression -> NOT_OP expression .)
    BIT_OR          reduce using rule 69 (expression -> NOT_OP expression .)
    BIT_XOR         reduce using rule 69 (expression -> NOT_OP expression .)
    BIT_AND         reduce using rule 69 (expression -> NOT_OP expression .)
    AND_OP          reduce using rule 69 (expression -> NOT_OP expression .)
    OR_OP           reduce using rule 69 (expression -> NOT_OP expression .)
    EQUALS_OP       reduce using rule 69 (expression -> NOT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 69 (expression -> NOT_OP expression .)
    GREATER_OP      reduce using rule 69 (expression -> NOT_OP expression .)
    LESS_OP         reduce using rule 69 (expression -> NOT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 69 (expression -> NOT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 69 (expression -> NOT_OP expression .)
    PLUS_OP         reduce using rule 69 (expression -> NOT_OP expression .)
    MINUS_OP        reduce using rule 69 (expression -> NOT_OP expression .)
    MULTIPLICATION_OP reduce using rule 69 (expression -> NOT_OP expression .)
    DIVISION_OP     reduce using rule 69 (expression -> NOT_OP expression .)
    MODULUS_OP      reduce using rule 69 (expression -> NOT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 69 (expression -> NOT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 69 (expression -> NOT_OP expression .)
    CONCATENATE     reduce using rule 69 (expression -> NOT_OP expression .)
    REP_OP          reduce using rule 69 (expression -> NOT_OP expression .)
    COMMA           reduce using rule 69 (expression -> NOT_OP expression .)
    ASSOCIATE_OP    reduce using rule 69 (expression -> NOT_OP expression .)
    RANGE_OP        reduce using rule 69 (expression -> NOT_OP expression .)
    SEARCH_MODIFY   reduce using rule 69 (expression -> NOT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 69 (expression -> NOT_OP expression .)
    SEMICOLON       reduce using rule 69 (expression -> NOT_OP expression .)
    BLOCK_BEGIN     reduce using rule 69 (expression -> NOT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 69 (expression -> NOT_OP expression .)
    EXPONENT_OP     shift and go to state 101

  ! EXPONENT_OP     [ reduce using rule 69 (expression -> NOT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]
  ! SEARCH_MODIFY   [ shift and go to state 96 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 126 ]


state 94

    (68) expression -> BIT_FLIP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 68 (expression -> BIT_FLIP expression .)
    XOR_STR_OP      reduce using rule 68 (expression -> BIT_FLIP expression .)
    AND_STR_OP      reduce using rule 68 (expression -> BIT_FLIP expression .)
    NOT_STR_OP      reduce using rule 68 (expression -> BIT_FLIP expression .)
    COMPARE_OP      reduce using rule 68 (expression -> BIT_FLIP expression .)
    BIT_OR          reduce using rule 68 (expression -> BIT_FLIP expression .)
    BIT_XOR         reduce using rule 68 (expression -> BIT_FLIP expression .)
    BIT_AND         reduce using rule 68 (expression -> BIT_FLIP expression .)
    AND_OP          reduce using rule 68 (expression -> BIT_FLIP expression .)
    OR_OP           reduce using rule 68 (expression -> BIT_FLIP expression .)
    EQUALS_OP       reduce using rule 68 (expression -> BIT_FLIP expression .)
    NOT_EQUALS_OP   reduce using rule 68 (expression -> BIT_FLIP expression .)
    GREATER_OP      reduce using rule 68 (expression -> BIT_FLIP expression .)
    LESS_OP         reduce using rule 68 (expression -> BIT_FLIP expression .)
    GREATER_EQUAL_OP reduce using rule 68 (expression -> BIT_FLIP expression .)
    LESS_EQUAL_OP   reduce using rule 68 (expression -> BIT_FLIP expression .)
    PLUS_OP         reduce using rule 68 (expression -> BIT_FLIP expression .)
    MINUS_OP        reduce using rule 68 (expression -> BIT_FLIP expression .)
    MULTIPLICATION_OP reduce using rule 68 (expression -> BIT_FLIP expression .)
    DIVISION_OP     reduce using rule 68 (expression -> BIT_FLIP expression .)
    MODULUS_OP      reduce using rule 68 (expression -> BIT_FLIP expression .)
    BIT_RIGHT_SHIFT reduce using rule 68 (expression -> BIT_FLIP expression .)
    BIT_LEFT_SHIFT  reduce using rule 68 (expression -> BIT_FLIP expression .)
    CONCATENATE     reduce using rule 68 (expression -> BIT_FLIP expression .)
    REP_OP          reduce using rule 68 (expression -> BIT_FLIP expression .)
    COMMA           reduce using rule 68 (expression -> BIT_FLIP expression .)
    ASSOCIATE_OP    reduce using rule 68 (expression -> BIT_FLIP expression .)
    RANGE_OP        reduce using rule 68 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY   reduce using rule 68 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY_NEG reduce using rule 68 (expression -> BIT_FLIP expression .)
    SEMICOLON       reduce using rule 68 (expression -> BIT_FLIP expression .)
    BLOCK_BEGIN     reduce using rule 68 (expression -> BIT_FLIP expression .)
    CLOSE_PARANTHESIS reduce using rule 68 (expression -> BIT_FLIP expression .)
    EXPONENT_OP     shift and go to state 101

  ! EXPONENT_OP     [ reduce using rule 68 (expression -> BIT_FLIP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]
  ! SEARCH_MODIFY   [ shift and go to state 96 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 126 ]


state 95

    (66) expression -> PLUS_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 66 (expression -> PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 66 (expression -> PLUS_OP expression .)
    AND_STR_OP      reduce using rule 66 (expression -> PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 66 (expression -> PLUS_OP expression .)
    COMPARE_OP      reduce using rule 66 (expression -> PLUS_OP expression .)
    BIT_OR          reduce using rule 66 (expression -> PLUS_OP expression .)
    BIT_XOR         reduce using rule 66 (expression -> PLUS_OP expression .)
    BIT_AND         reduce using rule 66 (expression -> PLUS_OP expression .)
    AND_OP          reduce using rule 66 (expression -> PLUS_OP expression .)
    OR_OP           reduce using rule 66 (expression -> PLUS_OP expression .)
    EQUALS_OP       reduce using rule 66 (expression -> PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 66 (expression -> PLUS_OP expression .)
    GREATER_OP      reduce using rule 66 (expression -> PLUS_OP expression .)
    LESS_OP         reduce using rule 66 (expression -> PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 66 (expression -> PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 66 (expression -> PLUS_OP expression .)
    PLUS_OP         reduce using rule 66 (expression -> PLUS_OP expression .)
    MINUS_OP        reduce using rule 66 (expression -> PLUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 66 (expression -> PLUS_OP expression .)
    DIVISION_OP     reduce using rule 66 (expression -> PLUS_OP expression .)
    MODULUS_OP      reduce using rule 66 (expression -> PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 66 (expression -> PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 66 (expression -> PLUS_OP expression .)
    CONCATENATE     reduce using rule 66 (expression -> PLUS_OP expression .)
    REP_OP          reduce using rule 66 (expression -> PLUS_OP expression .)
    COMMA           reduce using rule 66 (expression -> PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 66 (expression -> PLUS_OP expression .)
    RANGE_OP        reduce using rule 66 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 66 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 66 (expression -> PLUS_OP expression .)
    SEMICOLON       reduce using rule 66 (expression -> PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 66 (expression -> PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 66 (expression -> PLUS_OP expression .)
    EXPONENT_OP     shift and go to state 101

  ! EXPONENT_OP     [ reduce using rule 66 (expression -> PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]
  ! SEARCH_MODIFY   [ shift and go to state 96 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 126 ]


state 96

    (102) expression -> expression SEARCH_MODIFY . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 149
    empty                          shift and go to state 49

state 97

    (87) expression -> expression LESS_EQUAL_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 150
    empty                          shift and go to state 49

state 98

    (90) expression -> expression MINUS_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 151
    empty                          shift and go to state 49

state 99

    (76) expression -> expression COMPARE_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 152
    empty                          shift and go to state 49

state 100

    (83) expression -> expression NOT_EQUALS_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 153
    empty                          shift and go to state 49

state 101

    (94) expression -> expression EXPONENT_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 154
    empty                          shift and go to state 49

state 102

    (75) expression -> expression NOT_STR_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 155
    empty                          shift and go to state 49

state 103

    (92) expression -> expression DIVISION_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 156
    empty                          shift and go to state 49

state 104

    (101) expression -> expression RANGE_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 157
    empty                          shift and go to state 49

state 105

    (78) expression -> expression BIT_XOR . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 158
    empty                          shift and go to state 49

state 106

    (82) expression -> expression EQUALS_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 159
    empty                          shift and go to state 49

state 107

    (34) printStatement -> PRINT expression SEMICOLON .

    VARIABLE        reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    PRIVATE         reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    LOCAL           reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    RETURN          reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    WHILE           reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    FOR             reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    PRINT           reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    SUB             reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    LAST            reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    NEXT            reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    IF              reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    USE             reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    SWITCH          reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)
    $end            reduce using rule 34 (printStatement -> PRINT expression SEMICOLON .)


state 108

    (74) expression -> expression AND_STR_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 160
    empty                          shift and go to state 49

state 109

    (81) expression -> expression OR_OP . Marker expression
    (88) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 161
    empty                          shift and go to state 35

state 110

    (85) expression -> expression LESS_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 162
    empty                          shift and go to state 49

state 111

    (99) expression -> expression COMMA . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 163
    empty                          shift and go to state 49

state 112

    (93) expression -> expression MODULUS_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 164
    empty                          shift and go to state 49

state 113

    (86) expression -> expression GREATER_EQUAL_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 165
    empty                          shift and go to state 49

state 114

    (73) expression -> expression XOR_STR_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 166
    empty                          shift and go to state 49

state 115

    (79) expression -> expression BIT_AND . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 167
    empty                          shift and go to state 49

state 116

    (91) expression -> expression MULTIPLICATION_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 168
    empty                          shift and go to state 49

state 117

    (100) expression -> expression ASSOCIATE_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 169
    empty                          shift and go to state 49

state 118

    (72) expression -> expression OR_STR_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 170
    empty                          shift and go to state 49

state 119

    (80) expression -> expression AND_OP . Marker expression
    (88) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 171
    empty                          shift and go to state 35

state 120

    (96) expression -> expression BIT_LEFT_SHIFT . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 172
    empty                          shift and go to state 49

state 121

    (98) expression -> expression REP_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 173
    empty                          shift and go to state 49

state 122

    (97) expression -> expression CONCATENATE . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 174
    empty                          shift and go to state 49

state 123

    (95) expression -> expression BIT_RIGHT_SHIFT . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 175
    empty                          shift and go to state 49

state 124

    (77) expression -> expression BIT_OR . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 176
    empty                          shift and go to state 49

state 125

    (89) expression -> expression PLUS_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 177
    empty                          shift and go to state 49

state 126

    (103) expression -> expression SEARCH_MODIFY_NEG . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 178
    empty                          shift and go to state 49

state 127

    (84) expression -> expression GREATER_OP . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 179
    empty                          shift and go to state 49

state 128

    (65) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 180
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 129

    (35) returnStatement -> RETURN expression SEMICOLON .

    VARIABLE        reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    PRIVATE         reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    LOCAL           reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    SUB             reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    LAST            reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    NEXT            reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    USE             reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 35 (returnStatement -> RETURN expression SEMICOLON .)


state 130

    (32) functionStatement -> SUB IDENTIFIER block .

    VARIABLE        reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    PRIVATE         reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    LOCAL           reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    RETURN          reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    IDENTIFIER      reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    WHILE           reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    FOR             reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    PRINT           reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    SUB             reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    LAST            reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    NEXT            reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    IF              reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    USE             reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    SWITCH          reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    $end            reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)
    BLOCK_ENDS      reduce using rule 32 (functionStatement -> SUB IDENTIFIER block .)


state 131

    (22) switchStatement -> SWITCH expression BLOCK_BEGIN . caselist BLOCK_ENDS
    (23) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (24) caselist -> . ELSE block
    (25) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 181
    ELSE            shift and go to state 183
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 182
    empty                          shift and go to state 184

state 132

    (43) declaration -> PRIVATE VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 185


state 133

    (40) assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP . expression SEMICOLON
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 186
    empty                          shift and go to state 49

state 134

    (37) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 187
    empty                          shift and go to state 49

state 135

    (51) parameters -> empty .
    (70) expression -> empty .

  ! reduce/reduce conflict for CLOSE_PARANTHESIS resolved using rule 51 (parameters -> empty .)
    CLOSE_PARANTHESIS reduce using rule 51 (parameters -> empty .)
    COMMA           reduce using rule 70 (expression -> empty .)
    OR_STR_OP       reduce using rule 70 (expression -> empty .)
    XOR_STR_OP      reduce using rule 70 (expression -> empty .)
    AND_STR_OP      reduce using rule 70 (expression -> empty .)
    NOT_STR_OP      reduce using rule 70 (expression -> empty .)
    COMPARE_OP      reduce using rule 70 (expression -> empty .)
    BIT_OR          reduce using rule 70 (expression -> empty .)
    BIT_XOR         reduce using rule 70 (expression -> empty .)
    BIT_AND         reduce using rule 70 (expression -> empty .)
    AND_OP          reduce using rule 70 (expression -> empty .)
    OR_OP           reduce using rule 70 (expression -> empty .)
    EQUALS_OP       reduce using rule 70 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 70 (expression -> empty .)
    GREATER_OP      reduce using rule 70 (expression -> empty .)
    LESS_OP         reduce using rule 70 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 70 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 70 (expression -> empty .)
    PLUS_OP         reduce using rule 70 (expression -> empty .)
    MINUS_OP        reduce using rule 70 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 70 (expression -> empty .)
    DIVISION_OP     reduce using rule 70 (expression -> empty .)
    MODULUS_OP      reduce using rule 70 (expression -> empty .)
    EXPONENT_OP     reduce using rule 70 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 70 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 70 (expression -> empty .)
    CONCATENATE     reduce using rule 70 (expression -> empty .)
    REP_OP          reduce using rule 70 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 70 (expression -> empty .)
    RANGE_OP        reduce using rule 70 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 70 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 70 (expression -> empty .)

  ! CLOSE_PARANTHESIS [ reduce using rule 70 (expression -> empty .) ]


state 136

    (47) functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters . CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS shift and go to state 188


state 137

    (49) parameters -> expression . COMMA parameters
    (50) parameters -> expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    COMMA           shift and go to state 189
    CLOSE_PARANTHESIS reduce using rule 50 (parameters -> expression .)
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 138

    (54) forStatement -> FOR OPEN_PARANTHESIS expression . SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 190
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 139

    (42) declaration -> VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    IF              reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    USE             reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    $end            reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)


state 140

    (39) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression . SEMICOLON
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 191
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 141

    (45) decList -> COMMA VARIABLE . decList
    (45) decList -> . COMMA VARIABLE decList
    (46) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 82
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 84
    decList                        shift and go to state 192

state 142

    (36) assignment -> VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 193
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 143

    (44) declaration -> LOCAL VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 194


state 144

    (41) assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP . expression SEMICOLON
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 195
    empty                          shift and go to state 49

state 145

    (38) assignment -> LOCAL VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 196
    empty                          shift and go to state 49

state 146

    (26) ifthen -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif block
    (27) ifthenelse -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif block ELSE Markerelse block
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 197
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 147

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerwhile block
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 198
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 148

    (33) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . SEMICOLON
    (65) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 199
    OR_STR_OP       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)

  ! SEMICOLON       [ reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .) ]


state 149

    (102) expression -> expression SEARCH_MODIFY expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    XOR_STR_OP      reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    AND_STR_OP      reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    NOT_STR_OP      reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    COMPARE_OP      reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    BIT_OR          reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    BIT_XOR         reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    BIT_AND         reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    AND_OP          reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    OR_OP           reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    EQUALS_OP       reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    NOT_EQUALS_OP   reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_OP      reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    LESS_OP         reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_EQUAL_OP reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    LESS_EQUAL_OP   reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    PLUS_OP         reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    MINUS_OP        reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    MULTIPLICATION_OP reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    DIVISION_OP     reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    MODULUS_OP      reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    BIT_RIGHT_SHIFT reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    BIT_LEFT_SHIFT  reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    CONCATENATE     reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    REP_OP          reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    COMMA           reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    ASSOCIATE_OP    reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    RANGE_OP        reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY   reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY_NEG reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    SEMICOLON       reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    BLOCK_BEGIN     reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    CLOSE_PARANTHESIS reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .)
    EXPONENT_OP     shift and go to state 101

  ! EXPONENT_OP     [ reduce using rule 102 (expression -> expression SEARCH_MODIFY expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]
  ! SEARCH_MODIFY   [ shift and go to state 96 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 126 ]


state 150

    (87) expression -> expression LESS_EQUAL_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_OR          reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_AND         reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    AND_OP          reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    OR_OP           reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_OP         reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    COMMA           reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    SEMICOLON       reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! PLUS_OP         [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 87 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 151

    (90) expression -> expression MINUS_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 90 (expression -> expression MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 90 (expression -> expression MINUS_OP expression .)
    AND_STR_OP      reduce using rule 90 (expression -> expression MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 90 (expression -> expression MINUS_OP expression .)
    COMPARE_OP      reduce using rule 90 (expression -> expression MINUS_OP expression .)
    BIT_OR          reduce using rule 90 (expression -> expression MINUS_OP expression .)
    BIT_XOR         reduce using rule 90 (expression -> expression MINUS_OP expression .)
    BIT_AND         reduce using rule 90 (expression -> expression MINUS_OP expression .)
    AND_OP          reduce using rule 90 (expression -> expression MINUS_OP expression .)
    OR_OP           reduce using rule 90 (expression -> expression MINUS_OP expression .)
    EQUALS_OP       reduce using rule 90 (expression -> expression MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 90 (expression -> expression MINUS_OP expression .)
    GREATER_OP      reduce using rule 90 (expression -> expression MINUS_OP expression .)
    LESS_OP         reduce using rule 90 (expression -> expression MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 90 (expression -> expression MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 90 (expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 90 (expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 90 (expression -> expression MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 90 (expression -> expression MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 90 (expression -> expression MINUS_OP expression .)
    CONCATENATE     reduce using rule 90 (expression -> expression MINUS_OP expression .)
    COMMA           reduce using rule 90 (expression -> expression MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 90 (expression -> expression MINUS_OP expression .)
    RANGE_OP        reduce using rule 90 (expression -> expression MINUS_OP expression .)
    SEMICOLON       reduce using rule 90 (expression -> expression MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 90 (expression -> expression MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 90 (expression -> expression MINUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! MULTIPLICATION_OP [ reduce using rule 90 (expression -> expression MINUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 90 (expression -> expression MINUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 90 (expression -> expression MINUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 90 (expression -> expression MINUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 90 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 90 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 90 (expression -> expression MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 152

    (76) expression -> expression COMPARE_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    XOR_STR_OP      reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    AND_STR_OP      reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    NOT_STR_OP      reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    COMPARE_OP      reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    BIT_OR          reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    BIT_XOR         reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    BIT_AND         reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    AND_OP          reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    OR_OP           reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    EQUALS_OP       reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    NOT_EQUALS_OP   reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    COMMA           reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    ASSOCIATE_OP    reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    RANGE_OP        reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    BLOCK_BEGIN     reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 76 (expression -> expression COMPARE_OP expression .)
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! GREATER_OP      [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! REP_OP          [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 76 (expression -> expression COMPARE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 153

    (83) expression -> expression NOT_EQUALS_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_OR          reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_XOR         reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_AND         reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    AND_OP          reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    OR_OP           reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    COMMA           reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    RANGE_OP        reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    SEMICOLON       reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .)
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! GREATER_OP      [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 83 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 154

    (94) expression -> expression EXPONENT_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    XOR_STR_OP      reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    AND_STR_OP      reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    NOT_STR_OP      reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    COMPARE_OP      reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    BIT_OR          reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    BIT_XOR         reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    BIT_AND         reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    AND_OP          reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    OR_OP           reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    EQUALS_OP       reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    GREATER_OP      reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    LESS_OP         reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    PLUS_OP         reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    MINUS_OP        reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    MULTIPLICATION_OP reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    DIVISION_OP     reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    MODULUS_OP      reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    CONCATENATE     reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    REP_OP          reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    COMMA           reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    ASSOCIATE_OP    reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    RANGE_OP        reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY   reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    SEMICOLON       reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    BLOCK_BEGIN     reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 94 (expression -> expression EXPONENT_OP expression .)
    EXPONENT_OP     shift and go to state 101

  ! EXPONENT_OP     [ reduce using rule 94 (expression -> expression EXPONENT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]
  ! SEARCH_MODIFY   [ shift and go to state 96 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 126 ]


state 155

    (75) expression -> expression NOT_STR_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 75 (expression -> expression NOT_STR_OP expression .)
    XOR_STR_OP      reduce using rule 75 (expression -> expression NOT_STR_OP expression .)
    AND_STR_OP      reduce using rule 75 (expression -> expression NOT_STR_OP expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression NOT_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 75 (expression -> expression NOT_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 75 (expression -> expression NOT_STR_OP expression .)
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! NOT_STR_OP      [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 75 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]


state 156

    (92) expression -> expression DIVISION_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    XOR_STR_OP      reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    AND_STR_OP      reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    NOT_STR_OP      reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    COMPARE_OP      reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    BIT_OR          reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    BIT_XOR         reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    BIT_AND         reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    AND_OP          reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    OR_OP           reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    EQUALS_OP       reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    GREATER_OP      reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    LESS_OP         reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    PLUS_OP         reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    MINUS_OP        reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    MULTIPLICATION_OP reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    DIVISION_OP     reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    MODULUS_OP      reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    CONCATENATE     reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    REP_OP          reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    COMMA           reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    ASSOCIATE_OP    reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    RANGE_OP        reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    SEMICOLON       reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    BLOCK_BEGIN     reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 92 (expression -> expression DIVISION_OP expression .)
    EXPONENT_OP     shift and go to state 101
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! EXPONENT_OP     [ reduce using rule 92 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 92 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 92 (expression -> expression DIVISION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 157

    (101) expression -> expression RANGE_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 101 (expression -> expression RANGE_OP expression .)
    XOR_STR_OP      reduce using rule 101 (expression -> expression RANGE_OP expression .)
    AND_STR_OP      reduce using rule 101 (expression -> expression RANGE_OP expression .)
    NOT_STR_OP      reduce using rule 101 (expression -> expression RANGE_OP expression .)
    COMMA           reduce using rule 101 (expression -> expression RANGE_OP expression .)
    ASSOCIATE_OP    reduce using rule 101 (expression -> expression RANGE_OP expression .)
    RANGE_OP        reduce using rule 101 (expression -> expression RANGE_OP expression .)
    SEMICOLON       reduce using rule 101 (expression -> expression RANGE_OP expression .)
    BLOCK_BEGIN     reduce using rule 101 (expression -> expression RANGE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 101 (expression -> expression RANGE_OP expression .)
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! AND_OP          [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! OR_OP           [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! REP_OP          [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 101 (expression -> expression RANGE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 158

    (78) expression -> expression BIT_XOR expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 78 (expression -> expression BIT_XOR expression .)
    XOR_STR_OP      reduce using rule 78 (expression -> expression BIT_XOR expression .)
    AND_STR_OP      reduce using rule 78 (expression -> expression BIT_XOR expression .)
    NOT_STR_OP      reduce using rule 78 (expression -> expression BIT_XOR expression .)
    BIT_OR          reduce using rule 78 (expression -> expression BIT_XOR expression .)
    BIT_XOR         reduce using rule 78 (expression -> expression BIT_XOR expression .)
    AND_OP          reduce using rule 78 (expression -> expression BIT_XOR expression .)
    OR_OP           reduce using rule 78 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 78 (expression -> expression BIT_XOR expression .)
    ASSOCIATE_OP    reduce using rule 78 (expression -> expression BIT_XOR expression .)
    RANGE_OP        reduce using rule 78 (expression -> expression BIT_XOR expression .)
    SEMICOLON       reduce using rule 78 (expression -> expression BIT_XOR expression .)
    BLOCK_BEGIN     reduce using rule 78 (expression -> expression BIT_XOR expression .)
    CLOSE_PARANTHESIS reduce using rule 78 (expression -> expression BIT_XOR expression .)
    COMPARE_OP      shift and go to state 99
    BIT_AND         shift and go to state 115
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! EQUALS_OP       [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_OP      [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! LESS_OP         [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! PLUS_OP         [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! MINUS_OP        [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! DIVISION_OP     [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! MODULUS_OP      [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! CONCATENATE     [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! REP_OP          [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 78 (expression -> expression BIT_XOR expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 159

    (82) expression -> expression EQUALS_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    BIT_OR          reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    BIT_XOR         reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    BIT_AND         reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    AND_OP          reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    OR_OP           reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    COMMA           reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    RANGE_OP        reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    SEMICOLON       reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 82 (expression -> expression EQUALS_OP expression .)
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! GREATER_OP      [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 82 (expression -> expression EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 160

    (74) expression -> expression AND_STR_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 74 (expression -> expression AND_STR_OP expression .)
    XOR_STR_OP      reduce using rule 74 (expression -> expression AND_STR_OP expression .)
    AND_STR_OP      reduce using rule 74 (expression -> expression AND_STR_OP expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression AND_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 74 (expression -> expression AND_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 74 (expression -> expression AND_STR_OP expression .)
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! NOT_STR_OP      [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 74 (expression -> expression AND_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]


state 161

    (81) expression -> expression OR_OP Marker . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 200
    empty                          shift and go to state 49

state 162

    (85) expression -> expression LESS_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 85 (expression -> expression LESS_OP expression .)
    XOR_STR_OP      reduce using rule 85 (expression -> expression LESS_OP expression .)
    AND_STR_OP      reduce using rule 85 (expression -> expression LESS_OP expression .)
    NOT_STR_OP      reduce using rule 85 (expression -> expression LESS_OP expression .)
    COMPARE_OP      reduce using rule 85 (expression -> expression LESS_OP expression .)
    BIT_OR          reduce using rule 85 (expression -> expression LESS_OP expression .)
    BIT_XOR         reduce using rule 85 (expression -> expression LESS_OP expression .)
    BIT_AND         reduce using rule 85 (expression -> expression LESS_OP expression .)
    AND_OP          reduce using rule 85 (expression -> expression LESS_OP expression .)
    OR_OP           reduce using rule 85 (expression -> expression LESS_OP expression .)
    EQUALS_OP       reduce using rule 85 (expression -> expression LESS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 85 (expression -> expression LESS_OP expression .)
    GREATER_OP      reduce using rule 85 (expression -> expression LESS_OP expression .)
    LESS_OP         reduce using rule 85 (expression -> expression LESS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 85 (expression -> expression LESS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 85 (expression -> expression LESS_OP expression .)
    COMMA           reduce using rule 85 (expression -> expression LESS_OP expression .)
    ASSOCIATE_OP    reduce using rule 85 (expression -> expression LESS_OP expression .)
    RANGE_OP        reduce using rule 85 (expression -> expression LESS_OP expression .)
    SEMICOLON       reduce using rule 85 (expression -> expression LESS_OP expression .)
    BLOCK_BEGIN     reduce using rule 85 (expression -> expression LESS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 85 (expression -> expression LESS_OP expression .)
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! PLUS_OP         [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! REP_OP          [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 85 (expression -> expression LESS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 163

    (99) expression -> expression COMMA expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 99 (expression -> expression COMMA expression .)
    XOR_STR_OP      reduce using rule 99 (expression -> expression COMMA expression .)
    AND_STR_OP      reduce using rule 99 (expression -> expression COMMA expression .)
    NOT_STR_OP      reduce using rule 99 (expression -> expression COMMA expression .)
    COMMA           reduce using rule 99 (expression -> expression COMMA expression .)
    ASSOCIATE_OP    reduce using rule 99 (expression -> expression COMMA expression .)
    SEMICOLON       reduce using rule 99 (expression -> expression COMMA expression .)
    BLOCK_BEGIN     reduce using rule 99 (expression -> expression COMMA expression .)
    CLOSE_PARANTHESIS reduce using rule 99 (expression -> expression COMMA expression .)
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_OR          [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_XOR         [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_AND         [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! AND_OP          [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! OR_OP           [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! EQUALS_OP       [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! GREATER_OP      [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! LESS_OP         [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! PLUS_OP         [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! MINUS_OP        [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! DIVISION_OP     [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! MODULUS_OP      [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! EXPONENT_OP     [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! CONCATENATE     [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! REP_OP          [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! RANGE_OP        [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]


state 164

    (93) expression -> expression MODULUS_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    XOR_STR_OP      reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    AND_STR_OP      reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    NOT_STR_OP      reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    COMPARE_OP      reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    BIT_OR          reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    BIT_XOR         reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    BIT_AND         reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    AND_OP          reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    OR_OP           reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    EQUALS_OP       reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    GREATER_OP      reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    LESS_OP         reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    PLUS_OP         reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    MINUS_OP        reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    DIVISION_OP     reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    MODULUS_OP      reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    CONCATENATE     reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    REP_OP          reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    COMMA           reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    RANGE_OP        reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    SEMICOLON       reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 93 (expression -> expression MODULUS_OP expression .)
    EXPONENT_OP     shift and go to state 101
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! EXPONENT_OP     [ reduce using rule 93 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 93 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 93 (expression -> expression MODULUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 165

    (86) expression -> expression GREATER_EQUAL_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_OR          reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_AND         reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_OP          reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    OR_OP           reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_OP         reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    COMMA           reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    SEMICOLON       reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! PLUS_OP         [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 86 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 166

    (73) expression -> expression XOR_STR_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 73 (expression -> expression XOR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 73 (expression -> expression XOR_STR_OP expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression XOR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 73 (expression -> expression XOR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 73 (expression -> expression XOR_STR_OP expression .)
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! AND_STR_OP      [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 73 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]


state 167

    (79) expression -> expression BIT_AND expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 79 (expression -> expression BIT_AND expression .)
    XOR_STR_OP      reduce using rule 79 (expression -> expression BIT_AND expression .)
    AND_STR_OP      reduce using rule 79 (expression -> expression BIT_AND expression .)
    NOT_STR_OP      reduce using rule 79 (expression -> expression BIT_AND expression .)
    BIT_OR          reduce using rule 79 (expression -> expression BIT_AND expression .)
    BIT_XOR         reduce using rule 79 (expression -> expression BIT_AND expression .)
    BIT_AND         reduce using rule 79 (expression -> expression BIT_AND expression .)
    AND_OP          reduce using rule 79 (expression -> expression BIT_AND expression .)
    OR_OP           reduce using rule 79 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 79 (expression -> expression BIT_AND expression .)
    ASSOCIATE_OP    reduce using rule 79 (expression -> expression BIT_AND expression .)
    RANGE_OP        reduce using rule 79 (expression -> expression BIT_AND expression .)
    SEMICOLON       reduce using rule 79 (expression -> expression BIT_AND expression .)
    BLOCK_BEGIN     reduce using rule 79 (expression -> expression BIT_AND expression .)
    CLOSE_PARANTHESIS reduce using rule 79 (expression -> expression BIT_AND expression .)
    COMPARE_OP      shift and go to state 99
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! EQUALS_OP       [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! GREATER_OP      [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! LESS_OP         [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! PLUS_OP         [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! MINUS_OP        [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! DIVISION_OP     [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! MODULUS_OP      [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! EXPONENT_OP     [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! CONCATENATE     [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! REP_OP          [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 79 (expression -> expression BIT_AND expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 168

    (91) expression -> expression MULTIPLICATION_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    XOR_STR_OP      reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    AND_STR_OP      reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_STR_OP      reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    COMPARE_OP      reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_OR          reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_XOR         reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_AND         reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    AND_OP          reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    OR_OP           reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    EQUALS_OP       reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_OP      reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_OP         reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    PLUS_OP         reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    MINUS_OP        reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    MULTIPLICATION_OP reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    DIVISION_OP     reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    MODULUS_OP      reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    CONCATENATE     reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    REP_OP          reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    COMMA           reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    ASSOCIATE_OP    reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    RANGE_OP        reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    SEMICOLON       reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    BLOCK_BEGIN     reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .)
    EXPONENT_OP     shift and go to state 101
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! EXPONENT_OP     [ reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 91 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 169

    (100) expression -> expression ASSOCIATE_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    XOR_STR_OP      reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    AND_STR_OP      reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    NOT_STR_OP      reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    COMMA           reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    ASSOCIATE_OP    reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    SEMICOLON       reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    BLOCK_BEGIN     reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .)
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! AND_OP          [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_OP           [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! REP_OP          [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 100 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]


state 170

    (72) expression -> expression OR_STR_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 72 (expression -> expression OR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 72 (expression -> expression OR_STR_OP expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression OR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 72 (expression -> expression OR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 72 (expression -> expression OR_STR_OP expression .)
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! AND_STR_OP      [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! COMMA           [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 72 (expression -> expression OR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]


state 171

    (80) expression -> expression AND_OP Marker . expression
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 201
    empty                          shift and go to state 49

state 172

    (96) expression -> expression BIT_LEFT_SHIFT expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_STR_OP      reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMPARE_OP      reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_OR          reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_XOR         reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_AND         reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_OP          reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    OR_OP           reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    EQUALS_OP       reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_OP      reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_OP         reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMMA           reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    RANGE_OP        reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    SEMICOLON       reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .)
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! PLUS_OP         [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 96 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 173

    (98) expression -> expression REP_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 98 (expression -> expression REP_OP expression .)
    XOR_STR_OP      reduce using rule 98 (expression -> expression REP_OP expression .)
    AND_STR_OP      reduce using rule 98 (expression -> expression REP_OP expression .)
    NOT_STR_OP      reduce using rule 98 (expression -> expression REP_OP expression .)
    COMPARE_OP      reduce using rule 98 (expression -> expression REP_OP expression .)
    BIT_OR          reduce using rule 98 (expression -> expression REP_OP expression .)
    BIT_XOR         reduce using rule 98 (expression -> expression REP_OP expression .)
    BIT_AND         reduce using rule 98 (expression -> expression REP_OP expression .)
    AND_OP          reduce using rule 98 (expression -> expression REP_OP expression .)
    OR_OP           reduce using rule 98 (expression -> expression REP_OP expression .)
    EQUALS_OP       reduce using rule 98 (expression -> expression REP_OP expression .)
    NOT_EQUALS_OP   reduce using rule 98 (expression -> expression REP_OP expression .)
    GREATER_OP      reduce using rule 98 (expression -> expression REP_OP expression .)
    LESS_OP         reduce using rule 98 (expression -> expression REP_OP expression .)
    GREATER_EQUAL_OP reduce using rule 98 (expression -> expression REP_OP expression .)
    LESS_EQUAL_OP   reduce using rule 98 (expression -> expression REP_OP expression .)
    PLUS_OP         reduce using rule 98 (expression -> expression REP_OP expression .)
    MINUS_OP        reduce using rule 98 (expression -> expression REP_OP expression .)
    MULTIPLICATION_OP reduce using rule 98 (expression -> expression REP_OP expression .)
    DIVISION_OP     reduce using rule 98 (expression -> expression REP_OP expression .)
    MODULUS_OP      reduce using rule 98 (expression -> expression REP_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 98 (expression -> expression REP_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 98 (expression -> expression REP_OP expression .)
    CONCATENATE     reduce using rule 98 (expression -> expression REP_OP expression .)
    REP_OP          reduce using rule 98 (expression -> expression REP_OP expression .)
    COMMA           reduce using rule 98 (expression -> expression REP_OP expression .)
    ASSOCIATE_OP    reduce using rule 98 (expression -> expression REP_OP expression .)
    RANGE_OP        reduce using rule 98 (expression -> expression REP_OP expression .)
    SEMICOLON       reduce using rule 98 (expression -> expression REP_OP expression .)
    BLOCK_BEGIN     reduce using rule 98 (expression -> expression REP_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 98 (expression -> expression REP_OP expression .)
    EXPONENT_OP     shift and go to state 101
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! EXPONENT_OP     [ reduce using rule 98 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 98 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 98 (expression -> expression REP_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 174

    (97) expression -> expression CONCATENATE expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 97 (expression -> expression CONCATENATE expression .)
    XOR_STR_OP      reduce using rule 97 (expression -> expression CONCATENATE expression .)
    AND_STR_OP      reduce using rule 97 (expression -> expression CONCATENATE expression .)
    NOT_STR_OP      reduce using rule 97 (expression -> expression CONCATENATE expression .)
    COMPARE_OP      reduce using rule 97 (expression -> expression CONCATENATE expression .)
    BIT_OR          reduce using rule 97 (expression -> expression CONCATENATE expression .)
    BIT_XOR         reduce using rule 97 (expression -> expression CONCATENATE expression .)
    BIT_AND         reduce using rule 97 (expression -> expression CONCATENATE expression .)
    AND_OP          reduce using rule 97 (expression -> expression CONCATENATE expression .)
    OR_OP           reduce using rule 97 (expression -> expression CONCATENATE expression .)
    EQUALS_OP       reduce using rule 97 (expression -> expression CONCATENATE expression .)
    NOT_EQUALS_OP   reduce using rule 97 (expression -> expression CONCATENATE expression .)
    GREATER_OP      reduce using rule 97 (expression -> expression CONCATENATE expression .)
    LESS_OP         reduce using rule 97 (expression -> expression CONCATENATE expression .)
    GREATER_EQUAL_OP reduce using rule 97 (expression -> expression CONCATENATE expression .)
    LESS_EQUAL_OP   reduce using rule 97 (expression -> expression CONCATENATE expression .)
    PLUS_OP         reduce using rule 97 (expression -> expression CONCATENATE expression .)
    MINUS_OP        reduce using rule 97 (expression -> expression CONCATENATE expression .)
    BIT_RIGHT_SHIFT reduce using rule 97 (expression -> expression CONCATENATE expression .)
    BIT_LEFT_SHIFT  reduce using rule 97 (expression -> expression CONCATENATE expression .)
    CONCATENATE     reduce using rule 97 (expression -> expression CONCATENATE expression .)
    COMMA           reduce using rule 97 (expression -> expression CONCATENATE expression .)
    ASSOCIATE_OP    reduce using rule 97 (expression -> expression CONCATENATE expression .)
    RANGE_OP        reduce using rule 97 (expression -> expression CONCATENATE expression .)
    SEMICOLON       reduce using rule 97 (expression -> expression CONCATENATE expression .)
    BLOCK_BEGIN     reduce using rule 97 (expression -> expression CONCATENATE expression .)
    CLOSE_PARANTHESIS reduce using rule 97 (expression -> expression CONCATENATE expression .)
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! MULTIPLICATION_OP [ reduce using rule 97 (expression -> expression CONCATENATE expression .) ]
  ! DIVISION_OP     [ reduce using rule 97 (expression -> expression CONCATENATE expression .) ]
  ! MODULUS_OP      [ reduce using rule 97 (expression -> expression CONCATENATE expression .) ]
  ! EXPONENT_OP     [ reduce using rule 97 (expression -> expression CONCATENATE expression .) ]
  ! REP_OP          [ reduce using rule 97 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 97 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 97 (expression -> expression CONCATENATE expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 175

    (95) expression -> expression BIT_RIGHT_SHIFT expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_STR_OP      reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMPARE_OP      reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_OR          reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_XOR         reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_AND         reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_OP          reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    OR_OP           reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    EQUALS_OP       reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_OP      reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_OP         reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMMA           reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    RANGE_OP        reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    SEMICOLON       reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .)
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! PLUS_OP         [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 95 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 176

    (77) expression -> expression BIT_OR expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 77 (expression -> expression BIT_OR expression .)
    XOR_STR_OP      reduce using rule 77 (expression -> expression BIT_OR expression .)
    AND_STR_OP      reduce using rule 77 (expression -> expression BIT_OR expression .)
    NOT_STR_OP      reduce using rule 77 (expression -> expression BIT_OR expression .)
    BIT_OR          reduce using rule 77 (expression -> expression BIT_OR expression .)
    BIT_XOR         reduce using rule 77 (expression -> expression BIT_OR expression .)
    AND_OP          reduce using rule 77 (expression -> expression BIT_OR expression .)
    OR_OP           reduce using rule 77 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 77 (expression -> expression BIT_OR expression .)
    ASSOCIATE_OP    reduce using rule 77 (expression -> expression BIT_OR expression .)
    RANGE_OP        reduce using rule 77 (expression -> expression BIT_OR expression .)
    SEMICOLON       reduce using rule 77 (expression -> expression BIT_OR expression .)
    BLOCK_BEGIN     reduce using rule 77 (expression -> expression BIT_OR expression .)
    CLOSE_PARANTHESIS reduce using rule 77 (expression -> expression BIT_OR expression .)
    COMPARE_OP      shift and go to state 99
    BIT_AND         shift and go to state 115
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! EQUALS_OP       [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! GREATER_OP      [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! LESS_OP         [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! PLUS_OP         [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! MINUS_OP        [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! DIVISION_OP     [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! MODULUS_OP      [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! CONCATENATE     [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! REP_OP          [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 77 (expression -> expression BIT_OR expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 177

    (89) expression -> expression PLUS_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 89 (expression -> expression PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 89 (expression -> expression PLUS_OP expression .)
    AND_STR_OP      reduce using rule 89 (expression -> expression PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 89 (expression -> expression PLUS_OP expression .)
    COMPARE_OP      reduce using rule 89 (expression -> expression PLUS_OP expression .)
    BIT_OR          reduce using rule 89 (expression -> expression PLUS_OP expression .)
    BIT_XOR         reduce using rule 89 (expression -> expression PLUS_OP expression .)
    BIT_AND         reduce using rule 89 (expression -> expression PLUS_OP expression .)
    AND_OP          reduce using rule 89 (expression -> expression PLUS_OP expression .)
    OR_OP           reduce using rule 89 (expression -> expression PLUS_OP expression .)
    EQUALS_OP       reduce using rule 89 (expression -> expression PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 89 (expression -> expression PLUS_OP expression .)
    GREATER_OP      reduce using rule 89 (expression -> expression PLUS_OP expression .)
    LESS_OP         reduce using rule 89 (expression -> expression PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 89 (expression -> expression PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 89 (expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 89 (expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 89 (expression -> expression PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 89 (expression -> expression PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 89 (expression -> expression PLUS_OP expression .)
    CONCATENATE     reduce using rule 89 (expression -> expression PLUS_OP expression .)
    COMMA           reduce using rule 89 (expression -> expression PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 89 (expression -> expression PLUS_OP expression .)
    RANGE_OP        reduce using rule 89 (expression -> expression PLUS_OP expression .)
    SEMICOLON       reduce using rule 89 (expression -> expression PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 89 (expression -> expression PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 89 (expression -> expression PLUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! MULTIPLICATION_OP [ reduce using rule 89 (expression -> expression PLUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 89 (expression -> expression PLUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 89 (expression -> expression PLUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 89 (expression -> expression PLUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 89 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 89 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 89 (expression -> expression PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 178

    (103) expression -> expression SEARCH_MODIFY_NEG expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    XOR_STR_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_STR_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_STR_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMPARE_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_OR          reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_XOR         reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_AND         reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_OP          reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    OR_OP           reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EQUALS_OP       reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_EQUALS_OP   reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_OP         reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_EQUAL_OP reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_EQUAL_OP   reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    PLUS_OP         reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MINUS_OP        reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MULTIPLICATION_OP reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    DIVISION_OP     reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MODULUS_OP      reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_RIGHT_SHIFT reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_LEFT_SHIFT  reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CONCATENATE     reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    REP_OP          reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMMA           reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    ASSOCIATE_OP    reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    RANGE_OP        reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY   reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY_NEG reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEMICOLON       reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BLOCK_BEGIN     reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CLOSE_PARANTHESIS reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EXPONENT_OP     shift and go to state 101

  ! EXPONENT_OP     [ reduce using rule 103 (expression -> expression SEARCH_MODIFY_NEG expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! PLUS_OP         [ shift and go to state 125 ]
  ! MINUS_OP        [ shift and go to state 98 ]
  ! MULTIPLICATION_OP [ shift and go to state 116 ]
  ! DIVISION_OP     [ shift and go to state 103 ]
  ! MODULUS_OP      [ shift and go to state 112 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 123 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 120 ]
  ! CONCATENATE     [ shift and go to state 122 ]
  ! REP_OP          [ shift and go to state 121 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]
  ! SEARCH_MODIFY   [ shift and go to state 96 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 126 ]


state 179

    (84) expression -> expression GREATER_OP expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 84 (expression -> expression GREATER_OP expression .)
    XOR_STR_OP      reduce using rule 84 (expression -> expression GREATER_OP expression .)
    AND_STR_OP      reduce using rule 84 (expression -> expression GREATER_OP expression .)
    NOT_STR_OP      reduce using rule 84 (expression -> expression GREATER_OP expression .)
    COMPARE_OP      reduce using rule 84 (expression -> expression GREATER_OP expression .)
    BIT_OR          reduce using rule 84 (expression -> expression GREATER_OP expression .)
    BIT_XOR         reduce using rule 84 (expression -> expression GREATER_OP expression .)
    BIT_AND         reduce using rule 84 (expression -> expression GREATER_OP expression .)
    AND_OP          reduce using rule 84 (expression -> expression GREATER_OP expression .)
    OR_OP           reduce using rule 84 (expression -> expression GREATER_OP expression .)
    EQUALS_OP       reduce using rule 84 (expression -> expression GREATER_OP expression .)
    NOT_EQUALS_OP   reduce using rule 84 (expression -> expression GREATER_OP expression .)
    GREATER_OP      reduce using rule 84 (expression -> expression GREATER_OP expression .)
    LESS_OP         reduce using rule 84 (expression -> expression GREATER_OP expression .)
    GREATER_EQUAL_OP reduce using rule 84 (expression -> expression GREATER_OP expression .)
    LESS_EQUAL_OP   reduce using rule 84 (expression -> expression GREATER_OP expression .)
    COMMA           reduce using rule 84 (expression -> expression GREATER_OP expression .)
    ASSOCIATE_OP    reduce using rule 84 (expression -> expression GREATER_OP expression .)
    RANGE_OP        reduce using rule 84 (expression -> expression GREATER_OP expression .)
    SEMICOLON       reduce using rule 84 (expression -> expression GREATER_OP expression .)
    BLOCK_BEGIN     reduce using rule 84 (expression -> expression GREATER_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 84 (expression -> expression GREATER_OP expression .)
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! PLUS_OP         [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! REP_OP          [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 84 (expression -> expression GREATER_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! COMPARE_OP      [ shift and go to state 99 ]
  ! BIT_OR          [ shift and go to state 124 ]
  ! BIT_XOR         [ shift and go to state 105 ]
  ! BIT_AND         [ shift and go to state 115 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! EQUALS_OP       [ shift and go to state 106 ]
  ! NOT_EQUALS_OP   [ shift and go to state 100 ]
  ! GREATER_OP      [ shift and go to state 127 ]
  ! LESS_OP         [ shift and go to state 110 ]
  ! GREATER_EQUAL_OP [ shift and go to state 113 ]
  ! LESS_EQUAL_OP   [ shift and go to state 97 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 180

    (65) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

    SEMICOLON       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_STR_OP       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)


state 181

    (23) caselist -> CASE . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist

    OPEN_PARANTHESIS shift and go to state 202


state 182

    (22) switchStatement -> SWITCH expression BLOCK_BEGIN caselist . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 203


state 183

    (24) caselist -> ELSE . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 6

    block                          shift and go to state 204

state 184

    (25) caselist -> empty .

    BLOCK_ENDS      reduce using rule 25 (caselist -> empty .)


state 185

    (43) declaration -> PRIVATE VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IF              reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    USE             reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    $end            reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)


state 186

    (40) assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression . SEMICOLON
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 205
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 187

    (37) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 206
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 188

    (47) functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 207


state 189

    (49) parameters -> expression COMMA . parameters
    (99) expression -> expression COMMA . expression
    (49) parameters -> . expression COMMA parameters
    (50) parameters -> . expression
    (51) parameters -> . empty
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    parameters                     shift and go to state 208
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 209
    empty                          shift and go to state 135

state 190

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON . expression SEMICOLON expression CLOSE_PARANTHESIS block
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 210
    empty                          shift and go to state 49

state 191

    (39) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 39 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)


state 192

    (45) decList -> COMMA VARIABLE decList .

    SEMICOLON       reduce using rule 45 (decList -> COMMA VARIABLE decList .)


state 193

    (36) assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 36 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)


state 194

    (44) declaration -> LOCAL VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IF              reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    USE             reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    $end            reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)


state 195

    (41) assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression . SEMICOLON
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 211
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 196

    (38) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 212
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 197

    (26) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif block
    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif block ELSE Markerelse block
    (28) Markerif -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    empty                          shift and go to state 213
    Markerif                       shift and go to state 214

state 198

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerwhile block
    (53) Markerwhile -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    empty                          shift and go to state 216
    Markerwhile                    shift and go to state 215

state 199

    (33) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .

    VARIABLE        reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 33 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)


state 200

    (81) expression -> expression OR_OP Marker expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    XOR_STR_OP      reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    AND_STR_OP      reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    NOT_STR_OP      reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    OR_OP           reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    COMMA           reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    RANGE_OP        reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    SEMICOLON       reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 81 (expression -> expression OR_OP Marker expression .)
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! AND_OP          [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 81 (expression -> expression OR_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 201

    (80) expression -> expression AND_OP Marker expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    XOR_STR_OP      reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    AND_STR_OP      reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    NOT_STR_OP      reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    AND_OP          reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    OR_OP           reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    COMMA           reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    RANGE_OP        reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    SEMICOLON       reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 80 (expression -> expression AND_OP Marker expression .)
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 80 (expression -> expression AND_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 119 ]
  ! OR_OP           [ shift and go to state 109 ]
  ! COMMA           [ shift and go to state 111 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]
  ! RANGE_OP        [ shift and go to state 104 ]


state 202

    (23) caselist -> CASE OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS block caselist
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 217
    empty                          shift and go to state 49

state 203

    (22) switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .

    VARIABLE        reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRIVATE         reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    LOCAL           reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    RETURN          reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    WHILE           reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    FOR             reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRINT           reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    SUB             reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    LAST            reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    NEXT            reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    IF              reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    USE             reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    SWITCH          reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    $end            reduce using rule 22 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)


state 204

    (24) caselist -> ELSE block .

    BLOCK_ENDS      reduce using rule 24 (caselist -> ELSE block .)


state 205

    (40) assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 40 (assignment -> PRIVATE VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)


state 206

    (37) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 37 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)


state 207

    (47) functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .

    OR_STR_OP       reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    XOR_STR_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    AND_STR_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    NOT_STR_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    COMPARE_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    BIT_OR          reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    BIT_XOR         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    BIT_AND         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    AND_OP          reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    OR_OP           reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    EQUALS_OP       reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    GREATER_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    LESS_OP         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    PLUS_OP         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    MINUS_OP        reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    DIVISION_OP     reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    MODULUS_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    EXPONENT_OP     reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    CONCATENATE     reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    REP_OP          reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    COMMA           reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    RANGE_OP        reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_BEGIN     reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    CLOSE_PARANTHESIS reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    VARIABLE        reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON .)


state 208

    (49) parameters -> expression COMMA parameters .

    CLOSE_PARANTHESIS reduce using rule 49 (parameters -> expression COMMA parameters .)


state 209

    (99) expression -> expression COMMA expression .
    (49) parameters -> expression . COMMA parameters
    (50) parameters -> expression .
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

  ! reduce/reduce conflict for CLOSE_PARANTHESIS resolved using rule 50 (parameters -> expression .)
    COMMA           reduce using rule 99 (expression -> expression COMMA expression .)
    OR_STR_OP       reduce using rule 99 (expression -> expression COMMA expression .)
    XOR_STR_OP      reduce using rule 99 (expression -> expression COMMA expression .)
    AND_STR_OP      reduce using rule 99 (expression -> expression COMMA expression .)
    NOT_STR_OP      reduce using rule 99 (expression -> expression COMMA expression .)
    ASSOCIATE_OP    reduce using rule 99 (expression -> expression COMMA expression .)
    CLOSE_PARANTHESIS reduce using rule 50 (parameters -> expression .)
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126

  ! COMPARE_OP      [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_OR          [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_XOR         [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_AND         [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! AND_OP          [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! OR_OP           [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! EQUALS_OP       [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! GREATER_OP      [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! LESS_OP         [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! PLUS_OP         [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! MINUS_OP        [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! DIVISION_OP     [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! MODULUS_OP      [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! EXPONENT_OP     [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! CONCATENATE     [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! REP_OP          [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! RANGE_OP        [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! CLOSE_PARANTHESIS [ reduce using rule 99 (expression -> expression COMMA expression .) ]
  ! COMMA           [ shift and go to state 189 ]
  ! OR_STR_OP       [ shift and go to state 118 ]
  ! XOR_STR_OP      [ shift and go to state 114 ]
  ! AND_STR_OP      [ shift and go to state 108 ]
  ! NOT_STR_OP      [ shift and go to state 102 ]
  ! ASSOCIATE_OP    [ shift and go to state 117 ]


state 210

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression . SEMICOLON expression CLOSE_PARANTHESIS block
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 218
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 211

    (41) assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 41 (assignment -> LOCAL VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)


state 212

    (38) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 38 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)


state 213

    (28) Markerif -> empty .

    BLOCK_BEGIN     reduce using rule 28 (Markerif -> empty .)


state 214

    (26) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . block
    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . block ELSE Markerelse block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 6

    block                          shift and go to state 219

state 215

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 6

    block                          shift and go to state 220

state 216

    (53) Markerwhile -> empty .

    BLOCK_BEGIN     reduce using rule 53 (Markerwhile -> empty .)


state 217

    (23) caselist -> CASE OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS block caselist
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 221
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 218

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON . expression CLOSE_PARANTHESIS block
    (66) expression -> . PLUS_OP expression
    (67) expression -> . MINUS_OP expression
    (68) expression -> . BIT_FLIP expression
    (69) expression -> . NOT_OP expression
    (70) expression -> . empty
    (71) expression -> . term
    (72) expression -> . expression OR_STR_OP expression
    (73) expression -> . expression XOR_STR_OP expression
    (74) expression -> . expression AND_STR_OP expression
    (75) expression -> . expression NOT_STR_OP expression
    (76) expression -> . expression COMPARE_OP expression
    (77) expression -> . expression BIT_OR expression
    (78) expression -> . expression BIT_XOR expression
    (79) expression -> . expression BIT_AND expression
    (80) expression -> . expression AND_OP Marker expression
    (81) expression -> . expression OR_OP Marker expression
    (82) expression -> . expression EQUALS_OP expression
    (83) expression -> . expression NOT_EQUALS_OP expression
    (84) expression -> . expression GREATER_OP expression
    (85) expression -> . expression LESS_OP expression
    (86) expression -> . expression GREATER_EQUAL_OP expression
    (87) expression -> . expression LESS_EQUAL_OP expression
    (89) expression -> . expression PLUS_OP expression
    (90) expression -> . expression MINUS_OP expression
    (91) expression -> . expression MULTIPLICATION_OP expression
    (92) expression -> . expression DIVISION_OP expression
    (93) expression -> . expression MODULUS_OP expression
    (94) expression -> . expression EXPONENT_OP expression
    (95) expression -> . expression BIT_RIGHT_SHIFT expression
    (96) expression -> . expression BIT_LEFT_SHIFT expression
    (97) expression -> . expression CONCATENATE expression
    (98) expression -> . expression REP_OP expression
    (99) expression -> . expression COMMA expression
    (100) expression -> . expression ASSOCIATE_OP expression
    (101) expression -> . expression RANGE_OP expression
    (102) expression -> . expression SEARCH_MODIFY expression
    (103) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS SEMICOLON
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 42
    BIT_FLIP        shift and go to state 47
    NOT_OP          shift and go to state 44
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 54
    OPEN_PARANTHESIS shift and go to state 60
    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 51
    SCI_NOT         shift and go to state 53
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 45
    OCTAL           shift and go to state 56
    STRING          shift and go to state 48
    RES_STRING      shift and go to state 50

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 55
    string                         shift and go to state 46
    number                         shift and go to state 43
    functionCall                   shift and go to state 52
    expression                     shift and go to state 222
    empty                          shift and go to state 49

state 219

    (26) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .
    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block . ELSE Markerelse block

    VARIABLE        reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    PRIVATE         reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    LOCAL           reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    RETURN          reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    IDENTIFIER      reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    WHILE           reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    FOR             reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    PRINT           reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    SUB             reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    LAST            reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    NEXT            reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    IF              reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    USE             reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    SWITCH          reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    BLOCK_ENDS      reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    $end            reduce using rule 26 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block .)
    ELSE            shift and go to state 223


state 220

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .

    VARIABLE        reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRIVATE         reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LOCAL           reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    RETURN          reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IDENTIFIER      reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    WHILE           reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    FOR             reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRINT           reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SUB             reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LAST            reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NEXT            reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IF              reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    USE             reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SWITCH          reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    $end            reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BLOCK_ENDS      reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)


state 221

    (23) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . block caselist
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 6

    block                          shift and go to state 224

state 222

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression . CLOSE_PARANTHESIS block
    (72) expression -> expression . OR_STR_OP expression
    (73) expression -> expression . XOR_STR_OP expression
    (74) expression -> expression . AND_STR_OP expression
    (75) expression -> expression . NOT_STR_OP expression
    (76) expression -> expression . COMPARE_OP expression
    (77) expression -> expression . BIT_OR expression
    (78) expression -> expression . BIT_XOR expression
    (79) expression -> expression . BIT_AND expression
    (80) expression -> expression . AND_OP Marker expression
    (81) expression -> expression . OR_OP Marker expression
    (82) expression -> expression . EQUALS_OP expression
    (83) expression -> expression . NOT_EQUALS_OP expression
    (84) expression -> expression . GREATER_OP expression
    (85) expression -> expression . LESS_OP expression
    (86) expression -> expression . GREATER_EQUAL_OP expression
    (87) expression -> expression . LESS_EQUAL_OP expression
    (89) expression -> expression . PLUS_OP expression
    (90) expression -> expression . MINUS_OP expression
    (91) expression -> expression . MULTIPLICATION_OP expression
    (92) expression -> expression . DIVISION_OP expression
    (93) expression -> expression . MODULUS_OP expression
    (94) expression -> expression . EXPONENT_OP expression
    (95) expression -> expression . BIT_RIGHT_SHIFT expression
    (96) expression -> expression . BIT_LEFT_SHIFT expression
    (97) expression -> expression . CONCATENATE expression
    (98) expression -> expression . REP_OP expression
    (99) expression -> expression . COMMA expression
    (100) expression -> expression . ASSOCIATE_OP expression
    (101) expression -> expression . RANGE_OP expression
    (102) expression -> expression . SEARCH_MODIFY expression
    (103) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 225
    OR_STR_OP       shift and go to state 118
    XOR_STR_OP      shift and go to state 114
    AND_STR_OP      shift and go to state 108
    NOT_STR_OP      shift and go to state 102
    COMPARE_OP      shift and go to state 99
    BIT_OR          shift and go to state 124
    BIT_XOR         shift and go to state 105
    BIT_AND         shift and go to state 115
    AND_OP          shift and go to state 119
    OR_OP           shift and go to state 109
    EQUALS_OP       shift and go to state 106
    NOT_EQUALS_OP   shift and go to state 100
    GREATER_OP      shift and go to state 127
    LESS_OP         shift and go to state 110
    GREATER_EQUAL_OP shift and go to state 113
    LESS_EQUAL_OP   shift and go to state 97
    PLUS_OP         shift and go to state 125
    MINUS_OP        shift and go to state 98
    MULTIPLICATION_OP shift and go to state 116
    DIVISION_OP     shift and go to state 103
    MODULUS_OP      shift and go to state 112
    EXPONENT_OP     shift and go to state 101
    BIT_RIGHT_SHIFT shift and go to state 123
    BIT_LEFT_SHIFT  shift and go to state 120
    CONCATENATE     shift and go to state 122
    REP_OP          shift and go to state 121
    COMMA           shift and go to state 111
    ASSOCIATE_OP    shift and go to state 117
    RANGE_OP        shift and go to state 104
    SEARCH_MODIFY   shift and go to state 96
    SEARCH_MODIFY_NEG shift and go to state 126


state 223

    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE . Markerelse block
    (29) Markerelse -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerelse                     shift and go to state 227
    empty                          shift and go to state 226

state 224

    (23) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block . caselist
    (23) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (24) caselist -> . ELSE block
    (25) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 181
    ELSE            shift and go to state 183
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 228
    empty                          shift and go to state 184

state 225

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 6

    block                          shift and go to state 229

state 226

    (29) Markerelse -> empty .

    BLOCK_BEGIN     reduce using rule 29 (Markerelse -> empty .)


state 227

    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 6

    block                          shift and go to state 230

state 228

    (23) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .

    BLOCK_ENDS      reduce using rule 23 (caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .)


state 229

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .

    VARIABLE        reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    PRIVATE         reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    LOCAL           reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    RETURN          reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    IDENTIFIER      reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    WHILE           reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    FOR             reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    PRINT           reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    SUB             reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    LAST            reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    NEXT            reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    IF              reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    USE             reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    SWITCH          reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    BLOCK_ENDS      reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    $end            reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)


state 230

    (27) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .

    VARIABLE        reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    PRIVATE         reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    LOCAL           reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    RETURN          reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    IDENTIFIER      reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    WHILE           reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    FOR             reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    PRINT           reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    SUB             reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    LAST            reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    NEXT            reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    IF              reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    USE             reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    SWITCH          reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    $end            reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)
    BLOCK_ENDS      reduce using rule 27 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif block ELSE Markerelse block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 148 resolved as shift
WARNING: reduce/reduce conflict in state 135 resolved using rule (parameters -> empty)
WARNING: rejected rule (expression -> empty) in state 135
WARNING: reduce/reduce conflict in state 209 resolved using rule (parameters -> expression)
WARNING: rejected rule (expression -> expression COMMA expression) in state 209
