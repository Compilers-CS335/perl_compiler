Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    FORMAT
    COMMENT
    TRANSLATION
    GOTO
    FOREACH
    ELSIF
    SUBSTITUTE
    SELECT
    FILE_HANDLING_OPTIONS
    COLON
    UNLESS
    DECREMENT_OP
    UNTIL
    WHITESPACE
    USER_INPUT_OP
    QUESTION_MARK
    REDO
    HASH
    WRITE
    MATCH
    INCREMENT_OP
    DO
    SYSTEM_COMMAND
    CONTINUE

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     start -> statements
Rule 3     block -> BLOCK_BEGIN statements BLOCK_ENDS
Rule 4     statements -> statement statements
Rule 5     statements -> statement
Rule 6     empty -> <empty>
Rule 7     statement -> assignment Marker
Rule 8     statement -> declaration Marker
Rule 9     statement -> array_assignment Marker
Rule 10    statement -> returnStatement Marker
Rule 11    statement -> functionCall Marker SEMICOLON
Rule 12    statement -> whileStatement Marker
Rule 13    statement -> forStatement Marker
Rule 14    statement -> printStatement Marker
Rule 15    statement -> functionStatement Marker
Rule 16    statement -> lastStatement Marker
Rule 17    statement -> nextStatement Marker
Rule 18    statement -> ifthen Marker
Rule 19    statement -> ifthenelse Marker
Rule 20    statement -> useStatement Marker
Rule 21    statement -> switchStatement Marker
Rule 22    useStatement -> USE IDENTIFIER SEMICOLON
Rule 23    switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS
Rule 24    caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
Rule 25    caselist -> ELSE block
Rule 26    caselist -> empty
Rule 27    ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
Rule 28    ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
Rule 29    Markerif -> empty
Rule 30    Markerelse -> empty
Rule 31    lastStatement -> LAST SEMICOLON
Rule 32    nextStatement -> NEXT SEMICOLON
Rule 33    functionStatement -> SUB IDENTIFIER Markerscope block
Rule 34    Markerscope -> empty
Rule 35    printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
Rule 36    printStatement -> PRINT expression SEMICOLON
Rule 37    returnStatement -> RETURN expression SEMICOLON
Rule 38    assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 39    assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 40    assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
Rule 41    assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
Rule 42    declaration -> VARIABLE decList SEMICOLON
Rule 43    declaration -> PRIVATE VARIABLE decList SEMICOLON
Rule 44    declaration -> LOCAL VARIABLE decList SEMICOLON
Rule 45    decList -> COMMA VARIABLE decList
Rule 46    decList -> empty
Rule 47    functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
Rule 48    term -> functionCall
Rule 49    parameters -> expression COMMA parameters
Rule 50    parameters -> expression
Rule 51    parameters -> empty
Rule 52    whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
Rule 53    Markerwhile -> empty
Rule 54    forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
Rule 55    string -> STRING
Rule 56    string -> RES_STRING
Rule 57    number -> NUMBER
Rule 58    number -> SCI_NOT
Rule 59    number -> FLOAT
Rule 60    number -> HEXADECIMAL
Rule 61    number -> OCTAL
Rule 62    term -> number
Rule 63    term -> string
Rule 64    term -> VARIABLE
Rule 65    term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
Rule 66    term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
Rule 67    array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
Rule 68    arrayList -> COMMA expression arrayList
Rule 69    arrayList -> COMMA expression
Rule 70    expression -> PLUS_OP expression
Rule 71    expression -> MINUS_OP expression
Rule 72    expression -> BIT_FLIP expression
Rule 73    expression -> NOT_OP expression
Rule 74    expression -> empty
Rule 75    expression -> term
Rule 76    expression -> expression OR_STR_OP expression
Rule 77    expression -> expression XOR_STR_OP expression
Rule 78    expression -> expression AND_STR_OP expression
Rule 79    expression -> expression NOT_STR_OP expression
Rule 80    expression -> expression COMPARE_OP expression
Rule 81    expression -> expression BIT_OR expression
Rule 82    expression -> expression BIT_XOR expression
Rule 83    expression -> expression BIT_AND expression
Rule 84    expression -> expression AND_OP Marker expression
Rule 85    expression -> expression OR_OP Marker expression
Rule 86    expression -> expression EQUALS_OP expression
Rule 87    expression -> expression NOT_EQUALS_OP expression
Rule 88    expression -> expression GREATER_OP expression
Rule 89    expression -> expression LESS_OP expression
Rule 90    expression -> expression GREATER_EQUAL_OP expression
Rule 91    expression -> expression LESS_EQUAL_OP expression
Rule 92    Marker -> empty
Rule 93    expression -> expression PLUS_OP expression
Rule 94    expression -> expression MINUS_OP expression
Rule 95    expression -> expression MULTIPLICATION_OP expression
Rule 96    expression -> expression DIVISION_OP expression
Rule 97    expression -> expression MODULUS_OP expression
Rule 98    expression -> expression EXPONENT_OP expression
Rule 99    expression -> expression BIT_RIGHT_SHIFT expression
Rule 100   expression -> expression BIT_LEFT_SHIFT expression
Rule 101   expression -> expression CONCATENATE expression
Rule 102   expression -> expression REP_OP expression
Rule 103   expression -> expression ASSOCIATE_OP expression
Rule 104   expression -> expression RANGE_OP expression
Rule 105   expression -> expression SEARCH_MODIFY expression
Rule 106   expression -> expression SEARCH_MODIFY_NEG expression

Terminals, with rules where they appear

ADV_ASSIGNMENT_OP    : 41
AND_OP               : 84
AND_STR_OP           : 78
ARRAY                : 66 67
ASSIGNMENT_OP        : 38 39 40 67
ASSOCIATE_OP         : 103
BIT_AND              : 83
BIT_FLIP             : 72
BIT_LEFT_SHIFT       : 100
BIT_OR               : 81
BIT_RIGHT_SHIFT      : 99
BIT_XOR              : 82
BLOCK_BEGIN          : 3 23
BLOCK_ENDS           : 3 23
CASE                 : 24
CLOSE_BRACKET        : 66
CLOSE_PARANTHESIS    : 24 27 28 35 47 52 54 65 67
COLON                : 
COMMA                : 45 49 68 69
COMMENT              : 
COMPARE_OP           : 80
CONCATENATE          : 101
CONTINUE             : 
DECREMENT_OP         : 
DIVISION_OP          : 96
DO                   : 
ELSE                 : 25 28
ELSIF                : 
EQUALS_OP            : 86
EXPONENT_OP          : 98
FILE_HANDLING_OPTIONS : 
FLOAT                : 59
FOR                  : 54
FOREACH              : 
FORMAT               : 
GOTO                 : 
GREATER_EQUAL_OP     : 90
GREATER_OP           : 88
HASH                 : 
HEXADECIMAL          : 60
IDENTIFIER           : 22 33 47
IF                   : 27 28
INCREMENT_OP         : 
LAST                 : 31
LESS_EQUAL_OP        : 91
LESS_OP              : 89
LOCAL                : 39 44
MATCH                : 
MINUS_OP             : 71 94
MODULUS_OP           : 97
MULTIPLICATION_OP    : 95
NEXT                 : 32
NOT_EQUALS_OP        : 87
NOT_OP               : 73
NOT_STR_OP           : 79
NUMBER               : 57 66
OCTAL                : 61
OPEN_BRACKET         : 66
OPEN_PARANTHESIS     : 24 27 28 35 47 52 54 65 67
OR_OP                : 85
OR_STR_OP            : 76
PLUS_OP              : 70 93
PRINT                : 35 36
PRIVATE              : 40 43
QUESTION_MARK        : 
RANGE_OP             : 104
REDO                 : 
REP_OP               : 102
RES_STRING           : 56
RETURN               : 37
SCI_NOT              : 58
SEARCH_MODIFY        : 105
SEARCH_MODIFY_NEG    : 106
SELECT               : 
SEMICOLON            : 11 22 31 32 35 36 37 38 39 40 41 42 43 44 54 54 67
STRING               : 55
SUB                  : 33
SUBSTITUTE           : 
SWITCH               : 23
SYSTEM_COMMAND       : 
TRANSLATION          : 
UNLESS               : 
UNTIL                : 
USE                  : 22
USER_INPUT_OP        : 
VARIABLE             : 38 39 40 41 42 43 44 45 64
WHILE                : 52
WHITESPACE           : 
WRITE                : 
XOR_STR_OP           : 77
error                : 

Nonterminals, with rules where they appear

Marker               : 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 27 28 52 84 85
Markerelse           : 28
Markerif             : 27 28
Markerscope          : 33
Markerwhile          : 52
arrayList            : 67 68
array_assignment     : 9
assignment           : 7
block                : 1 24 25 27 28 28 33 52 54
caselist             : 23 24
decList              : 42 43 44 45
declaration          : 8
empty                : 26 29 30 34 46 51 53 74 92
expression           : 23 24 27 28 35 36 37 38 39 40 41 49 50 52 54 54 54 65 67 68 69 70 71 72 73 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106
forStatement         : 13
functionCall         : 11 48
functionStatement    : 15
ifthen               : 18
ifthenelse           : 19
lastStatement        : 16
nextStatement        : 17
number               : 62
parameters           : 47 49
printStatement       : 14
returnStatement      : 10
start                : 0
statement            : 4 5
statements           : 2 3 4
string               : 63
switchStatement      : 21
term                 : 75
useStatement         : 20
whileStatement       : 12

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) start -> . statements
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . switchStatement Marker
    (38) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (39) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (42) declaration -> . VARIABLE decList SEMICOLON
    (43) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (44) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (67) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (37) returnStatement -> . RETURN expression SEMICOLON
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (52) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (54) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (35) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (36) printStatement -> . PRINT expression SEMICOLON
    (33) functionStatement -> . SUB IDENTIFIER Markerscope block
    (31) lastStatement -> . LAST SEMICOLON
    (32) nextStatement -> . NEXT SEMICOLON
    (27) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (22) useStatement -> . USE IDENTIFIER SEMICOLON
    (23) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7
    VARIABLE        shift and go to state 31
    LOCAL           shift and go to state 33
    PRIVATE         shift and go to state 16
    ARRAY           shift and go to state 5
    RETURN          shift and go to state 10
    IDENTIFIER      shift and go to state 23
    WHILE           shift and go to state 8
    FOR             shift and go to state 25
    PRINT           shift and go to state 9
    SUB             shift and go to state 12
    LAST            shift and go to state 13
    NEXT            shift and go to state 17
    IF              shift and go to state 34
    USE             shift and go to state 2
    SWITCH          shift and go to state 15

    forStatement                   shift and go to state 1
    statements                     shift and go to state 3
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 6
    ifthen                         shift and go to state 11
    nextStatement                  shift and go to state 14
    start                          shift and go to state 18
    lastStatement                  shift and go to state 19
    useStatement                   shift and go to state 20
    statement                      shift and go to state 21
    printStatement                 shift and go to state 22
    ifthenelse                     shift and go to state 24
    assignment                     shift and go to state 26
    whileStatement                 shift and go to state 27
    array_assignment               shift and go to state 28
    functionCall                   shift and go to state 29
    declaration                    shift and go to state 30
    returnStatement                shift and go to state 32
    block                          shift and go to state 35

state 1

    (13) statement -> forStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 36
    empty                          shift and go to state 37

state 2

    (22) useStatement -> USE . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 38


state 3

    (2) start -> statements .

    $end            reduce using rule 2 (start -> statements .)


state 4

    (15) statement -> functionStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 39
    empty                          shift and go to state 37

state 5

    (67) array_assignment -> ARRAY . ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON

    ASSIGNMENT_OP   shift and go to state 40


state 6

    (21) statement -> switchStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 41
    empty                          shift and go to state 37

state 7

    (3) block -> BLOCK_BEGIN . statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . switchStatement Marker
    (38) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (39) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (42) declaration -> . VARIABLE decList SEMICOLON
    (43) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (44) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (67) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (37) returnStatement -> . RETURN expression SEMICOLON
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (52) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (54) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (35) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (36) printStatement -> . PRINT expression SEMICOLON
    (33) functionStatement -> . SUB IDENTIFIER Markerscope block
    (31) lastStatement -> . LAST SEMICOLON
    (32) nextStatement -> . NEXT SEMICOLON
    (27) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (22) useStatement -> . USE IDENTIFIER SEMICOLON
    (23) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS

    VARIABLE        shift and go to state 31
    LOCAL           shift and go to state 33
    PRIVATE         shift and go to state 16
    ARRAY           shift and go to state 5
    RETURN          shift and go to state 10
    IDENTIFIER      shift and go to state 23
    WHILE           shift and go to state 8
    FOR             shift and go to state 25
    PRINT           shift and go to state 9
    SUB             shift and go to state 12
    LAST            shift and go to state 13
    NEXT            shift and go to state 17
    IF              shift and go to state 34
    USE             shift and go to state 2
    SWITCH          shift and go to state 15

    forStatement                   shift and go to state 1
    statements                     shift and go to state 42
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 6
    ifthen                         shift and go to state 11
    nextStatement                  shift and go to state 14
    lastStatement                  shift and go to state 19
    useStatement                   shift and go to state 20
    statement                      shift and go to state 21
    printStatement                 shift and go to state 22
    ifthenelse                     shift and go to state 24
    assignment                     shift and go to state 26
    whileStatement                 shift and go to state 27
    array_assignment               shift and go to state 28
    functionCall                   shift and go to state 29
    declaration                    shift and go to state 30
    returnStatement                shift and go to state 32

state 8

    (52) whileStatement -> WHILE . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (92) Marker -> . empty
    (6) empty -> .

    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 43
    empty                          shift and go to state 37

state 9

    (35) printStatement -> PRINT . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (36) printStatement -> PRINT . expression SEMICOLON
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    OPEN_PARANTHESIS shift and go to state 44
    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 63
    empty                          shift and go to state 53

state 10

    (37) returnStatement -> RETURN . expression SEMICOLON
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 65
    empty                          shift and go to state 53

state 11

    (18) statement -> ifthen . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 66
    empty                          shift and go to state 37

state 12

    (33) functionStatement -> SUB . IDENTIFIER Markerscope block

    IDENTIFIER      shift and go to state 67


state 13

    (31) lastStatement -> LAST . SEMICOLON

    SEMICOLON       shift and go to state 68


state 14

    (17) statement -> nextStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 69
    empty                          shift and go to state 37

state 15

    (23) switchStatement -> SWITCH . expression BLOCK_BEGIN caselist BLOCK_ENDS
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 70
    empty                          shift and go to state 53

state 16

    (40) assignment -> PRIVATE . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (43) declaration -> PRIVATE . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 71


state 17

    (32) nextStatement -> NEXT . SEMICOLON

    SEMICOLON       shift and go to state 72


state 18

    (0) S' -> start .



state 19

    (16) statement -> lastStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 73
    empty                          shift and go to state 37

state 20

    (20) statement -> useStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 74
    empty                          shift and go to state 37

state 21

    (4) statements -> statement . statements
    (5) statements -> statement .
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker
    (8) statement -> . declaration Marker
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . switchStatement Marker
    (38) assignment -> . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (39) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (40) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON
    (42) declaration -> . VARIABLE decList SEMICOLON
    (43) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (44) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (67) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (37) returnStatement -> . RETURN expression SEMICOLON
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (52) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (54) forStatement -> . FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (35) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (36) printStatement -> . PRINT expression SEMICOLON
    (33) functionStatement -> . SUB IDENTIFIER Markerscope block
    (31) lastStatement -> . LAST SEMICOLON
    (32) nextStatement -> . NEXT SEMICOLON
    (27) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (22) useStatement -> . USE IDENTIFIER SEMICOLON
    (23) switchStatement -> . SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS

    BLOCK_ENDS      reduce using rule 5 (statements -> statement .)
    $end            reduce using rule 5 (statements -> statement .)
    VARIABLE        shift and go to state 31
    LOCAL           shift and go to state 33
    PRIVATE         shift and go to state 16
    ARRAY           shift and go to state 5
    RETURN          shift and go to state 10
    IDENTIFIER      shift and go to state 23
    WHILE           shift and go to state 8
    FOR             shift and go to state 25
    PRINT           shift and go to state 9
    SUB             shift and go to state 12
    LAST            shift and go to state 13
    NEXT            shift and go to state 17
    IF              shift and go to state 34
    USE             shift and go to state 2
    SWITCH          shift and go to state 15

    forStatement                   shift and go to state 1
    statements                     shift and go to state 75
    functionStatement              shift and go to state 4
    switchStatement                shift and go to state 6
    ifthen                         shift and go to state 11
    nextStatement                  shift and go to state 14
    lastStatement                  shift and go to state 19
    useStatement                   shift and go to state 20
    statement                      shift and go to state 21
    printStatement                 shift and go to state 22
    ifthenelse                     shift and go to state 24
    assignment                     shift and go to state 26
    whileStatement                 shift and go to state 27
    array_assignment               shift and go to state 28
    functionCall                   shift and go to state 29
    declaration                    shift and go to state 30
    returnStatement                shift and go to state 32

state 22

    (14) statement -> printStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 76
    empty                          shift and go to state 37

state 23

    (47) functionCall -> IDENTIFIER . OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS

    OPEN_PARANTHESIS shift and go to state 77


state 24

    (19) statement -> ifthenelse . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 78
    empty                          shift and go to state 37

state 25

    (54) forStatement -> FOR . OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block

    OPEN_PARANTHESIS shift and go to state 79


state 26

    (7) statement -> assignment . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 80
    empty                          shift and go to state 37

state 27

    (12) statement -> whileStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 81
    empty                          shift and go to state 37

state 28

    (9) statement -> array_assignment . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 82
    empty                          shift and go to state 37

state 29

    (11) statement -> functionCall . Marker SEMICOLON
    (92) Marker -> . empty
    (6) empty -> .

    SEMICOLON       reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 83
    empty                          shift and go to state 37

state 30

    (8) statement -> declaration . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 84
    empty                          shift and go to state 37

state 31

    (38) assignment -> VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (41) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression SEMICOLON
    (42) declaration -> VARIABLE . decList SEMICOLON
    (45) decList -> . COMMA VARIABLE decList
    (46) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 88
    ADV_ASSIGNMENT_OP shift and go to state 86
    COMMA           shift and go to state 87
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 89
    decList                        shift and go to state 85

state 32

    (10) statement -> returnStatement . Marker
    (92) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 90
    empty                          shift and go to state 37

state 33

    (39) assignment -> LOCAL . VARIABLE ASSIGNMENT_OP expression SEMICOLON
    (44) declaration -> LOCAL . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 91


state 34

    (27) ifthen -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block

    OPEN_PARANTHESIS shift and go to state 92


state 35

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 36

    (13) statement -> forStatement Marker .

    VARIABLE        reduce using rule 13 (statement -> forStatement Marker .)
    LOCAL           reduce using rule 13 (statement -> forStatement Marker .)
    PRIVATE         reduce using rule 13 (statement -> forStatement Marker .)
    ARRAY           reduce using rule 13 (statement -> forStatement Marker .)
    RETURN          reduce using rule 13 (statement -> forStatement Marker .)
    IDENTIFIER      reduce using rule 13 (statement -> forStatement Marker .)
    WHILE           reduce using rule 13 (statement -> forStatement Marker .)
    FOR             reduce using rule 13 (statement -> forStatement Marker .)
    PRINT           reduce using rule 13 (statement -> forStatement Marker .)
    SUB             reduce using rule 13 (statement -> forStatement Marker .)
    LAST            reduce using rule 13 (statement -> forStatement Marker .)
    NEXT            reduce using rule 13 (statement -> forStatement Marker .)
    IF              reduce using rule 13 (statement -> forStatement Marker .)
    USE             reduce using rule 13 (statement -> forStatement Marker .)
    SWITCH          reduce using rule 13 (statement -> forStatement Marker .)
    $end            reduce using rule 13 (statement -> forStatement Marker .)
    BLOCK_ENDS      reduce using rule 13 (statement -> forStatement Marker .)


state 37

    (92) Marker -> empty .

    VARIABLE        reduce using rule 92 (Marker -> empty .)
    LOCAL           reduce using rule 92 (Marker -> empty .)
    PRIVATE         reduce using rule 92 (Marker -> empty .)
    ARRAY           reduce using rule 92 (Marker -> empty .)
    RETURN          reduce using rule 92 (Marker -> empty .)
    IDENTIFIER      reduce using rule 92 (Marker -> empty .)
    WHILE           reduce using rule 92 (Marker -> empty .)
    FOR             reduce using rule 92 (Marker -> empty .)
    PRINT           reduce using rule 92 (Marker -> empty .)
    SUB             reduce using rule 92 (Marker -> empty .)
    LAST            reduce using rule 92 (Marker -> empty .)
    NEXT            reduce using rule 92 (Marker -> empty .)
    IF              reduce using rule 92 (Marker -> empty .)
    USE             reduce using rule 92 (Marker -> empty .)
    SWITCH          reduce using rule 92 (Marker -> empty .)
    $end            reduce using rule 92 (Marker -> empty .)
    BLOCK_ENDS      reduce using rule 92 (Marker -> empty .)
    PLUS_OP         reduce using rule 92 (Marker -> empty .)
    MINUS_OP        reduce using rule 92 (Marker -> empty .)
    BIT_FLIP        reduce using rule 92 (Marker -> empty .)
    NOT_OP          reduce using rule 92 (Marker -> empty .)
    OPEN_PARANTHESIS reduce using rule 92 (Marker -> empty .)
    NUMBER          reduce using rule 92 (Marker -> empty .)
    SCI_NOT         reduce using rule 92 (Marker -> empty .)
    FLOAT           reduce using rule 92 (Marker -> empty .)
    HEXADECIMAL     reduce using rule 92 (Marker -> empty .)
    OCTAL           reduce using rule 92 (Marker -> empty .)
    STRING          reduce using rule 92 (Marker -> empty .)
    RES_STRING      reduce using rule 92 (Marker -> empty .)
    OR_STR_OP       reduce using rule 92 (Marker -> empty .)
    XOR_STR_OP      reduce using rule 92 (Marker -> empty .)
    AND_STR_OP      reduce using rule 92 (Marker -> empty .)
    NOT_STR_OP      reduce using rule 92 (Marker -> empty .)
    COMPARE_OP      reduce using rule 92 (Marker -> empty .)
    BIT_OR          reduce using rule 92 (Marker -> empty .)
    BIT_XOR         reduce using rule 92 (Marker -> empty .)
    BIT_AND         reduce using rule 92 (Marker -> empty .)
    AND_OP          reduce using rule 92 (Marker -> empty .)
    OR_OP           reduce using rule 92 (Marker -> empty .)
    EQUALS_OP       reduce using rule 92 (Marker -> empty .)
    NOT_EQUALS_OP   reduce using rule 92 (Marker -> empty .)
    GREATER_OP      reduce using rule 92 (Marker -> empty .)
    LESS_OP         reduce using rule 92 (Marker -> empty .)
    GREATER_EQUAL_OP reduce using rule 92 (Marker -> empty .)
    LESS_EQUAL_OP   reduce using rule 92 (Marker -> empty .)
    MULTIPLICATION_OP reduce using rule 92 (Marker -> empty .)
    DIVISION_OP     reduce using rule 92 (Marker -> empty .)
    MODULUS_OP      reduce using rule 92 (Marker -> empty .)
    EXPONENT_OP     reduce using rule 92 (Marker -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 92 (Marker -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 92 (Marker -> empty .)
    CONCATENATE     reduce using rule 92 (Marker -> empty .)
    REP_OP          reduce using rule 92 (Marker -> empty .)
    ASSOCIATE_OP    reduce using rule 92 (Marker -> empty .)
    RANGE_OP        reduce using rule 92 (Marker -> empty .)
    SEARCH_MODIFY   reduce using rule 92 (Marker -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 92 (Marker -> empty .)
    SEMICOLON       reduce using rule 92 (Marker -> empty .)
    BLOCK_BEGIN     reduce using rule 92 (Marker -> empty .)
    CLOSE_PARANTHESIS reduce using rule 92 (Marker -> empty .)
    COMMA           reduce using rule 92 (Marker -> empty .)


state 38

    (22) useStatement -> USE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 93


state 39

    (15) statement -> functionStatement Marker .

    VARIABLE        reduce using rule 15 (statement -> functionStatement Marker .)
    LOCAL           reduce using rule 15 (statement -> functionStatement Marker .)
    PRIVATE         reduce using rule 15 (statement -> functionStatement Marker .)
    ARRAY           reduce using rule 15 (statement -> functionStatement Marker .)
    RETURN          reduce using rule 15 (statement -> functionStatement Marker .)
    IDENTIFIER      reduce using rule 15 (statement -> functionStatement Marker .)
    WHILE           reduce using rule 15 (statement -> functionStatement Marker .)
    FOR             reduce using rule 15 (statement -> functionStatement Marker .)
    PRINT           reduce using rule 15 (statement -> functionStatement Marker .)
    SUB             reduce using rule 15 (statement -> functionStatement Marker .)
    LAST            reduce using rule 15 (statement -> functionStatement Marker .)
    NEXT            reduce using rule 15 (statement -> functionStatement Marker .)
    IF              reduce using rule 15 (statement -> functionStatement Marker .)
    USE             reduce using rule 15 (statement -> functionStatement Marker .)
    SWITCH          reduce using rule 15 (statement -> functionStatement Marker .)
    $end            reduce using rule 15 (statement -> functionStatement Marker .)
    BLOCK_ENDS      reduce using rule 15 (statement -> functionStatement Marker .)


state 40

    (67) array_assignment -> ARRAY ASSIGNMENT_OP . OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS shift and go to state 94


state 41

    (21) statement -> switchStatement Marker .

    VARIABLE        reduce using rule 21 (statement -> switchStatement Marker .)
    LOCAL           reduce using rule 21 (statement -> switchStatement Marker .)
    PRIVATE         reduce using rule 21 (statement -> switchStatement Marker .)
    ARRAY           reduce using rule 21 (statement -> switchStatement Marker .)
    RETURN          reduce using rule 21 (statement -> switchStatement Marker .)
    IDENTIFIER      reduce using rule 21 (statement -> switchStatement Marker .)
    WHILE           reduce using rule 21 (statement -> switchStatement Marker .)
    FOR             reduce using rule 21 (statement -> switchStatement Marker .)
    PRINT           reduce using rule 21 (statement -> switchStatement Marker .)
    SUB             reduce using rule 21 (statement -> switchStatement Marker .)
    LAST            reduce using rule 21 (statement -> switchStatement Marker .)
    NEXT            reduce using rule 21 (statement -> switchStatement Marker .)
    IF              reduce using rule 21 (statement -> switchStatement Marker .)
    USE             reduce using rule 21 (statement -> switchStatement Marker .)
    SWITCH          reduce using rule 21 (statement -> switchStatement Marker .)
    $end            reduce using rule 21 (statement -> switchStatement Marker .)
    BLOCK_ENDS      reduce using rule 21 (statement -> switchStatement Marker .)


state 42

    (3) block -> BLOCK_BEGIN statements . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 95


state 43

    (52) whileStatement -> WHILE Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block

    OPEN_PARANTHESIS shift and go to state 96


state 44

    (35) printStatement -> PRINT OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS SEMICOLON
    (65) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 97
    empty                          shift and go to state 53

state 45

    (71) expression -> MINUS_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 98
    empty                          shift and go to state 53

state 46

    (62) term -> number .

    OR_STR_OP       reduce using rule 62 (term -> number .)
    XOR_STR_OP      reduce using rule 62 (term -> number .)
    AND_STR_OP      reduce using rule 62 (term -> number .)
    NOT_STR_OP      reduce using rule 62 (term -> number .)
    COMPARE_OP      reduce using rule 62 (term -> number .)
    BIT_OR          reduce using rule 62 (term -> number .)
    BIT_XOR         reduce using rule 62 (term -> number .)
    BIT_AND         reduce using rule 62 (term -> number .)
    AND_OP          reduce using rule 62 (term -> number .)
    OR_OP           reduce using rule 62 (term -> number .)
    EQUALS_OP       reduce using rule 62 (term -> number .)
    NOT_EQUALS_OP   reduce using rule 62 (term -> number .)
    GREATER_OP      reduce using rule 62 (term -> number .)
    LESS_OP         reduce using rule 62 (term -> number .)
    GREATER_EQUAL_OP reduce using rule 62 (term -> number .)
    LESS_EQUAL_OP   reduce using rule 62 (term -> number .)
    PLUS_OP         reduce using rule 62 (term -> number .)
    MINUS_OP        reduce using rule 62 (term -> number .)
    MULTIPLICATION_OP reduce using rule 62 (term -> number .)
    DIVISION_OP     reduce using rule 62 (term -> number .)
    MODULUS_OP      reduce using rule 62 (term -> number .)
    EXPONENT_OP     reduce using rule 62 (term -> number .)
    BIT_RIGHT_SHIFT reduce using rule 62 (term -> number .)
    BIT_LEFT_SHIFT  reduce using rule 62 (term -> number .)
    CONCATENATE     reduce using rule 62 (term -> number .)
    REP_OP          reduce using rule 62 (term -> number .)
    ASSOCIATE_OP    reduce using rule 62 (term -> number .)
    RANGE_OP        reduce using rule 62 (term -> number .)
    SEARCH_MODIFY   reduce using rule 62 (term -> number .)
    SEARCH_MODIFY_NEG reduce using rule 62 (term -> number .)
    SEMICOLON       reduce using rule 62 (term -> number .)
    BLOCK_BEGIN     reduce using rule 62 (term -> number .)
    CLOSE_PARANTHESIS reduce using rule 62 (term -> number .)
    COMMA           reduce using rule 62 (term -> number .)


state 47

    (55) string -> STRING .

    OR_STR_OP       reduce using rule 55 (string -> STRING .)
    XOR_STR_OP      reduce using rule 55 (string -> STRING .)
    AND_STR_OP      reduce using rule 55 (string -> STRING .)
    NOT_STR_OP      reduce using rule 55 (string -> STRING .)
    COMPARE_OP      reduce using rule 55 (string -> STRING .)
    BIT_OR          reduce using rule 55 (string -> STRING .)
    BIT_XOR         reduce using rule 55 (string -> STRING .)
    BIT_AND         reduce using rule 55 (string -> STRING .)
    AND_OP          reduce using rule 55 (string -> STRING .)
    OR_OP           reduce using rule 55 (string -> STRING .)
    EQUALS_OP       reduce using rule 55 (string -> STRING .)
    NOT_EQUALS_OP   reduce using rule 55 (string -> STRING .)
    GREATER_OP      reduce using rule 55 (string -> STRING .)
    LESS_OP         reduce using rule 55 (string -> STRING .)
    GREATER_EQUAL_OP reduce using rule 55 (string -> STRING .)
    LESS_EQUAL_OP   reduce using rule 55 (string -> STRING .)
    PLUS_OP         reduce using rule 55 (string -> STRING .)
    MINUS_OP        reduce using rule 55 (string -> STRING .)
    MULTIPLICATION_OP reduce using rule 55 (string -> STRING .)
    DIVISION_OP     reduce using rule 55 (string -> STRING .)
    MODULUS_OP      reduce using rule 55 (string -> STRING .)
    EXPONENT_OP     reduce using rule 55 (string -> STRING .)
    BIT_RIGHT_SHIFT reduce using rule 55 (string -> STRING .)
    BIT_LEFT_SHIFT  reduce using rule 55 (string -> STRING .)
    CONCATENATE     reduce using rule 55 (string -> STRING .)
    REP_OP          reduce using rule 55 (string -> STRING .)
    ASSOCIATE_OP    reduce using rule 55 (string -> STRING .)
    RANGE_OP        reduce using rule 55 (string -> STRING .)
    SEARCH_MODIFY   reduce using rule 55 (string -> STRING .)
    SEARCH_MODIFY_NEG reduce using rule 55 (string -> STRING .)
    SEMICOLON       reduce using rule 55 (string -> STRING .)
    BLOCK_BEGIN     reduce using rule 55 (string -> STRING .)
    CLOSE_PARANTHESIS reduce using rule 55 (string -> STRING .)
    COMMA           reduce using rule 55 (string -> STRING .)


state 48

    (73) expression -> NOT_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 99
    empty                          shift and go to state 53

state 49

    (60) number -> HEXADECIMAL .

    OR_STR_OP       reduce using rule 60 (number -> HEXADECIMAL .)
    XOR_STR_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    AND_STR_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    NOT_STR_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    COMPARE_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_OR          reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_XOR         reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_AND         reduce using rule 60 (number -> HEXADECIMAL .)
    AND_OP          reduce using rule 60 (number -> HEXADECIMAL .)
    OR_OP           reduce using rule 60 (number -> HEXADECIMAL .)
    EQUALS_OP       reduce using rule 60 (number -> HEXADECIMAL .)
    NOT_EQUALS_OP   reduce using rule 60 (number -> HEXADECIMAL .)
    GREATER_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    LESS_OP         reduce using rule 60 (number -> HEXADECIMAL .)
    GREATER_EQUAL_OP reduce using rule 60 (number -> HEXADECIMAL .)
    LESS_EQUAL_OP   reduce using rule 60 (number -> HEXADECIMAL .)
    PLUS_OP         reduce using rule 60 (number -> HEXADECIMAL .)
    MINUS_OP        reduce using rule 60 (number -> HEXADECIMAL .)
    MULTIPLICATION_OP reduce using rule 60 (number -> HEXADECIMAL .)
    DIVISION_OP     reduce using rule 60 (number -> HEXADECIMAL .)
    MODULUS_OP      reduce using rule 60 (number -> HEXADECIMAL .)
    EXPONENT_OP     reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_RIGHT_SHIFT reduce using rule 60 (number -> HEXADECIMAL .)
    BIT_LEFT_SHIFT  reduce using rule 60 (number -> HEXADECIMAL .)
    CONCATENATE     reduce using rule 60 (number -> HEXADECIMAL .)
    REP_OP          reduce using rule 60 (number -> HEXADECIMAL .)
    ASSOCIATE_OP    reduce using rule 60 (number -> HEXADECIMAL .)
    RANGE_OP        reduce using rule 60 (number -> HEXADECIMAL .)
    SEARCH_MODIFY   reduce using rule 60 (number -> HEXADECIMAL .)
    SEARCH_MODIFY_NEG reduce using rule 60 (number -> HEXADECIMAL .)
    COMMA           reduce using rule 60 (number -> HEXADECIMAL .)
    CLOSE_PARANTHESIS reduce using rule 60 (number -> HEXADECIMAL .)
    SEMICOLON       reduce using rule 60 (number -> HEXADECIMAL .)
    BLOCK_BEGIN     reduce using rule 60 (number -> HEXADECIMAL .)


state 50

    (63) term -> string .

    OR_STR_OP       reduce using rule 63 (term -> string .)
    XOR_STR_OP      reduce using rule 63 (term -> string .)
    AND_STR_OP      reduce using rule 63 (term -> string .)
    NOT_STR_OP      reduce using rule 63 (term -> string .)
    COMPARE_OP      reduce using rule 63 (term -> string .)
    BIT_OR          reduce using rule 63 (term -> string .)
    BIT_XOR         reduce using rule 63 (term -> string .)
    BIT_AND         reduce using rule 63 (term -> string .)
    AND_OP          reduce using rule 63 (term -> string .)
    OR_OP           reduce using rule 63 (term -> string .)
    EQUALS_OP       reduce using rule 63 (term -> string .)
    NOT_EQUALS_OP   reduce using rule 63 (term -> string .)
    GREATER_OP      reduce using rule 63 (term -> string .)
    LESS_OP         reduce using rule 63 (term -> string .)
    GREATER_EQUAL_OP reduce using rule 63 (term -> string .)
    LESS_EQUAL_OP   reduce using rule 63 (term -> string .)
    PLUS_OP         reduce using rule 63 (term -> string .)
    MINUS_OP        reduce using rule 63 (term -> string .)
    MULTIPLICATION_OP reduce using rule 63 (term -> string .)
    DIVISION_OP     reduce using rule 63 (term -> string .)
    MODULUS_OP      reduce using rule 63 (term -> string .)
    EXPONENT_OP     reduce using rule 63 (term -> string .)
    BIT_RIGHT_SHIFT reduce using rule 63 (term -> string .)
    BIT_LEFT_SHIFT  reduce using rule 63 (term -> string .)
    CONCATENATE     reduce using rule 63 (term -> string .)
    REP_OP          reduce using rule 63 (term -> string .)
    ASSOCIATE_OP    reduce using rule 63 (term -> string .)
    RANGE_OP        reduce using rule 63 (term -> string .)
    SEARCH_MODIFY   reduce using rule 63 (term -> string .)
    SEARCH_MODIFY_NEG reduce using rule 63 (term -> string .)
    SEMICOLON       reduce using rule 63 (term -> string .)
    BLOCK_BEGIN     reduce using rule 63 (term -> string .)
    CLOSE_PARANTHESIS reduce using rule 63 (term -> string .)
    COMMA           reduce using rule 63 (term -> string .)


state 51

    (72) expression -> BIT_FLIP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 100
    empty                          shift and go to state 53

state 52

    (66) term -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 101


state 53

    (74) expression -> empty .

    SEMICOLON       reduce using rule 74 (expression -> empty .)
    OR_STR_OP       reduce using rule 74 (expression -> empty .)
    XOR_STR_OP      reduce using rule 74 (expression -> empty .)
    AND_STR_OP      reduce using rule 74 (expression -> empty .)
    NOT_STR_OP      reduce using rule 74 (expression -> empty .)
    COMPARE_OP      reduce using rule 74 (expression -> empty .)
    BIT_OR          reduce using rule 74 (expression -> empty .)
    BIT_XOR         reduce using rule 74 (expression -> empty .)
    BIT_AND         reduce using rule 74 (expression -> empty .)
    AND_OP          reduce using rule 74 (expression -> empty .)
    OR_OP           reduce using rule 74 (expression -> empty .)
    EQUALS_OP       reduce using rule 74 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 74 (expression -> empty .)
    GREATER_OP      reduce using rule 74 (expression -> empty .)
    LESS_OP         reduce using rule 74 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 74 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 74 (expression -> empty .)
    PLUS_OP         reduce using rule 74 (expression -> empty .)
    MINUS_OP        reduce using rule 74 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 74 (expression -> empty .)
    DIVISION_OP     reduce using rule 74 (expression -> empty .)
    MODULUS_OP      reduce using rule 74 (expression -> empty .)
    EXPONENT_OP     reduce using rule 74 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 74 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 74 (expression -> empty .)
    CONCATENATE     reduce using rule 74 (expression -> empty .)
    REP_OP          reduce using rule 74 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 74 (expression -> empty .)
    RANGE_OP        reduce using rule 74 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 74 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 74 (expression -> empty .)
    CLOSE_PARANTHESIS reduce using rule 74 (expression -> empty .)
    BLOCK_BEGIN     reduce using rule 74 (expression -> empty .)
    COMMA           reduce using rule 74 (expression -> empty .)


state 54

    (56) string -> RES_STRING .

    OR_STR_OP       reduce using rule 56 (string -> RES_STRING .)
    XOR_STR_OP      reduce using rule 56 (string -> RES_STRING .)
    AND_STR_OP      reduce using rule 56 (string -> RES_STRING .)
    NOT_STR_OP      reduce using rule 56 (string -> RES_STRING .)
    COMPARE_OP      reduce using rule 56 (string -> RES_STRING .)
    BIT_OR          reduce using rule 56 (string -> RES_STRING .)
    BIT_XOR         reduce using rule 56 (string -> RES_STRING .)
    BIT_AND         reduce using rule 56 (string -> RES_STRING .)
    AND_OP          reduce using rule 56 (string -> RES_STRING .)
    OR_OP           reduce using rule 56 (string -> RES_STRING .)
    EQUALS_OP       reduce using rule 56 (string -> RES_STRING .)
    NOT_EQUALS_OP   reduce using rule 56 (string -> RES_STRING .)
    GREATER_OP      reduce using rule 56 (string -> RES_STRING .)
    LESS_OP         reduce using rule 56 (string -> RES_STRING .)
    GREATER_EQUAL_OP reduce using rule 56 (string -> RES_STRING .)
    LESS_EQUAL_OP   reduce using rule 56 (string -> RES_STRING .)
    PLUS_OP         reduce using rule 56 (string -> RES_STRING .)
    MINUS_OP        reduce using rule 56 (string -> RES_STRING .)
    MULTIPLICATION_OP reduce using rule 56 (string -> RES_STRING .)
    DIVISION_OP     reduce using rule 56 (string -> RES_STRING .)
    MODULUS_OP      reduce using rule 56 (string -> RES_STRING .)
    EXPONENT_OP     reduce using rule 56 (string -> RES_STRING .)
    BIT_RIGHT_SHIFT reduce using rule 56 (string -> RES_STRING .)
    BIT_LEFT_SHIFT  reduce using rule 56 (string -> RES_STRING .)
    CONCATENATE     reduce using rule 56 (string -> RES_STRING .)
    REP_OP          reduce using rule 56 (string -> RES_STRING .)
    ASSOCIATE_OP    reduce using rule 56 (string -> RES_STRING .)
    RANGE_OP        reduce using rule 56 (string -> RES_STRING .)
    SEARCH_MODIFY   reduce using rule 56 (string -> RES_STRING .)
    SEARCH_MODIFY_NEG reduce using rule 56 (string -> RES_STRING .)
    SEMICOLON       reduce using rule 56 (string -> RES_STRING .)
    BLOCK_BEGIN     reduce using rule 56 (string -> RES_STRING .)
    CLOSE_PARANTHESIS reduce using rule 56 (string -> RES_STRING .)
    COMMA           reduce using rule 56 (string -> RES_STRING .)


state 55

    (57) number -> NUMBER .

    OR_STR_OP       reduce using rule 57 (number -> NUMBER .)
    XOR_STR_OP      reduce using rule 57 (number -> NUMBER .)
    AND_STR_OP      reduce using rule 57 (number -> NUMBER .)
    NOT_STR_OP      reduce using rule 57 (number -> NUMBER .)
    COMPARE_OP      reduce using rule 57 (number -> NUMBER .)
    BIT_OR          reduce using rule 57 (number -> NUMBER .)
    BIT_XOR         reduce using rule 57 (number -> NUMBER .)
    BIT_AND         reduce using rule 57 (number -> NUMBER .)
    AND_OP          reduce using rule 57 (number -> NUMBER .)
    OR_OP           reduce using rule 57 (number -> NUMBER .)
    EQUALS_OP       reduce using rule 57 (number -> NUMBER .)
    NOT_EQUALS_OP   reduce using rule 57 (number -> NUMBER .)
    GREATER_OP      reduce using rule 57 (number -> NUMBER .)
    LESS_OP         reduce using rule 57 (number -> NUMBER .)
    GREATER_EQUAL_OP reduce using rule 57 (number -> NUMBER .)
    LESS_EQUAL_OP   reduce using rule 57 (number -> NUMBER .)
    PLUS_OP         reduce using rule 57 (number -> NUMBER .)
    MINUS_OP        reduce using rule 57 (number -> NUMBER .)
    MULTIPLICATION_OP reduce using rule 57 (number -> NUMBER .)
    DIVISION_OP     reduce using rule 57 (number -> NUMBER .)
    MODULUS_OP      reduce using rule 57 (number -> NUMBER .)
    EXPONENT_OP     reduce using rule 57 (number -> NUMBER .)
    BIT_RIGHT_SHIFT reduce using rule 57 (number -> NUMBER .)
    BIT_LEFT_SHIFT  reduce using rule 57 (number -> NUMBER .)
    CONCATENATE     reduce using rule 57 (number -> NUMBER .)
    REP_OP          reduce using rule 57 (number -> NUMBER .)
    ASSOCIATE_OP    reduce using rule 57 (number -> NUMBER .)
    RANGE_OP        reduce using rule 57 (number -> NUMBER .)
    SEARCH_MODIFY   reduce using rule 57 (number -> NUMBER .)
    SEARCH_MODIFY_NEG reduce using rule 57 (number -> NUMBER .)
    COMMA           reduce using rule 57 (number -> NUMBER .)
    CLOSE_PARANTHESIS reduce using rule 57 (number -> NUMBER .)
    SEMICOLON       reduce using rule 57 (number -> NUMBER .)
    BLOCK_BEGIN     reduce using rule 57 (number -> NUMBER .)


state 56

    (48) term -> functionCall .

    OR_STR_OP       reduce using rule 48 (term -> functionCall .)
    XOR_STR_OP      reduce using rule 48 (term -> functionCall .)
    AND_STR_OP      reduce using rule 48 (term -> functionCall .)
    NOT_STR_OP      reduce using rule 48 (term -> functionCall .)
    COMPARE_OP      reduce using rule 48 (term -> functionCall .)
    BIT_OR          reduce using rule 48 (term -> functionCall .)
    BIT_XOR         reduce using rule 48 (term -> functionCall .)
    BIT_AND         reduce using rule 48 (term -> functionCall .)
    AND_OP          reduce using rule 48 (term -> functionCall .)
    OR_OP           reduce using rule 48 (term -> functionCall .)
    EQUALS_OP       reduce using rule 48 (term -> functionCall .)
    NOT_EQUALS_OP   reduce using rule 48 (term -> functionCall .)
    GREATER_OP      reduce using rule 48 (term -> functionCall .)
    LESS_OP         reduce using rule 48 (term -> functionCall .)
    GREATER_EQUAL_OP reduce using rule 48 (term -> functionCall .)
    LESS_EQUAL_OP   reduce using rule 48 (term -> functionCall .)
    PLUS_OP         reduce using rule 48 (term -> functionCall .)
    MINUS_OP        reduce using rule 48 (term -> functionCall .)
    MULTIPLICATION_OP reduce using rule 48 (term -> functionCall .)
    DIVISION_OP     reduce using rule 48 (term -> functionCall .)
    MODULUS_OP      reduce using rule 48 (term -> functionCall .)
    EXPONENT_OP     reduce using rule 48 (term -> functionCall .)
    BIT_RIGHT_SHIFT reduce using rule 48 (term -> functionCall .)
    BIT_LEFT_SHIFT  reduce using rule 48 (term -> functionCall .)
    CONCATENATE     reduce using rule 48 (term -> functionCall .)
    REP_OP          reduce using rule 48 (term -> functionCall .)
    ASSOCIATE_OP    reduce using rule 48 (term -> functionCall .)
    RANGE_OP        reduce using rule 48 (term -> functionCall .)
    SEARCH_MODIFY   reduce using rule 48 (term -> functionCall .)
    SEARCH_MODIFY_NEG reduce using rule 48 (term -> functionCall .)
    SEMICOLON       reduce using rule 48 (term -> functionCall .)
    BLOCK_BEGIN     reduce using rule 48 (term -> functionCall .)
    CLOSE_PARANTHESIS reduce using rule 48 (term -> functionCall .)
    COMMA           reduce using rule 48 (term -> functionCall .)


state 57

    (58) number -> SCI_NOT .

    OR_STR_OP       reduce using rule 58 (number -> SCI_NOT .)
    XOR_STR_OP      reduce using rule 58 (number -> SCI_NOT .)
    AND_STR_OP      reduce using rule 58 (number -> SCI_NOT .)
    NOT_STR_OP      reduce using rule 58 (number -> SCI_NOT .)
    COMPARE_OP      reduce using rule 58 (number -> SCI_NOT .)
    BIT_OR          reduce using rule 58 (number -> SCI_NOT .)
    BIT_XOR         reduce using rule 58 (number -> SCI_NOT .)
    BIT_AND         reduce using rule 58 (number -> SCI_NOT .)
    AND_OP          reduce using rule 58 (number -> SCI_NOT .)
    OR_OP           reduce using rule 58 (number -> SCI_NOT .)
    EQUALS_OP       reduce using rule 58 (number -> SCI_NOT .)
    NOT_EQUALS_OP   reduce using rule 58 (number -> SCI_NOT .)
    GREATER_OP      reduce using rule 58 (number -> SCI_NOT .)
    LESS_OP         reduce using rule 58 (number -> SCI_NOT .)
    GREATER_EQUAL_OP reduce using rule 58 (number -> SCI_NOT .)
    LESS_EQUAL_OP   reduce using rule 58 (number -> SCI_NOT .)
    PLUS_OP         reduce using rule 58 (number -> SCI_NOT .)
    MINUS_OP        reduce using rule 58 (number -> SCI_NOT .)
    MULTIPLICATION_OP reduce using rule 58 (number -> SCI_NOT .)
    DIVISION_OP     reduce using rule 58 (number -> SCI_NOT .)
    MODULUS_OP      reduce using rule 58 (number -> SCI_NOT .)
    EXPONENT_OP     reduce using rule 58 (number -> SCI_NOT .)
    BIT_RIGHT_SHIFT reduce using rule 58 (number -> SCI_NOT .)
    BIT_LEFT_SHIFT  reduce using rule 58 (number -> SCI_NOT .)
    CONCATENATE     reduce using rule 58 (number -> SCI_NOT .)
    REP_OP          reduce using rule 58 (number -> SCI_NOT .)
    ASSOCIATE_OP    reduce using rule 58 (number -> SCI_NOT .)
    RANGE_OP        reduce using rule 58 (number -> SCI_NOT .)
    SEARCH_MODIFY   reduce using rule 58 (number -> SCI_NOT .)
    SEARCH_MODIFY_NEG reduce using rule 58 (number -> SCI_NOT .)
    COMMA           reduce using rule 58 (number -> SCI_NOT .)
    CLOSE_PARANTHESIS reduce using rule 58 (number -> SCI_NOT .)
    SEMICOLON       reduce using rule 58 (number -> SCI_NOT .)
    BLOCK_BEGIN     reduce using rule 58 (number -> SCI_NOT .)


state 58

    (64) term -> VARIABLE .

    OR_STR_OP       reduce using rule 64 (term -> VARIABLE .)
    XOR_STR_OP      reduce using rule 64 (term -> VARIABLE .)
    AND_STR_OP      reduce using rule 64 (term -> VARIABLE .)
    NOT_STR_OP      reduce using rule 64 (term -> VARIABLE .)
    COMPARE_OP      reduce using rule 64 (term -> VARIABLE .)
    BIT_OR          reduce using rule 64 (term -> VARIABLE .)
    BIT_XOR         reduce using rule 64 (term -> VARIABLE .)
    BIT_AND         reduce using rule 64 (term -> VARIABLE .)
    AND_OP          reduce using rule 64 (term -> VARIABLE .)
    OR_OP           reduce using rule 64 (term -> VARIABLE .)
    EQUALS_OP       reduce using rule 64 (term -> VARIABLE .)
    NOT_EQUALS_OP   reduce using rule 64 (term -> VARIABLE .)
    GREATER_OP      reduce using rule 64 (term -> VARIABLE .)
    LESS_OP         reduce using rule 64 (term -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 64 (term -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 64 (term -> VARIABLE .)
    PLUS_OP         reduce using rule 64 (term -> VARIABLE .)
    MINUS_OP        reduce using rule 64 (term -> VARIABLE .)
    MULTIPLICATION_OP reduce using rule 64 (term -> VARIABLE .)
    DIVISION_OP     reduce using rule 64 (term -> VARIABLE .)
    MODULUS_OP      reduce using rule 64 (term -> VARIABLE .)
    EXPONENT_OP     reduce using rule 64 (term -> VARIABLE .)
    BIT_RIGHT_SHIFT reduce using rule 64 (term -> VARIABLE .)
    BIT_LEFT_SHIFT  reduce using rule 64 (term -> VARIABLE .)
    CONCATENATE     reduce using rule 64 (term -> VARIABLE .)
    REP_OP          reduce using rule 64 (term -> VARIABLE .)
    ASSOCIATE_OP    reduce using rule 64 (term -> VARIABLE .)
    RANGE_OP        reduce using rule 64 (term -> VARIABLE .)
    SEARCH_MODIFY   reduce using rule 64 (term -> VARIABLE .)
    SEARCH_MODIFY_NEG reduce using rule 64 (term -> VARIABLE .)
    SEMICOLON       reduce using rule 64 (term -> VARIABLE .)
    BLOCK_BEGIN     reduce using rule 64 (term -> VARIABLE .)
    CLOSE_PARANTHESIS reduce using rule 64 (term -> VARIABLE .)
    COMMA           reduce using rule 64 (term -> VARIABLE .)


state 59

    (75) expression -> term .

    SEMICOLON       reduce using rule 75 (expression -> term .)
    OR_STR_OP       reduce using rule 75 (expression -> term .)
    XOR_STR_OP      reduce using rule 75 (expression -> term .)
    AND_STR_OP      reduce using rule 75 (expression -> term .)
    NOT_STR_OP      reduce using rule 75 (expression -> term .)
    COMPARE_OP      reduce using rule 75 (expression -> term .)
    BIT_OR          reduce using rule 75 (expression -> term .)
    BIT_XOR         reduce using rule 75 (expression -> term .)
    BIT_AND         reduce using rule 75 (expression -> term .)
    AND_OP          reduce using rule 75 (expression -> term .)
    OR_OP           reduce using rule 75 (expression -> term .)
    EQUALS_OP       reduce using rule 75 (expression -> term .)
    NOT_EQUALS_OP   reduce using rule 75 (expression -> term .)
    GREATER_OP      reduce using rule 75 (expression -> term .)
    LESS_OP         reduce using rule 75 (expression -> term .)
    GREATER_EQUAL_OP reduce using rule 75 (expression -> term .)
    LESS_EQUAL_OP   reduce using rule 75 (expression -> term .)
    PLUS_OP         reduce using rule 75 (expression -> term .)
    MINUS_OP        reduce using rule 75 (expression -> term .)
    MULTIPLICATION_OP reduce using rule 75 (expression -> term .)
    DIVISION_OP     reduce using rule 75 (expression -> term .)
    MODULUS_OP      reduce using rule 75 (expression -> term .)
    EXPONENT_OP     reduce using rule 75 (expression -> term .)
    BIT_RIGHT_SHIFT reduce using rule 75 (expression -> term .)
    BIT_LEFT_SHIFT  reduce using rule 75 (expression -> term .)
    CONCATENATE     reduce using rule 75 (expression -> term .)
    REP_OP          reduce using rule 75 (expression -> term .)
    ASSOCIATE_OP    reduce using rule 75 (expression -> term .)
    RANGE_OP        reduce using rule 75 (expression -> term .)
    SEARCH_MODIFY   reduce using rule 75 (expression -> term .)
    SEARCH_MODIFY_NEG reduce using rule 75 (expression -> term .)
    CLOSE_PARANTHESIS reduce using rule 75 (expression -> term .)
    BLOCK_BEGIN     reduce using rule 75 (expression -> term .)
    COMMA           reduce using rule 75 (expression -> term .)


state 60

    (61) number -> OCTAL .

    OR_STR_OP       reduce using rule 61 (number -> OCTAL .)
    XOR_STR_OP      reduce using rule 61 (number -> OCTAL .)
    AND_STR_OP      reduce using rule 61 (number -> OCTAL .)
    NOT_STR_OP      reduce using rule 61 (number -> OCTAL .)
    COMPARE_OP      reduce using rule 61 (number -> OCTAL .)
    BIT_OR          reduce using rule 61 (number -> OCTAL .)
    BIT_XOR         reduce using rule 61 (number -> OCTAL .)
    BIT_AND         reduce using rule 61 (number -> OCTAL .)
    AND_OP          reduce using rule 61 (number -> OCTAL .)
    OR_OP           reduce using rule 61 (number -> OCTAL .)
    EQUALS_OP       reduce using rule 61 (number -> OCTAL .)
    NOT_EQUALS_OP   reduce using rule 61 (number -> OCTAL .)
    GREATER_OP      reduce using rule 61 (number -> OCTAL .)
    LESS_OP         reduce using rule 61 (number -> OCTAL .)
    GREATER_EQUAL_OP reduce using rule 61 (number -> OCTAL .)
    LESS_EQUAL_OP   reduce using rule 61 (number -> OCTAL .)
    PLUS_OP         reduce using rule 61 (number -> OCTAL .)
    MINUS_OP        reduce using rule 61 (number -> OCTAL .)
    MULTIPLICATION_OP reduce using rule 61 (number -> OCTAL .)
    DIVISION_OP     reduce using rule 61 (number -> OCTAL .)
    MODULUS_OP      reduce using rule 61 (number -> OCTAL .)
    EXPONENT_OP     reduce using rule 61 (number -> OCTAL .)
    BIT_RIGHT_SHIFT reduce using rule 61 (number -> OCTAL .)
    BIT_LEFT_SHIFT  reduce using rule 61 (number -> OCTAL .)
    CONCATENATE     reduce using rule 61 (number -> OCTAL .)
    REP_OP          reduce using rule 61 (number -> OCTAL .)
    ASSOCIATE_OP    reduce using rule 61 (number -> OCTAL .)
    RANGE_OP        reduce using rule 61 (number -> OCTAL .)
    SEARCH_MODIFY   reduce using rule 61 (number -> OCTAL .)
    SEARCH_MODIFY_NEG reduce using rule 61 (number -> OCTAL .)
    COMMA           reduce using rule 61 (number -> OCTAL .)
    CLOSE_PARANTHESIS reduce using rule 61 (number -> OCTAL .)
    SEMICOLON       reduce using rule 61 (number -> OCTAL .)
    BLOCK_BEGIN     reduce using rule 61 (number -> OCTAL .)


state 61

    (59) number -> FLOAT .

    OR_STR_OP       reduce using rule 59 (number -> FLOAT .)
    XOR_STR_OP      reduce using rule 59 (number -> FLOAT .)
    AND_STR_OP      reduce using rule 59 (number -> FLOAT .)
    NOT_STR_OP      reduce using rule 59 (number -> FLOAT .)
    COMPARE_OP      reduce using rule 59 (number -> FLOAT .)
    BIT_OR          reduce using rule 59 (number -> FLOAT .)
    BIT_XOR         reduce using rule 59 (number -> FLOAT .)
    BIT_AND         reduce using rule 59 (number -> FLOAT .)
    AND_OP          reduce using rule 59 (number -> FLOAT .)
    OR_OP           reduce using rule 59 (number -> FLOAT .)
    EQUALS_OP       reduce using rule 59 (number -> FLOAT .)
    NOT_EQUALS_OP   reduce using rule 59 (number -> FLOAT .)
    GREATER_OP      reduce using rule 59 (number -> FLOAT .)
    LESS_OP         reduce using rule 59 (number -> FLOAT .)
    GREATER_EQUAL_OP reduce using rule 59 (number -> FLOAT .)
    LESS_EQUAL_OP   reduce using rule 59 (number -> FLOAT .)
    PLUS_OP         reduce using rule 59 (number -> FLOAT .)
    MINUS_OP        reduce using rule 59 (number -> FLOAT .)
    MULTIPLICATION_OP reduce using rule 59 (number -> FLOAT .)
    DIVISION_OP     reduce using rule 59 (number -> FLOAT .)
    MODULUS_OP      reduce using rule 59 (number -> FLOAT .)
    EXPONENT_OP     reduce using rule 59 (number -> FLOAT .)
    BIT_RIGHT_SHIFT reduce using rule 59 (number -> FLOAT .)
    BIT_LEFT_SHIFT  reduce using rule 59 (number -> FLOAT .)
    CONCATENATE     reduce using rule 59 (number -> FLOAT .)
    REP_OP          reduce using rule 59 (number -> FLOAT .)
    ASSOCIATE_OP    reduce using rule 59 (number -> FLOAT .)
    RANGE_OP        reduce using rule 59 (number -> FLOAT .)
    SEARCH_MODIFY   reduce using rule 59 (number -> FLOAT .)
    SEARCH_MODIFY_NEG reduce using rule 59 (number -> FLOAT .)
    COMMA           reduce using rule 59 (number -> FLOAT .)
    CLOSE_PARANTHESIS reduce using rule 59 (number -> FLOAT .)
    SEMICOLON       reduce using rule 59 (number -> FLOAT .)
    BLOCK_BEGIN     reduce using rule 59 (number -> FLOAT .)


state 62

    (70) expression -> PLUS_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 102
    empty                          shift and go to state 53

state 63

    (36) printStatement -> PRINT expression . SEMICOLON
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 114
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 64

    (65) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 134
    empty                          shift and go to state 53

state 65

    (37) returnStatement -> RETURN expression . SEMICOLON
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 135
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 66

    (18) statement -> ifthen Marker .

    VARIABLE        reduce using rule 18 (statement -> ifthen Marker .)
    LOCAL           reduce using rule 18 (statement -> ifthen Marker .)
    PRIVATE         reduce using rule 18 (statement -> ifthen Marker .)
    ARRAY           reduce using rule 18 (statement -> ifthen Marker .)
    RETURN          reduce using rule 18 (statement -> ifthen Marker .)
    IDENTIFIER      reduce using rule 18 (statement -> ifthen Marker .)
    WHILE           reduce using rule 18 (statement -> ifthen Marker .)
    FOR             reduce using rule 18 (statement -> ifthen Marker .)
    PRINT           reduce using rule 18 (statement -> ifthen Marker .)
    SUB             reduce using rule 18 (statement -> ifthen Marker .)
    LAST            reduce using rule 18 (statement -> ifthen Marker .)
    NEXT            reduce using rule 18 (statement -> ifthen Marker .)
    IF              reduce using rule 18 (statement -> ifthen Marker .)
    USE             reduce using rule 18 (statement -> ifthen Marker .)
    SWITCH          reduce using rule 18 (statement -> ifthen Marker .)
    $end            reduce using rule 18 (statement -> ifthen Marker .)
    BLOCK_ENDS      reduce using rule 18 (statement -> ifthen Marker .)


state 67

    (33) functionStatement -> SUB IDENTIFIER . Markerscope block
    (34) Markerscope -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerscope                    shift and go to state 136
    empty                          shift and go to state 137

state 68

    (31) lastStatement -> LAST SEMICOLON .

    VARIABLE        reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    LOCAL           reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    PRIVATE         reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    ARRAY           reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    RETURN          reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    WHILE           reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    FOR             reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    PRINT           reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    SUB             reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    LAST            reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    NEXT            reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    IF              reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    USE             reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    SWITCH          reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    $end            reduce using rule 31 (lastStatement -> LAST SEMICOLON .)
    BLOCK_ENDS      reduce using rule 31 (lastStatement -> LAST SEMICOLON .)


state 69

    (17) statement -> nextStatement Marker .

    VARIABLE        reduce using rule 17 (statement -> nextStatement Marker .)
    LOCAL           reduce using rule 17 (statement -> nextStatement Marker .)
    PRIVATE         reduce using rule 17 (statement -> nextStatement Marker .)
    ARRAY           reduce using rule 17 (statement -> nextStatement Marker .)
    RETURN          reduce using rule 17 (statement -> nextStatement Marker .)
    IDENTIFIER      reduce using rule 17 (statement -> nextStatement Marker .)
    WHILE           reduce using rule 17 (statement -> nextStatement Marker .)
    FOR             reduce using rule 17 (statement -> nextStatement Marker .)
    PRINT           reduce using rule 17 (statement -> nextStatement Marker .)
    SUB             reduce using rule 17 (statement -> nextStatement Marker .)
    LAST            reduce using rule 17 (statement -> nextStatement Marker .)
    NEXT            reduce using rule 17 (statement -> nextStatement Marker .)
    IF              reduce using rule 17 (statement -> nextStatement Marker .)
    USE             reduce using rule 17 (statement -> nextStatement Marker .)
    SWITCH          reduce using rule 17 (statement -> nextStatement Marker .)
    $end            reduce using rule 17 (statement -> nextStatement Marker .)
    BLOCK_ENDS      reduce using rule 17 (statement -> nextStatement Marker .)


state 70

    (23) switchStatement -> SWITCH expression . BLOCK_BEGIN caselist BLOCK_ENDS
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    BLOCK_BEGIN     shift and go to state 138
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 71

    (40) assignment -> PRIVATE VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (43) declaration -> PRIVATE VARIABLE . decList SEMICOLON
    (45) decList -> . COMMA VARIABLE decList
    (46) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 140
    COMMA           shift and go to state 87
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 89
    decList                        shift and go to state 139

state 72

    (32) nextStatement -> NEXT SEMICOLON .

    VARIABLE        reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    LOCAL           reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    PRIVATE         reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    ARRAY           reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    RETURN          reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    WHILE           reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    FOR             reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    PRINT           reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    SUB             reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    LAST            reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    NEXT            reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    IF              reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    USE             reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    SWITCH          reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    $end            reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)
    BLOCK_ENDS      reduce using rule 32 (nextStatement -> NEXT SEMICOLON .)


state 73

    (16) statement -> lastStatement Marker .

    VARIABLE        reduce using rule 16 (statement -> lastStatement Marker .)
    LOCAL           reduce using rule 16 (statement -> lastStatement Marker .)
    PRIVATE         reduce using rule 16 (statement -> lastStatement Marker .)
    ARRAY           reduce using rule 16 (statement -> lastStatement Marker .)
    RETURN          reduce using rule 16 (statement -> lastStatement Marker .)
    IDENTIFIER      reduce using rule 16 (statement -> lastStatement Marker .)
    WHILE           reduce using rule 16 (statement -> lastStatement Marker .)
    FOR             reduce using rule 16 (statement -> lastStatement Marker .)
    PRINT           reduce using rule 16 (statement -> lastStatement Marker .)
    SUB             reduce using rule 16 (statement -> lastStatement Marker .)
    LAST            reduce using rule 16 (statement -> lastStatement Marker .)
    NEXT            reduce using rule 16 (statement -> lastStatement Marker .)
    IF              reduce using rule 16 (statement -> lastStatement Marker .)
    USE             reduce using rule 16 (statement -> lastStatement Marker .)
    SWITCH          reduce using rule 16 (statement -> lastStatement Marker .)
    $end            reduce using rule 16 (statement -> lastStatement Marker .)
    BLOCK_ENDS      reduce using rule 16 (statement -> lastStatement Marker .)


state 74

    (20) statement -> useStatement Marker .

    VARIABLE        reduce using rule 20 (statement -> useStatement Marker .)
    LOCAL           reduce using rule 20 (statement -> useStatement Marker .)
    PRIVATE         reduce using rule 20 (statement -> useStatement Marker .)
    ARRAY           reduce using rule 20 (statement -> useStatement Marker .)
    RETURN          reduce using rule 20 (statement -> useStatement Marker .)
    IDENTIFIER      reduce using rule 20 (statement -> useStatement Marker .)
    WHILE           reduce using rule 20 (statement -> useStatement Marker .)
    FOR             reduce using rule 20 (statement -> useStatement Marker .)
    PRINT           reduce using rule 20 (statement -> useStatement Marker .)
    SUB             reduce using rule 20 (statement -> useStatement Marker .)
    LAST            reduce using rule 20 (statement -> useStatement Marker .)
    NEXT            reduce using rule 20 (statement -> useStatement Marker .)
    IF              reduce using rule 20 (statement -> useStatement Marker .)
    USE             reduce using rule 20 (statement -> useStatement Marker .)
    SWITCH          reduce using rule 20 (statement -> useStatement Marker .)
    $end            reduce using rule 20 (statement -> useStatement Marker .)
    BLOCK_ENDS      reduce using rule 20 (statement -> useStatement Marker .)


state 75

    (4) statements -> statement statements .

    BLOCK_ENDS      reduce using rule 4 (statements -> statement statements .)
    $end            reduce using rule 4 (statements -> statement statements .)


state 76

    (14) statement -> printStatement Marker .

    VARIABLE        reduce using rule 14 (statement -> printStatement Marker .)
    LOCAL           reduce using rule 14 (statement -> printStatement Marker .)
    PRIVATE         reduce using rule 14 (statement -> printStatement Marker .)
    ARRAY           reduce using rule 14 (statement -> printStatement Marker .)
    RETURN          reduce using rule 14 (statement -> printStatement Marker .)
    IDENTIFIER      reduce using rule 14 (statement -> printStatement Marker .)
    WHILE           reduce using rule 14 (statement -> printStatement Marker .)
    FOR             reduce using rule 14 (statement -> printStatement Marker .)
    PRINT           reduce using rule 14 (statement -> printStatement Marker .)
    SUB             reduce using rule 14 (statement -> printStatement Marker .)
    LAST            reduce using rule 14 (statement -> printStatement Marker .)
    NEXT            reduce using rule 14 (statement -> printStatement Marker .)
    IF              reduce using rule 14 (statement -> printStatement Marker .)
    USE             reduce using rule 14 (statement -> printStatement Marker .)
    SWITCH          reduce using rule 14 (statement -> printStatement Marker .)
    $end            reduce using rule 14 (statement -> printStatement Marker .)
    BLOCK_ENDS      reduce using rule 14 (statement -> printStatement Marker .)


state 77

    (47) functionCall -> IDENTIFIER OPEN_PARANTHESIS . parameters CLOSE_PARANTHESIS
    (49) parameters -> . expression COMMA parameters
    (50) parameters -> . expression
    (51) parameters -> . empty
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    parameters                     shift and go to state 141
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 143
    empty                          shift and go to state 142

state 78

    (19) statement -> ifthenelse Marker .

    VARIABLE        reduce using rule 19 (statement -> ifthenelse Marker .)
    LOCAL           reduce using rule 19 (statement -> ifthenelse Marker .)
    PRIVATE         reduce using rule 19 (statement -> ifthenelse Marker .)
    ARRAY           reduce using rule 19 (statement -> ifthenelse Marker .)
    RETURN          reduce using rule 19 (statement -> ifthenelse Marker .)
    IDENTIFIER      reduce using rule 19 (statement -> ifthenelse Marker .)
    WHILE           reduce using rule 19 (statement -> ifthenelse Marker .)
    FOR             reduce using rule 19 (statement -> ifthenelse Marker .)
    PRINT           reduce using rule 19 (statement -> ifthenelse Marker .)
    SUB             reduce using rule 19 (statement -> ifthenelse Marker .)
    LAST            reduce using rule 19 (statement -> ifthenelse Marker .)
    NEXT            reduce using rule 19 (statement -> ifthenelse Marker .)
    IF              reduce using rule 19 (statement -> ifthenelse Marker .)
    USE             reduce using rule 19 (statement -> ifthenelse Marker .)
    SWITCH          reduce using rule 19 (statement -> ifthenelse Marker .)
    $end            reduce using rule 19 (statement -> ifthenelse Marker .)
    BLOCK_ENDS      reduce using rule 19 (statement -> ifthenelse Marker .)


state 79

    (54) forStatement -> FOR OPEN_PARANTHESIS . expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 144
    empty                          shift and go to state 53

state 80

    (7) statement -> assignment Marker .

    VARIABLE        reduce using rule 7 (statement -> assignment Marker .)
    LOCAL           reduce using rule 7 (statement -> assignment Marker .)
    PRIVATE         reduce using rule 7 (statement -> assignment Marker .)
    ARRAY           reduce using rule 7 (statement -> assignment Marker .)
    RETURN          reduce using rule 7 (statement -> assignment Marker .)
    IDENTIFIER      reduce using rule 7 (statement -> assignment Marker .)
    WHILE           reduce using rule 7 (statement -> assignment Marker .)
    FOR             reduce using rule 7 (statement -> assignment Marker .)
    PRINT           reduce using rule 7 (statement -> assignment Marker .)
    SUB             reduce using rule 7 (statement -> assignment Marker .)
    LAST            reduce using rule 7 (statement -> assignment Marker .)
    NEXT            reduce using rule 7 (statement -> assignment Marker .)
    IF              reduce using rule 7 (statement -> assignment Marker .)
    USE             reduce using rule 7 (statement -> assignment Marker .)
    SWITCH          reduce using rule 7 (statement -> assignment Marker .)
    $end            reduce using rule 7 (statement -> assignment Marker .)
    BLOCK_ENDS      reduce using rule 7 (statement -> assignment Marker .)


state 81

    (12) statement -> whileStatement Marker .

    VARIABLE        reduce using rule 12 (statement -> whileStatement Marker .)
    LOCAL           reduce using rule 12 (statement -> whileStatement Marker .)
    PRIVATE         reduce using rule 12 (statement -> whileStatement Marker .)
    ARRAY           reduce using rule 12 (statement -> whileStatement Marker .)
    RETURN          reduce using rule 12 (statement -> whileStatement Marker .)
    IDENTIFIER      reduce using rule 12 (statement -> whileStatement Marker .)
    WHILE           reduce using rule 12 (statement -> whileStatement Marker .)
    FOR             reduce using rule 12 (statement -> whileStatement Marker .)
    PRINT           reduce using rule 12 (statement -> whileStatement Marker .)
    SUB             reduce using rule 12 (statement -> whileStatement Marker .)
    LAST            reduce using rule 12 (statement -> whileStatement Marker .)
    NEXT            reduce using rule 12 (statement -> whileStatement Marker .)
    IF              reduce using rule 12 (statement -> whileStatement Marker .)
    USE             reduce using rule 12 (statement -> whileStatement Marker .)
    SWITCH          reduce using rule 12 (statement -> whileStatement Marker .)
    $end            reduce using rule 12 (statement -> whileStatement Marker .)
    BLOCK_ENDS      reduce using rule 12 (statement -> whileStatement Marker .)


state 82

    (9) statement -> array_assignment Marker .

    VARIABLE        reduce using rule 9 (statement -> array_assignment Marker .)
    LOCAL           reduce using rule 9 (statement -> array_assignment Marker .)
    PRIVATE         reduce using rule 9 (statement -> array_assignment Marker .)
    ARRAY           reduce using rule 9 (statement -> array_assignment Marker .)
    RETURN          reduce using rule 9 (statement -> array_assignment Marker .)
    IDENTIFIER      reduce using rule 9 (statement -> array_assignment Marker .)
    WHILE           reduce using rule 9 (statement -> array_assignment Marker .)
    FOR             reduce using rule 9 (statement -> array_assignment Marker .)
    PRINT           reduce using rule 9 (statement -> array_assignment Marker .)
    SUB             reduce using rule 9 (statement -> array_assignment Marker .)
    LAST            reduce using rule 9 (statement -> array_assignment Marker .)
    NEXT            reduce using rule 9 (statement -> array_assignment Marker .)
    IF              reduce using rule 9 (statement -> array_assignment Marker .)
    USE             reduce using rule 9 (statement -> array_assignment Marker .)
    SWITCH          reduce using rule 9 (statement -> array_assignment Marker .)
    $end            reduce using rule 9 (statement -> array_assignment Marker .)
    BLOCK_ENDS      reduce using rule 9 (statement -> array_assignment Marker .)


state 83

    (11) statement -> functionCall Marker . SEMICOLON

    SEMICOLON       shift and go to state 145


state 84

    (8) statement -> declaration Marker .

    VARIABLE        reduce using rule 8 (statement -> declaration Marker .)
    LOCAL           reduce using rule 8 (statement -> declaration Marker .)
    PRIVATE         reduce using rule 8 (statement -> declaration Marker .)
    ARRAY           reduce using rule 8 (statement -> declaration Marker .)
    RETURN          reduce using rule 8 (statement -> declaration Marker .)
    IDENTIFIER      reduce using rule 8 (statement -> declaration Marker .)
    WHILE           reduce using rule 8 (statement -> declaration Marker .)
    FOR             reduce using rule 8 (statement -> declaration Marker .)
    PRINT           reduce using rule 8 (statement -> declaration Marker .)
    SUB             reduce using rule 8 (statement -> declaration Marker .)
    LAST            reduce using rule 8 (statement -> declaration Marker .)
    NEXT            reduce using rule 8 (statement -> declaration Marker .)
    IF              reduce using rule 8 (statement -> declaration Marker .)
    USE             reduce using rule 8 (statement -> declaration Marker .)
    SWITCH          reduce using rule 8 (statement -> declaration Marker .)
    $end            reduce using rule 8 (statement -> declaration Marker .)
    BLOCK_ENDS      reduce using rule 8 (statement -> declaration Marker .)


state 85

    (42) declaration -> VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 146


state 86

    (41) assignment -> VARIABLE ADV_ASSIGNMENT_OP . expression SEMICOLON
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 147
    empty                          shift and go to state 53

state 87

    (45) decList -> COMMA . VARIABLE decList

    VARIABLE        shift and go to state 148


state 88

    (38) assignment -> VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 149
    empty                          shift and go to state 53

state 89

    (46) decList -> empty .

    SEMICOLON       reduce using rule 46 (decList -> empty .)


state 90

    (10) statement -> returnStatement Marker .

    VARIABLE        reduce using rule 10 (statement -> returnStatement Marker .)
    LOCAL           reduce using rule 10 (statement -> returnStatement Marker .)
    PRIVATE         reduce using rule 10 (statement -> returnStatement Marker .)
    ARRAY           reduce using rule 10 (statement -> returnStatement Marker .)
    RETURN          reduce using rule 10 (statement -> returnStatement Marker .)
    IDENTIFIER      reduce using rule 10 (statement -> returnStatement Marker .)
    WHILE           reduce using rule 10 (statement -> returnStatement Marker .)
    FOR             reduce using rule 10 (statement -> returnStatement Marker .)
    PRINT           reduce using rule 10 (statement -> returnStatement Marker .)
    SUB             reduce using rule 10 (statement -> returnStatement Marker .)
    LAST            reduce using rule 10 (statement -> returnStatement Marker .)
    NEXT            reduce using rule 10 (statement -> returnStatement Marker .)
    IF              reduce using rule 10 (statement -> returnStatement Marker .)
    USE             reduce using rule 10 (statement -> returnStatement Marker .)
    SWITCH          reduce using rule 10 (statement -> returnStatement Marker .)
    $end            reduce using rule 10 (statement -> returnStatement Marker .)
    BLOCK_ENDS      reduce using rule 10 (statement -> returnStatement Marker .)


state 91

    (39) assignment -> LOCAL VARIABLE . ASSIGNMENT_OP expression SEMICOLON
    (44) declaration -> LOCAL VARIABLE . decList SEMICOLON
    (45) decList -> . COMMA VARIABLE decList
    (46) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 151
    COMMA           shift and go to state 87
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 89
    decList                        shift and go to state 150

state 92

    (27) ifthen -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 152
    empty                          shift and go to state 53

state 93

    (22) useStatement -> USE IDENTIFIER SEMICOLON .

    VARIABLE        reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LOCAL           reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    ARRAY           reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SUB             reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LAST            reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NEXT            reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    USE             reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    $end            reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BLOCK_ENDS      reduce using rule 22 (useStatement -> USE IDENTIFIER SEMICOLON .)


state 94

    (67) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS . expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 153
    empty                          shift and go to state 53

state 95

    (3) block -> BLOCK_BEGIN statements BLOCK_ENDS .

    ELSE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    VARIABLE        reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LOCAL           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRIVATE         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ARRAY           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    RETURN          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    WHILE           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    FOR             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRINT           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SUB             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LAST            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NEXT            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IF              reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    USE             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SWITCH          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    $end            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    CASE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)


state 96

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerwhile block
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 154
    empty                          shift and go to state 53

state 97

    (35) printStatement -> PRINT OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS SEMICOLON
    (65) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 155
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 98

    (71) expression -> MINUS_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 71 (expression -> MINUS_OP expression .)
    OR_STR_OP       reduce using rule 71 (expression -> MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 71 (expression -> MINUS_OP expression .)
    AND_STR_OP      reduce using rule 71 (expression -> MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 71 (expression -> MINUS_OP expression .)
    COMPARE_OP      reduce using rule 71 (expression -> MINUS_OP expression .)
    BIT_OR          reduce using rule 71 (expression -> MINUS_OP expression .)
    BIT_XOR         reduce using rule 71 (expression -> MINUS_OP expression .)
    BIT_AND         reduce using rule 71 (expression -> MINUS_OP expression .)
    AND_OP          reduce using rule 71 (expression -> MINUS_OP expression .)
    OR_OP           reduce using rule 71 (expression -> MINUS_OP expression .)
    EQUALS_OP       reduce using rule 71 (expression -> MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 71 (expression -> MINUS_OP expression .)
    GREATER_OP      reduce using rule 71 (expression -> MINUS_OP expression .)
    LESS_OP         reduce using rule 71 (expression -> MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 71 (expression -> MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 71 (expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 71 (expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 71 (expression -> MINUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 71 (expression -> MINUS_OP expression .)
    DIVISION_OP     reduce using rule 71 (expression -> MINUS_OP expression .)
    MODULUS_OP      reduce using rule 71 (expression -> MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 71 (expression -> MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 71 (expression -> MINUS_OP expression .)
    CONCATENATE     reduce using rule 71 (expression -> MINUS_OP expression .)
    REP_OP          reduce using rule 71 (expression -> MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 71 (expression -> MINUS_OP expression .)
    RANGE_OP        reduce using rule 71 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 71 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 71 (expression -> MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 71 (expression -> MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 71 (expression -> MINUS_OP expression .)
    COMMA           reduce using rule 71 (expression -> MINUS_OP expression .)
    EXPONENT_OP     shift and go to state 108

  ! EXPONENT_OP     [ reduce using rule 71 (expression -> MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]
  ! SEARCH_MODIFY   [ shift and go to state 103 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 132 ]


state 99

    (73) expression -> NOT_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 73 (expression -> NOT_OP expression .)
    OR_STR_OP       reduce using rule 73 (expression -> NOT_OP expression .)
    XOR_STR_OP      reduce using rule 73 (expression -> NOT_OP expression .)
    AND_STR_OP      reduce using rule 73 (expression -> NOT_OP expression .)
    NOT_STR_OP      reduce using rule 73 (expression -> NOT_OP expression .)
    COMPARE_OP      reduce using rule 73 (expression -> NOT_OP expression .)
    BIT_OR          reduce using rule 73 (expression -> NOT_OP expression .)
    BIT_XOR         reduce using rule 73 (expression -> NOT_OP expression .)
    BIT_AND         reduce using rule 73 (expression -> NOT_OP expression .)
    AND_OP          reduce using rule 73 (expression -> NOT_OP expression .)
    OR_OP           reduce using rule 73 (expression -> NOT_OP expression .)
    EQUALS_OP       reduce using rule 73 (expression -> NOT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 73 (expression -> NOT_OP expression .)
    GREATER_OP      reduce using rule 73 (expression -> NOT_OP expression .)
    LESS_OP         reduce using rule 73 (expression -> NOT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 73 (expression -> NOT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 73 (expression -> NOT_OP expression .)
    PLUS_OP         reduce using rule 73 (expression -> NOT_OP expression .)
    MINUS_OP        reduce using rule 73 (expression -> NOT_OP expression .)
    MULTIPLICATION_OP reduce using rule 73 (expression -> NOT_OP expression .)
    DIVISION_OP     reduce using rule 73 (expression -> NOT_OP expression .)
    MODULUS_OP      reduce using rule 73 (expression -> NOT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 73 (expression -> NOT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 73 (expression -> NOT_OP expression .)
    CONCATENATE     reduce using rule 73 (expression -> NOT_OP expression .)
    REP_OP          reduce using rule 73 (expression -> NOT_OP expression .)
    ASSOCIATE_OP    reduce using rule 73 (expression -> NOT_OP expression .)
    RANGE_OP        reduce using rule 73 (expression -> NOT_OP expression .)
    SEARCH_MODIFY   reduce using rule 73 (expression -> NOT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 73 (expression -> NOT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 73 (expression -> NOT_OP expression .)
    BLOCK_BEGIN     reduce using rule 73 (expression -> NOT_OP expression .)
    COMMA           reduce using rule 73 (expression -> NOT_OP expression .)
    EXPONENT_OP     shift and go to state 108

  ! EXPONENT_OP     [ reduce using rule 73 (expression -> NOT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]
  ! SEARCH_MODIFY   [ shift and go to state 103 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 132 ]


state 100

    (72) expression -> BIT_FLIP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 72 (expression -> BIT_FLIP expression .)
    OR_STR_OP       reduce using rule 72 (expression -> BIT_FLIP expression .)
    XOR_STR_OP      reduce using rule 72 (expression -> BIT_FLIP expression .)
    AND_STR_OP      reduce using rule 72 (expression -> BIT_FLIP expression .)
    NOT_STR_OP      reduce using rule 72 (expression -> BIT_FLIP expression .)
    COMPARE_OP      reduce using rule 72 (expression -> BIT_FLIP expression .)
    BIT_OR          reduce using rule 72 (expression -> BIT_FLIP expression .)
    BIT_XOR         reduce using rule 72 (expression -> BIT_FLIP expression .)
    BIT_AND         reduce using rule 72 (expression -> BIT_FLIP expression .)
    AND_OP          reduce using rule 72 (expression -> BIT_FLIP expression .)
    OR_OP           reduce using rule 72 (expression -> BIT_FLIP expression .)
    EQUALS_OP       reduce using rule 72 (expression -> BIT_FLIP expression .)
    NOT_EQUALS_OP   reduce using rule 72 (expression -> BIT_FLIP expression .)
    GREATER_OP      reduce using rule 72 (expression -> BIT_FLIP expression .)
    LESS_OP         reduce using rule 72 (expression -> BIT_FLIP expression .)
    GREATER_EQUAL_OP reduce using rule 72 (expression -> BIT_FLIP expression .)
    LESS_EQUAL_OP   reduce using rule 72 (expression -> BIT_FLIP expression .)
    PLUS_OP         reduce using rule 72 (expression -> BIT_FLIP expression .)
    MINUS_OP        reduce using rule 72 (expression -> BIT_FLIP expression .)
    MULTIPLICATION_OP reduce using rule 72 (expression -> BIT_FLIP expression .)
    DIVISION_OP     reduce using rule 72 (expression -> BIT_FLIP expression .)
    MODULUS_OP      reduce using rule 72 (expression -> BIT_FLIP expression .)
    BIT_RIGHT_SHIFT reduce using rule 72 (expression -> BIT_FLIP expression .)
    BIT_LEFT_SHIFT  reduce using rule 72 (expression -> BIT_FLIP expression .)
    CONCATENATE     reduce using rule 72 (expression -> BIT_FLIP expression .)
    REP_OP          reduce using rule 72 (expression -> BIT_FLIP expression .)
    ASSOCIATE_OP    reduce using rule 72 (expression -> BIT_FLIP expression .)
    RANGE_OP        reduce using rule 72 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY   reduce using rule 72 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY_NEG reduce using rule 72 (expression -> BIT_FLIP expression .)
    CLOSE_PARANTHESIS reduce using rule 72 (expression -> BIT_FLIP expression .)
    BLOCK_BEGIN     reduce using rule 72 (expression -> BIT_FLIP expression .)
    COMMA           reduce using rule 72 (expression -> BIT_FLIP expression .)
    EXPONENT_OP     shift and go to state 108

  ! EXPONENT_OP     [ reduce using rule 72 (expression -> BIT_FLIP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]
  ! SEARCH_MODIFY   [ shift and go to state 103 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 132 ]


state 101

    (66) term -> ARRAY OPEN_BRACKET . NUMBER CLOSE_BRACKET

    NUMBER          shift and go to state 156


state 102

    (70) expression -> PLUS_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 70 (expression -> PLUS_OP expression .)
    OR_STR_OP       reduce using rule 70 (expression -> PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 70 (expression -> PLUS_OP expression .)
    AND_STR_OP      reduce using rule 70 (expression -> PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 70 (expression -> PLUS_OP expression .)
    COMPARE_OP      reduce using rule 70 (expression -> PLUS_OP expression .)
    BIT_OR          reduce using rule 70 (expression -> PLUS_OP expression .)
    BIT_XOR         reduce using rule 70 (expression -> PLUS_OP expression .)
    BIT_AND         reduce using rule 70 (expression -> PLUS_OP expression .)
    AND_OP          reduce using rule 70 (expression -> PLUS_OP expression .)
    OR_OP           reduce using rule 70 (expression -> PLUS_OP expression .)
    EQUALS_OP       reduce using rule 70 (expression -> PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 70 (expression -> PLUS_OP expression .)
    GREATER_OP      reduce using rule 70 (expression -> PLUS_OP expression .)
    LESS_OP         reduce using rule 70 (expression -> PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 70 (expression -> PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 70 (expression -> PLUS_OP expression .)
    PLUS_OP         reduce using rule 70 (expression -> PLUS_OP expression .)
    MINUS_OP        reduce using rule 70 (expression -> PLUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 70 (expression -> PLUS_OP expression .)
    DIVISION_OP     reduce using rule 70 (expression -> PLUS_OP expression .)
    MODULUS_OP      reduce using rule 70 (expression -> PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 70 (expression -> PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 70 (expression -> PLUS_OP expression .)
    CONCATENATE     reduce using rule 70 (expression -> PLUS_OP expression .)
    REP_OP          reduce using rule 70 (expression -> PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 70 (expression -> PLUS_OP expression .)
    RANGE_OP        reduce using rule 70 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 70 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 70 (expression -> PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 70 (expression -> PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 70 (expression -> PLUS_OP expression .)
    COMMA           reduce using rule 70 (expression -> PLUS_OP expression .)
    EXPONENT_OP     shift and go to state 108

  ! EXPONENT_OP     [ reduce using rule 70 (expression -> PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]
  ! SEARCH_MODIFY   [ shift and go to state 103 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 132 ]


state 103

    (105) expression -> expression SEARCH_MODIFY . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 157
    empty                          shift and go to state 53

state 104

    (91) expression -> expression LESS_EQUAL_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 158
    empty                          shift and go to state 53

state 105

    (94) expression -> expression MINUS_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 159
    empty                          shift and go to state 53

state 106

    (80) expression -> expression COMPARE_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 160
    empty                          shift and go to state 53

state 107

    (87) expression -> expression NOT_EQUALS_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 161
    empty                          shift and go to state 53

state 108

    (98) expression -> expression EXPONENT_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 162
    empty                          shift and go to state 53

state 109

    (79) expression -> expression NOT_STR_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 163
    empty                          shift and go to state 53

state 110

    (96) expression -> expression DIVISION_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 164
    empty                          shift and go to state 53

state 111

    (104) expression -> expression RANGE_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 165
    empty                          shift and go to state 53

state 112

    (82) expression -> expression BIT_XOR . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 166
    empty                          shift and go to state 53

state 113

    (86) expression -> expression EQUALS_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 167
    empty                          shift and go to state 53

state 114

    (36) printStatement -> PRINT expression SEMICOLON .

    VARIABLE        reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    LOCAL           reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    PRIVATE         reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    ARRAY           reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    RETURN          reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    WHILE           reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    FOR             reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    PRINT           reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    SUB             reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    LAST            reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    NEXT            reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    IF              reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    USE             reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    SWITCH          reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    $end            reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 36 (printStatement -> PRINT expression SEMICOLON .)


state 115

    (78) expression -> expression AND_STR_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 168
    empty                          shift and go to state 53

state 116

    (85) expression -> expression OR_OP . Marker expression
    (92) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 169
    empty                          shift and go to state 37

state 117

    (89) expression -> expression LESS_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 170
    empty                          shift and go to state 53

state 118

    (97) expression -> expression MODULUS_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 171
    empty                          shift and go to state 53

state 119

    (90) expression -> expression GREATER_EQUAL_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 172
    empty                          shift and go to state 53

state 120

    (77) expression -> expression XOR_STR_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 173
    empty                          shift and go to state 53

state 121

    (83) expression -> expression BIT_AND . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 174
    empty                          shift and go to state 53

state 122

    (95) expression -> expression MULTIPLICATION_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 175
    empty                          shift and go to state 53

state 123

    (103) expression -> expression ASSOCIATE_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 176
    empty                          shift and go to state 53

state 124

    (76) expression -> expression OR_STR_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 177
    empty                          shift and go to state 53

state 125

    (84) expression -> expression AND_OP . Marker expression
    (92) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 178
    empty                          shift and go to state 37

state 126

    (100) expression -> expression BIT_LEFT_SHIFT . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 179
    empty                          shift and go to state 53

state 127

    (102) expression -> expression REP_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 180
    empty                          shift and go to state 53

state 128

    (101) expression -> expression CONCATENATE . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 181
    empty                          shift and go to state 53

state 129

    (99) expression -> expression BIT_RIGHT_SHIFT . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 182
    empty                          shift and go to state 53

state 130

    (81) expression -> expression BIT_OR . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 183
    empty                          shift and go to state 53

state 131

    (93) expression -> expression PLUS_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 184
    empty                          shift and go to state 53

state 132

    (106) expression -> expression SEARCH_MODIFY_NEG . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 185
    empty                          shift and go to state 53

state 133

    (88) expression -> expression GREATER_OP . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 186
    empty                          shift and go to state 53

state 134

    (65) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 187
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 135

    (37) returnStatement -> RETURN expression SEMICOLON .

    VARIABLE        reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    LOCAL           reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    PRIVATE         reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    ARRAY           reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    SUB             reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    LAST            reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    NEXT            reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    USE             reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 37 (returnStatement -> RETURN expression SEMICOLON .)


state 136

    (33) functionStatement -> SUB IDENTIFIER Markerscope . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 188

state 137

    (34) Markerscope -> empty .

    BLOCK_BEGIN     reduce using rule 34 (Markerscope -> empty .)


state 138

    (23) switchStatement -> SWITCH expression BLOCK_BEGIN . caselist BLOCK_ENDS
    (24) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (25) caselist -> . ELSE block
    (26) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 189
    ELSE            shift and go to state 191
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 190
    empty                          shift and go to state 192

state 139

    (43) declaration -> PRIVATE VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 193


state 140

    (40) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 194
    empty                          shift and go to state 53

state 141

    (47) functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS shift and go to state 195


state 142

    (51) parameters -> empty .
    (74) expression -> empty .

  ! reduce/reduce conflict for CLOSE_PARANTHESIS resolved using rule 51 (parameters -> empty .)
    CLOSE_PARANTHESIS reduce using rule 51 (parameters -> empty .)
    COMMA           reduce using rule 74 (expression -> empty .)
    OR_STR_OP       reduce using rule 74 (expression -> empty .)
    XOR_STR_OP      reduce using rule 74 (expression -> empty .)
    AND_STR_OP      reduce using rule 74 (expression -> empty .)
    NOT_STR_OP      reduce using rule 74 (expression -> empty .)
    COMPARE_OP      reduce using rule 74 (expression -> empty .)
    BIT_OR          reduce using rule 74 (expression -> empty .)
    BIT_XOR         reduce using rule 74 (expression -> empty .)
    BIT_AND         reduce using rule 74 (expression -> empty .)
    AND_OP          reduce using rule 74 (expression -> empty .)
    OR_OP           reduce using rule 74 (expression -> empty .)
    EQUALS_OP       reduce using rule 74 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 74 (expression -> empty .)
    GREATER_OP      reduce using rule 74 (expression -> empty .)
    LESS_OP         reduce using rule 74 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 74 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 74 (expression -> empty .)
    PLUS_OP         reduce using rule 74 (expression -> empty .)
    MINUS_OP        reduce using rule 74 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 74 (expression -> empty .)
    DIVISION_OP     reduce using rule 74 (expression -> empty .)
    MODULUS_OP      reduce using rule 74 (expression -> empty .)
    EXPONENT_OP     reduce using rule 74 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 74 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 74 (expression -> empty .)
    CONCATENATE     reduce using rule 74 (expression -> empty .)
    REP_OP          reduce using rule 74 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 74 (expression -> empty .)
    RANGE_OP        reduce using rule 74 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 74 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 74 (expression -> empty .)

  ! CLOSE_PARANTHESIS [ reduce using rule 74 (expression -> empty .) ]


state 143

    (49) parameters -> expression . COMMA parameters
    (50) parameters -> expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    COMMA           shift and go to state 196
    CLOSE_PARANTHESIS reduce using rule 50 (parameters -> expression .)
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 144

    (54) forStatement -> FOR OPEN_PARANTHESIS expression . SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 197
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 145

    (11) statement -> functionCall Marker SEMICOLON .

    VARIABLE        reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    LOCAL           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    PRIVATE         reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    ARRAY           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    FOR             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    PRINT           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SUB             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    LAST            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    NEXT            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    IF              reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    USE             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SWITCH          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    $end            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BLOCK_ENDS      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)


state 146

    (42) declaration -> VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    IF              reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    USE             reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    $end            reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 42 (declaration -> VARIABLE decList SEMICOLON .)


state 147

    (41) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression . SEMICOLON
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 198
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 148

    (45) decList -> COMMA VARIABLE . decList
    (45) decList -> . COMMA VARIABLE decList
    (46) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 87
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 89
    decList                        shift and go to state 199

state 149

    (38) assignment -> VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 200
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 150

    (44) declaration -> LOCAL VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 201


state 151

    (39) assignment -> LOCAL VARIABLE ASSIGNMENT_OP . expression SEMICOLON
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 202
    empty                          shift and go to state 53

state 152

    (27) ifthen -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif Marker block
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 203
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 153

    (67) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression . arrayList CLOSE_PARANTHESIS SEMICOLON
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression
    (68) arrayList -> . COMMA expression arrayList
    (69) arrayList -> . COMMA expression

    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132
    COMMA           shift and go to state 204

    arrayList                      shift and go to state 205

state 154

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerwhile block
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 206
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 155

    (35) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . SEMICOLON
    (65) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 207
    OR_STR_OP       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)

  ! SEMICOLON       [ reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .) ]


state 156

    (66) term -> ARRAY OPEN_BRACKET NUMBER . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 208


state 157

    (105) expression -> expression SEARCH_MODIFY expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    OR_STR_OP       reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    XOR_STR_OP      reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    AND_STR_OP      reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    NOT_STR_OP      reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    COMPARE_OP      reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    BIT_OR          reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    BIT_XOR         reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    BIT_AND         reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    AND_OP          reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    OR_OP           reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    EQUALS_OP       reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    NOT_EQUALS_OP   reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_OP      reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    LESS_OP         reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_EQUAL_OP reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    LESS_EQUAL_OP   reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    PLUS_OP         reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    MINUS_OP        reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    MULTIPLICATION_OP reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    DIVISION_OP     reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    MODULUS_OP      reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    BIT_RIGHT_SHIFT reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    BIT_LEFT_SHIFT  reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    CONCATENATE     reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    REP_OP          reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    ASSOCIATE_OP    reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    RANGE_OP        reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY   reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY_NEG reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    CLOSE_PARANTHESIS reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    BLOCK_BEGIN     reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    COMMA           reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .)
    EXPONENT_OP     shift and go to state 108

  ! EXPONENT_OP     [ reduce using rule 105 (expression -> expression SEARCH_MODIFY expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]
  ! SEARCH_MODIFY   [ shift and go to state 103 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 132 ]


state 158

    (91) expression -> expression LESS_EQUAL_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    OR_STR_OP       reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_OR          reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_AND         reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    AND_OP          reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    OR_OP           reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_OP         reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    COMMA           reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! PLUS_OP         [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 91 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 159

    (94) expression -> expression MINUS_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 94 (expression -> expression MINUS_OP expression .)
    OR_STR_OP       reduce using rule 94 (expression -> expression MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 94 (expression -> expression MINUS_OP expression .)
    AND_STR_OP      reduce using rule 94 (expression -> expression MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 94 (expression -> expression MINUS_OP expression .)
    COMPARE_OP      reduce using rule 94 (expression -> expression MINUS_OP expression .)
    BIT_OR          reduce using rule 94 (expression -> expression MINUS_OP expression .)
    BIT_XOR         reduce using rule 94 (expression -> expression MINUS_OP expression .)
    BIT_AND         reduce using rule 94 (expression -> expression MINUS_OP expression .)
    AND_OP          reduce using rule 94 (expression -> expression MINUS_OP expression .)
    OR_OP           reduce using rule 94 (expression -> expression MINUS_OP expression .)
    EQUALS_OP       reduce using rule 94 (expression -> expression MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 94 (expression -> expression MINUS_OP expression .)
    GREATER_OP      reduce using rule 94 (expression -> expression MINUS_OP expression .)
    LESS_OP         reduce using rule 94 (expression -> expression MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 94 (expression -> expression MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 94 (expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 94 (expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 94 (expression -> expression MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 94 (expression -> expression MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 94 (expression -> expression MINUS_OP expression .)
    CONCATENATE     reduce using rule 94 (expression -> expression MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 94 (expression -> expression MINUS_OP expression .)
    RANGE_OP        reduce using rule 94 (expression -> expression MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 94 (expression -> expression MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 94 (expression -> expression MINUS_OP expression .)
    COMMA           reduce using rule 94 (expression -> expression MINUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! MULTIPLICATION_OP [ reduce using rule 94 (expression -> expression MINUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 94 (expression -> expression MINUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 94 (expression -> expression MINUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 94 (expression -> expression MINUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 94 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 94 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 94 (expression -> expression MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 160

    (80) expression -> expression COMPARE_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    OR_STR_OP       reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    XOR_STR_OP      reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    AND_STR_OP      reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    NOT_STR_OP      reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    COMPARE_OP      reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    BIT_OR          reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    BIT_XOR         reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    BIT_AND         reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    AND_OP          reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    OR_OP           reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    EQUALS_OP       reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    NOT_EQUALS_OP   reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    ASSOCIATE_OP    reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    RANGE_OP        reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    BLOCK_BEGIN     reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    COMMA           reduce using rule 80 (expression -> expression COMPARE_OP expression .)
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! GREATER_OP      [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! REP_OP          [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 80 (expression -> expression COMPARE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 161

    (87) expression -> expression NOT_EQUALS_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    OR_STR_OP       reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_OR          reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_XOR         reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_AND         reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    AND_OP          reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    OR_OP           reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    RANGE_OP        reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    COMMA           reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .)
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! GREATER_OP      [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 87 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 162

    (98) expression -> expression EXPONENT_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    OR_STR_OP       reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    XOR_STR_OP      reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    AND_STR_OP      reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    NOT_STR_OP      reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    COMPARE_OP      reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    BIT_OR          reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    BIT_XOR         reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    BIT_AND         reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    AND_OP          reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    OR_OP           reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    EQUALS_OP       reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    GREATER_OP      reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    LESS_OP         reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    PLUS_OP         reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    MINUS_OP        reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    MULTIPLICATION_OP reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    DIVISION_OP     reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    MODULUS_OP      reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    CONCATENATE     reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    REP_OP          reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    ASSOCIATE_OP    reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    RANGE_OP        reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY   reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    BLOCK_BEGIN     reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    COMMA           reduce using rule 98 (expression -> expression EXPONENT_OP expression .)
    EXPONENT_OP     shift and go to state 108

  ! EXPONENT_OP     [ reduce using rule 98 (expression -> expression EXPONENT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]
  ! SEARCH_MODIFY   [ shift and go to state 103 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 132 ]


state 163

    (79) expression -> expression NOT_STR_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 79 (expression -> expression NOT_STR_OP expression .)
    OR_STR_OP       reduce using rule 79 (expression -> expression NOT_STR_OP expression .)
    XOR_STR_OP      reduce using rule 79 (expression -> expression NOT_STR_OP expression .)
    AND_STR_OP      reduce using rule 79 (expression -> expression NOT_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 79 (expression -> expression NOT_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 79 (expression -> expression NOT_STR_OP expression .)
    COMMA           reduce using rule 79 (expression -> expression NOT_STR_OP expression .)
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! NOT_STR_OP      [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 79 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]


state 164

    (96) expression -> expression DIVISION_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    OR_STR_OP       reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    XOR_STR_OP      reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    AND_STR_OP      reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    NOT_STR_OP      reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    COMPARE_OP      reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    BIT_OR          reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    BIT_XOR         reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    BIT_AND         reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    AND_OP          reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    OR_OP           reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    EQUALS_OP       reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    GREATER_OP      reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    LESS_OP         reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    PLUS_OP         reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    MINUS_OP        reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    MULTIPLICATION_OP reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    DIVISION_OP     reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    MODULUS_OP      reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    CONCATENATE     reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    REP_OP          reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    ASSOCIATE_OP    reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    RANGE_OP        reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    BLOCK_BEGIN     reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    COMMA           reduce using rule 96 (expression -> expression DIVISION_OP expression .)
    EXPONENT_OP     shift and go to state 108
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! EXPONENT_OP     [ reduce using rule 96 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 96 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 96 (expression -> expression DIVISION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 165

    (104) expression -> expression RANGE_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 104 (expression -> expression RANGE_OP expression .)
    OR_STR_OP       reduce using rule 104 (expression -> expression RANGE_OP expression .)
    XOR_STR_OP      reduce using rule 104 (expression -> expression RANGE_OP expression .)
    AND_STR_OP      reduce using rule 104 (expression -> expression RANGE_OP expression .)
    NOT_STR_OP      reduce using rule 104 (expression -> expression RANGE_OP expression .)
    ASSOCIATE_OP    reduce using rule 104 (expression -> expression RANGE_OP expression .)
    RANGE_OP        reduce using rule 104 (expression -> expression RANGE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 104 (expression -> expression RANGE_OP expression .)
    BLOCK_BEGIN     reduce using rule 104 (expression -> expression RANGE_OP expression .)
    COMMA           reduce using rule 104 (expression -> expression RANGE_OP expression .)
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! COMPARE_OP      [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! AND_OP          [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! OR_OP           [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! REP_OP          [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 104 (expression -> expression RANGE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 166

    (82) expression -> expression BIT_XOR expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 82 (expression -> expression BIT_XOR expression .)
    OR_STR_OP       reduce using rule 82 (expression -> expression BIT_XOR expression .)
    XOR_STR_OP      reduce using rule 82 (expression -> expression BIT_XOR expression .)
    AND_STR_OP      reduce using rule 82 (expression -> expression BIT_XOR expression .)
    NOT_STR_OP      reduce using rule 82 (expression -> expression BIT_XOR expression .)
    BIT_OR          reduce using rule 82 (expression -> expression BIT_XOR expression .)
    BIT_XOR         reduce using rule 82 (expression -> expression BIT_XOR expression .)
    AND_OP          reduce using rule 82 (expression -> expression BIT_XOR expression .)
    OR_OP           reduce using rule 82 (expression -> expression BIT_XOR expression .)
    ASSOCIATE_OP    reduce using rule 82 (expression -> expression BIT_XOR expression .)
    RANGE_OP        reduce using rule 82 (expression -> expression BIT_XOR expression .)
    CLOSE_PARANTHESIS reduce using rule 82 (expression -> expression BIT_XOR expression .)
    BLOCK_BEGIN     reduce using rule 82 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 82 (expression -> expression BIT_XOR expression .)
    COMPARE_OP      shift and go to state 106
    BIT_AND         shift and go to state 121
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! COMPARE_OP      [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! EQUALS_OP       [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_OP      [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! LESS_OP         [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! PLUS_OP         [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! MINUS_OP        [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! DIVISION_OP     [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! MODULUS_OP      [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! CONCATENATE     [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! REP_OP          [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 82 (expression -> expression BIT_XOR expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 167

    (86) expression -> expression EQUALS_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    OR_STR_OP       reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    BIT_OR          reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    BIT_XOR         reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    BIT_AND         reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    AND_OP          reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    OR_OP           reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    RANGE_OP        reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    COMMA           reduce using rule 86 (expression -> expression EQUALS_OP expression .)
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! GREATER_OP      [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 86 (expression -> expression EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 168

    (78) expression -> expression AND_STR_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 78 (expression -> expression AND_STR_OP expression .)
    OR_STR_OP       reduce using rule 78 (expression -> expression AND_STR_OP expression .)
    XOR_STR_OP      reduce using rule 78 (expression -> expression AND_STR_OP expression .)
    AND_STR_OP      reduce using rule 78 (expression -> expression AND_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 78 (expression -> expression AND_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 78 (expression -> expression AND_STR_OP expression .)
    COMMA           reduce using rule 78 (expression -> expression AND_STR_OP expression .)
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! NOT_STR_OP      [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 78 (expression -> expression AND_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]


state 169

    (85) expression -> expression OR_OP Marker . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 209
    empty                          shift and go to state 53

state 170

    (89) expression -> expression LESS_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 89 (expression -> expression LESS_OP expression .)
    OR_STR_OP       reduce using rule 89 (expression -> expression LESS_OP expression .)
    XOR_STR_OP      reduce using rule 89 (expression -> expression LESS_OP expression .)
    AND_STR_OP      reduce using rule 89 (expression -> expression LESS_OP expression .)
    NOT_STR_OP      reduce using rule 89 (expression -> expression LESS_OP expression .)
    COMPARE_OP      reduce using rule 89 (expression -> expression LESS_OP expression .)
    BIT_OR          reduce using rule 89 (expression -> expression LESS_OP expression .)
    BIT_XOR         reduce using rule 89 (expression -> expression LESS_OP expression .)
    BIT_AND         reduce using rule 89 (expression -> expression LESS_OP expression .)
    AND_OP          reduce using rule 89 (expression -> expression LESS_OP expression .)
    OR_OP           reduce using rule 89 (expression -> expression LESS_OP expression .)
    EQUALS_OP       reduce using rule 89 (expression -> expression LESS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 89 (expression -> expression LESS_OP expression .)
    GREATER_OP      reduce using rule 89 (expression -> expression LESS_OP expression .)
    LESS_OP         reduce using rule 89 (expression -> expression LESS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 89 (expression -> expression LESS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 89 (expression -> expression LESS_OP expression .)
    ASSOCIATE_OP    reduce using rule 89 (expression -> expression LESS_OP expression .)
    RANGE_OP        reduce using rule 89 (expression -> expression LESS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 89 (expression -> expression LESS_OP expression .)
    BLOCK_BEGIN     reduce using rule 89 (expression -> expression LESS_OP expression .)
    COMMA           reduce using rule 89 (expression -> expression LESS_OP expression .)
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! PLUS_OP         [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! REP_OP          [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 89 (expression -> expression LESS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 171

    (97) expression -> expression MODULUS_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    OR_STR_OP       reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    XOR_STR_OP      reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    AND_STR_OP      reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    NOT_STR_OP      reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    COMPARE_OP      reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    BIT_OR          reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    BIT_XOR         reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    BIT_AND         reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    AND_OP          reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    OR_OP           reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    EQUALS_OP       reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    GREATER_OP      reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    LESS_OP         reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    PLUS_OP         reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    MINUS_OP        reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    DIVISION_OP     reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    MODULUS_OP      reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    CONCATENATE     reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    REP_OP          reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    RANGE_OP        reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    COMMA           reduce using rule 97 (expression -> expression MODULUS_OP expression .)
    EXPONENT_OP     shift and go to state 108
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! EXPONENT_OP     [ reduce using rule 97 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 97 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 97 (expression -> expression MODULUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 172

    (90) expression -> expression GREATER_EQUAL_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    OR_STR_OP       reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_OR          reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_AND         reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_OP          reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    OR_OP           reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_OP         reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    COMMA           reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! PLUS_OP         [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 90 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 173

    (77) expression -> expression XOR_STR_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 77 (expression -> expression XOR_STR_OP expression .)
    OR_STR_OP       reduce using rule 77 (expression -> expression XOR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 77 (expression -> expression XOR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 77 (expression -> expression XOR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 77 (expression -> expression XOR_STR_OP expression .)
    COMMA           reduce using rule 77 (expression -> expression XOR_STR_OP expression .)
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! AND_STR_OP      [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 77 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]


state 174

    (83) expression -> expression BIT_AND expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 83 (expression -> expression BIT_AND expression .)
    OR_STR_OP       reduce using rule 83 (expression -> expression BIT_AND expression .)
    XOR_STR_OP      reduce using rule 83 (expression -> expression BIT_AND expression .)
    AND_STR_OP      reduce using rule 83 (expression -> expression BIT_AND expression .)
    NOT_STR_OP      reduce using rule 83 (expression -> expression BIT_AND expression .)
    BIT_OR          reduce using rule 83 (expression -> expression BIT_AND expression .)
    BIT_XOR         reduce using rule 83 (expression -> expression BIT_AND expression .)
    BIT_AND         reduce using rule 83 (expression -> expression BIT_AND expression .)
    AND_OP          reduce using rule 83 (expression -> expression BIT_AND expression .)
    OR_OP           reduce using rule 83 (expression -> expression BIT_AND expression .)
    ASSOCIATE_OP    reduce using rule 83 (expression -> expression BIT_AND expression .)
    RANGE_OP        reduce using rule 83 (expression -> expression BIT_AND expression .)
    CLOSE_PARANTHESIS reduce using rule 83 (expression -> expression BIT_AND expression .)
    BLOCK_BEGIN     reduce using rule 83 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 83 (expression -> expression BIT_AND expression .)
    COMPARE_OP      shift and go to state 106
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! COMPARE_OP      [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! EQUALS_OP       [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! GREATER_OP      [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! LESS_OP         [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! PLUS_OP         [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! MINUS_OP        [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! DIVISION_OP     [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! MODULUS_OP      [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! EXPONENT_OP     [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! CONCATENATE     [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! REP_OP          [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 83 (expression -> expression BIT_AND expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 175

    (95) expression -> expression MULTIPLICATION_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    OR_STR_OP       reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    XOR_STR_OP      reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    AND_STR_OP      reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_STR_OP      reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    COMPARE_OP      reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_OR          reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_XOR         reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_AND         reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    AND_OP          reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    OR_OP           reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    EQUALS_OP       reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_OP      reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_OP         reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    PLUS_OP         reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    MINUS_OP        reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    MULTIPLICATION_OP reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    DIVISION_OP     reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    MODULUS_OP      reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    CONCATENATE     reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    REP_OP          reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    ASSOCIATE_OP    reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    RANGE_OP        reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    BLOCK_BEGIN     reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    COMMA           reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .)
    EXPONENT_OP     shift and go to state 108
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! EXPONENT_OP     [ reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 95 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 176

    (103) expression -> expression ASSOCIATE_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    OR_STR_OP       reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    XOR_STR_OP      reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    AND_STR_OP      reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    NOT_STR_OP      reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    ASSOCIATE_OP    reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    BLOCK_BEGIN     reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    COMMA           reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .)
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! COMPARE_OP      [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! AND_OP          [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_OP           [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! REP_OP          [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 103 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]


state 177

    (76) expression -> expression OR_STR_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 76 (expression -> expression OR_STR_OP expression .)
    OR_STR_OP       reduce using rule 76 (expression -> expression OR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 76 (expression -> expression OR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 76 (expression -> expression OR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 76 (expression -> expression OR_STR_OP expression .)
    COMMA           reduce using rule 76 (expression -> expression OR_STR_OP expression .)
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! AND_STR_OP      [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 76 (expression -> expression OR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]


state 178

    (84) expression -> expression AND_OP Marker . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 210
    empty                          shift and go to state 53

state 179

    (100) expression -> expression BIT_LEFT_SHIFT expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    OR_STR_OP       reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_STR_OP      reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMPARE_OP      reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_OR          reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_XOR         reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_AND         reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_OP          reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    OR_OP           reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    EQUALS_OP       reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_OP      reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_OP         reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    RANGE_OP        reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMMA           reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .)
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! PLUS_OP         [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 100 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 180

    (102) expression -> expression REP_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 102 (expression -> expression REP_OP expression .)
    OR_STR_OP       reduce using rule 102 (expression -> expression REP_OP expression .)
    XOR_STR_OP      reduce using rule 102 (expression -> expression REP_OP expression .)
    AND_STR_OP      reduce using rule 102 (expression -> expression REP_OP expression .)
    NOT_STR_OP      reduce using rule 102 (expression -> expression REP_OP expression .)
    COMPARE_OP      reduce using rule 102 (expression -> expression REP_OP expression .)
    BIT_OR          reduce using rule 102 (expression -> expression REP_OP expression .)
    BIT_XOR         reduce using rule 102 (expression -> expression REP_OP expression .)
    BIT_AND         reduce using rule 102 (expression -> expression REP_OP expression .)
    AND_OP          reduce using rule 102 (expression -> expression REP_OP expression .)
    OR_OP           reduce using rule 102 (expression -> expression REP_OP expression .)
    EQUALS_OP       reduce using rule 102 (expression -> expression REP_OP expression .)
    NOT_EQUALS_OP   reduce using rule 102 (expression -> expression REP_OP expression .)
    GREATER_OP      reduce using rule 102 (expression -> expression REP_OP expression .)
    LESS_OP         reduce using rule 102 (expression -> expression REP_OP expression .)
    GREATER_EQUAL_OP reduce using rule 102 (expression -> expression REP_OP expression .)
    LESS_EQUAL_OP   reduce using rule 102 (expression -> expression REP_OP expression .)
    PLUS_OP         reduce using rule 102 (expression -> expression REP_OP expression .)
    MINUS_OP        reduce using rule 102 (expression -> expression REP_OP expression .)
    MULTIPLICATION_OP reduce using rule 102 (expression -> expression REP_OP expression .)
    DIVISION_OP     reduce using rule 102 (expression -> expression REP_OP expression .)
    MODULUS_OP      reduce using rule 102 (expression -> expression REP_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 102 (expression -> expression REP_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 102 (expression -> expression REP_OP expression .)
    CONCATENATE     reduce using rule 102 (expression -> expression REP_OP expression .)
    REP_OP          reduce using rule 102 (expression -> expression REP_OP expression .)
    ASSOCIATE_OP    reduce using rule 102 (expression -> expression REP_OP expression .)
    RANGE_OP        reduce using rule 102 (expression -> expression REP_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 102 (expression -> expression REP_OP expression .)
    BLOCK_BEGIN     reduce using rule 102 (expression -> expression REP_OP expression .)
    COMMA           reduce using rule 102 (expression -> expression REP_OP expression .)
    EXPONENT_OP     shift and go to state 108
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! EXPONENT_OP     [ reduce using rule 102 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 102 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 102 (expression -> expression REP_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 181

    (101) expression -> expression CONCATENATE expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 101 (expression -> expression CONCATENATE expression .)
    OR_STR_OP       reduce using rule 101 (expression -> expression CONCATENATE expression .)
    XOR_STR_OP      reduce using rule 101 (expression -> expression CONCATENATE expression .)
    AND_STR_OP      reduce using rule 101 (expression -> expression CONCATENATE expression .)
    NOT_STR_OP      reduce using rule 101 (expression -> expression CONCATENATE expression .)
    COMPARE_OP      reduce using rule 101 (expression -> expression CONCATENATE expression .)
    BIT_OR          reduce using rule 101 (expression -> expression CONCATENATE expression .)
    BIT_XOR         reduce using rule 101 (expression -> expression CONCATENATE expression .)
    BIT_AND         reduce using rule 101 (expression -> expression CONCATENATE expression .)
    AND_OP          reduce using rule 101 (expression -> expression CONCATENATE expression .)
    OR_OP           reduce using rule 101 (expression -> expression CONCATENATE expression .)
    EQUALS_OP       reduce using rule 101 (expression -> expression CONCATENATE expression .)
    NOT_EQUALS_OP   reduce using rule 101 (expression -> expression CONCATENATE expression .)
    GREATER_OP      reduce using rule 101 (expression -> expression CONCATENATE expression .)
    LESS_OP         reduce using rule 101 (expression -> expression CONCATENATE expression .)
    GREATER_EQUAL_OP reduce using rule 101 (expression -> expression CONCATENATE expression .)
    LESS_EQUAL_OP   reduce using rule 101 (expression -> expression CONCATENATE expression .)
    PLUS_OP         reduce using rule 101 (expression -> expression CONCATENATE expression .)
    MINUS_OP        reduce using rule 101 (expression -> expression CONCATENATE expression .)
    BIT_RIGHT_SHIFT reduce using rule 101 (expression -> expression CONCATENATE expression .)
    BIT_LEFT_SHIFT  reduce using rule 101 (expression -> expression CONCATENATE expression .)
    CONCATENATE     reduce using rule 101 (expression -> expression CONCATENATE expression .)
    ASSOCIATE_OP    reduce using rule 101 (expression -> expression CONCATENATE expression .)
    RANGE_OP        reduce using rule 101 (expression -> expression CONCATENATE expression .)
    CLOSE_PARANTHESIS reduce using rule 101 (expression -> expression CONCATENATE expression .)
    BLOCK_BEGIN     reduce using rule 101 (expression -> expression CONCATENATE expression .)
    COMMA           reduce using rule 101 (expression -> expression CONCATENATE expression .)
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! MULTIPLICATION_OP [ reduce using rule 101 (expression -> expression CONCATENATE expression .) ]
  ! DIVISION_OP     [ reduce using rule 101 (expression -> expression CONCATENATE expression .) ]
  ! MODULUS_OP      [ reduce using rule 101 (expression -> expression CONCATENATE expression .) ]
  ! EXPONENT_OP     [ reduce using rule 101 (expression -> expression CONCATENATE expression .) ]
  ! REP_OP          [ reduce using rule 101 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 101 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 101 (expression -> expression CONCATENATE expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 182

    (99) expression -> expression BIT_RIGHT_SHIFT expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    OR_STR_OP       reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_STR_OP      reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMPARE_OP      reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_OR          reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_XOR         reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_AND         reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_OP          reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    OR_OP           reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    EQUALS_OP       reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_OP      reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_OP         reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    RANGE_OP        reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMMA           reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .)
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! PLUS_OP         [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 99 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 183

    (81) expression -> expression BIT_OR expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 81 (expression -> expression BIT_OR expression .)
    OR_STR_OP       reduce using rule 81 (expression -> expression BIT_OR expression .)
    XOR_STR_OP      reduce using rule 81 (expression -> expression BIT_OR expression .)
    AND_STR_OP      reduce using rule 81 (expression -> expression BIT_OR expression .)
    NOT_STR_OP      reduce using rule 81 (expression -> expression BIT_OR expression .)
    BIT_OR          reduce using rule 81 (expression -> expression BIT_OR expression .)
    BIT_XOR         reduce using rule 81 (expression -> expression BIT_OR expression .)
    AND_OP          reduce using rule 81 (expression -> expression BIT_OR expression .)
    OR_OP           reduce using rule 81 (expression -> expression BIT_OR expression .)
    ASSOCIATE_OP    reduce using rule 81 (expression -> expression BIT_OR expression .)
    RANGE_OP        reduce using rule 81 (expression -> expression BIT_OR expression .)
    CLOSE_PARANTHESIS reduce using rule 81 (expression -> expression BIT_OR expression .)
    BLOCK_BEGIN     reduce using rule 81 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 81 (expression -> expression BIT_OR expression .)
    COMPARE_OP      shift and go to state 106
    BIT_AND         shift and go to state 121
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! COMPARE_OP      [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! EQUALS_OP       [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! GREATER_OP      [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! LESS_OP         [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! PLUS_OP         [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! MINUS_OP        [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! DIVISION_OP     [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! MODULUS_OP      [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! CONCATENATE     [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! REP_OP          [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 81 (expression -> expression BIT_OR expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 184

    (93) expression -> expression PLUS_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 93 (expression -> expression PLUS_OP expression .)
    OR_STR_OP       reduce using rule 93 (expression -> expression PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 93 (expression -> expression PLUS_OP expression .)
    AND_STR_OP      reduce using rule 93 (expression -> expression PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 93 (expression -> expression PLUS_OP expression .)
    COMPARE_OP      reduce using rule 93 (expression -> expression PLUS_OP expression .)
    BIT_OR          reduce using rule 93 (expression -> expression PLUS_OP expression .)
    BIT_XOR         reduce using rule 93 (expression -> expression PLUS_OP expression .)
    BIT_AND         reduce using rule 93 (expression -> expression PLUS_OP expression .)
    AND_OP          reduce using rule 93 (expression -> expression PLUS_OP expression .)
    OR_OP           reduce using rule 93 (expression -> expression PLUS_OP expression .)
    EQUALS_OP       reduce using rule 93 (expression -> expression PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 93 (expression -> expression PLUS_OP expression .)
    GREATER_OP      reduce using rule 93 (expression -> expression PLUS_OP expression .)
    LESS_OP         reduce using rule 93 (expression -> expression PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 93 (expression -> expression PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 93 (expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 93 (expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 93 (expression -> expression PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 93 (expression -> expression PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 93 (expression -> expression PLUS_OP expression .)
    CONCATENATE     reduce using rule 93 (expression -> expression PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 93 (expression -> expression PLUS_OP expression .)
    RANGE_OP        reduce using rule 93 (expression -> expression PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 93 (expression -> expression PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 93 (expression -> expression PLUS_OP expression .)
    COMMA           reduce using rule 93 (expression -> expression PLUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! MULTIPLICATION_OP [ reduce using rule 93 (expression -> expression PLUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 93 (expression -> expression PLUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 93 (expression -> expression PLUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 93 (expression -> expression PLUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 93 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 93 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 93 (expression -> expression PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 185

    (106) expression -> expression SEARCH_MODIFY_NEG expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    OR_STR_OP       reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    XOR_STR_OP      reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_STR_OP      reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_STR_OP      reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMPARE_OP      reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_OR          reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_XOR         reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_AND         reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_OP          reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    OR_OP           reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EQUALS_OP       reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_EQUALS_OP   reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_OP      reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_OP         reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_EQUAL_OP reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_EQUAL_OP   reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    PLUS_OP         reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MINUS_OP        reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MULTIPLICATION_OP reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    DIVISION_OP     reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MODULUS_OP      reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_RIGHT_SHIFT reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_LEFT_SHIFT  reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CONCATENATE     reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    REP_OP          reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    ASSOCIATE_OP    reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    RANGE_OP        reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY   reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY_NEG reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CLOSE_PARANTHESIS reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BLOCK_BEGIN     reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMMA           reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EXPONENT_OP     shift and go to state 108

  ! EXPONENT_OP     [ reduce using rule 106 (expression -> expression SEARCH_MODIFY_NEG expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! PLUS_OP         [ shift and go to state 131 ]
  ! MINUS_OP        [ shift and go to state 105 ]
  ! MULTIPLICATION_OP [ shift and go to state 122 ]
  ! DIVISION_OP     [ shift and go to state 110 ]
  ! MODULUS_OP      [ shift and go to state 118 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 129 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 126 ]
  ! CONCATENATE     [ shift and go to state 128 ]
  ! REP_OP          [ shift and go to state 127 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]
  ! SEARCH_MODIFY   [ shift and go to state 103 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 132 ]


state 186

    (88) expression -> expression GREATER_OP expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 88 (expression -> expression GREATER_OP expression .)
    OR_STR_OP       reduce using rule 88 (expression -> expression GREATER_OP expression .)
    XOR_STR_OP      reduce using rule 88 (expression -> expression GREATER_OP expression .)
    AND_STR_OP      reduce using rule 88 (expression -> expression GREATER_OP expression .)
    NOT_STR_OP      reduce using rule 88 (expression -> expression GREATER_OP expression .)
    COMPARE_OP      reduce using rule 88 (expression -> expression GREATER_OP expression .)
    BIT_OR          reduce using rule 88 (expression -> expression GREATER_OP expression .)
    BIT_XOR         reduce using rule 88 (expression -> expression GREATER_OP expression .)
    BIT_AND         reduce using rule 88 (expression -> expression GREATER_OP expression .)
    AND_OP          reduce using rule 88 (expression -> expression GREATER_OP expression .)
    OR_OP           reduce using rule 88 (expression -> expression GREATER_OP expression .)
    EQUALS_OP       reduce using rule 88 (expression -> expression GREATER_OP expression .)
    NOT_EQUALS_OP   reduce using rule 88 (expression -> expression GREATER_OP expression .)
    GREATER_OP      reduce using rule 88 (expression -> expression GREATER_OP expression .)
    LESS_OP         reduce using rule 88 (expression -> expression GREATER_OP expression .)
    GREATER_EQUAL_OP reduce using rule 88 (expression -> expression GREATER_OP expression .)
    LESS_EQUAL_OP   reduce using rule 88 (expression -> expression GREATER_OP expression .)
    ASSOCIATE_OP    reduce using rule 88 (expression -> expression GREATER_OP expression .)
    RANGE_OP        reduce using rule 88 (expression -> expression GREATER_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 88 (expression -> expression GREATER_OP expression .)
    BLOCK_BEGIN     reduce using rule 88 (expression -> expression GREATER_OP expression .)
    COMMA           reduce using rule 88 (expression -> expression GREATER_OP expression .)
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! PLUS_OP         [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! REP_OP          [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 88 (expression -> expression GREATER_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! COMPARE_OP      [ shift and go to state 106 ]
  ! BIT_OR          [ shift and go to state 130 ]
  ! BIT_XOR         [ shift and go to state 112 ]
  ! BIT_AND         [ shift and go to state 121 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! EQUALS_OP       [ shift and go to state 113 ]
  ! NOT_EQUALS_OP   [ shift and go to state 107 ]
  ! GREATER_OP      [ shift and go to state 133 ]
  ! LESS_OP         [ shift and go to state 117 ]
  ! GREATER_EQUAL_OP [ shift and go to state 119 ]
  ! LESS_EQUAL_OP   [ shift and go to state 104 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 187

    (65) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

    OR_STR_OP       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEMICOLON       reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 65 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)


state 188

    (33) functionStatement -> SUB IDENTIFIER Markerscope block .

    VARIABLE        reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LOCAL           reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PRIVATE         reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    ARRAY           reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    RETURN          reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    IDENTIFIER      reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    WHILE           reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    FOR             reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PRINT           reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SUB             reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LAST            reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    NEXT            reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    IF              reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    USE             reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SWITCH          reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BLOCK_ENDS      reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    $end            reduce using rule 33 (functionStatement -> SUB IDENTIFIER Markerscope block .)


state 189

    (24) caselist -> CASE . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist

    OPEN_PARANTHESIS shift and go to state 211


state 190

    (23) switchStatement -> SWITCH expression BLOCK_BEGIN caselist . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 212


state 191

    (25) caselist -> ELSE . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 213

state 192

    (26) caselist -> empty .

    BLOCK_ENDS      reduce using rule 26 (caselist -> empty .)


state 193

    (43) declaration -> PRIVATE VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IF              reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    USE             reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    $end            reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 43 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)


state 194

    (40) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 214
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 195

    (47) functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .

    OR_STR_OP       reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    SEMICOLON       reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 47 (functionCall -> IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS .)


state 196

    (49) parameters -> expression COMMA . parameters
    (49) parameters -> . expression COMMA parameters
    (50) parameters -> . expression
    (51) parameters -> . empty
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    parameters                     shift and go to state 215
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 143
    empty                          shift and go to state 142

state 197

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON . expression SEMICOLON expression CLOSE_PARANTHESIS block
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 216
    empty                          shift and go to state 53

state 198

    (41) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 41 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression SEMICOLON .)


state 199

    (45) decList -> COMMA VARIABLE decList .

    SEMICOLON       reduce using rule 45 (decList -> COMMA VARIABLE decList .)


state 200

    (38) assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 38 (assignment -> VARIABLE ASSIGNMENT_OP expression SEMICOLON .)


state 201

    (44) declaration -> LOCAL VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IF              reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    USE             reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    $end            reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 44 (declaration -> LOCAL VARIABLE decList SEMICOLON .)


state 202

    (39) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression . SEMICOLON
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 217
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 203

    (27) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif Marker block
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif Marker block ELSE Markerelse block
    (29) Markerif -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerif                       shift and go to state 219
    empty                          shift and go to state 218

state 204

    (68) arrayList -> COMMA . expression arrayList
    (69) arrayList -> COMMA . expression
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 220
    empty                          shift and go to state 53

state 205

    (67) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList . CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS shift and go to state 221


state 206

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerwhile block
    (53) Markerwhile -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    empty                          shift and go to state 223
    Markerwhile                    shift and go to state 222

state 207

    (35) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .

    VARIABLE        reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    ARRAY           reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 35 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)


state 208

    (66) term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .

    OR_STR_OP       reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    XOR_STR_OP      reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_STR_OP      reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_STR_OP      reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMPARE_OP      reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_OR          reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_AND         reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_OP          reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    OR_OP           reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EQUALS_OP       reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_EQUALS_OP   reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_OP      reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_OP         reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_EQUAL_OP reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_EQUAL_OP   reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    PLUS_OP         reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MINUS_OP        reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MULTIPLICATION_OP reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    DIVISION_OP     reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MODULUS_OP      reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EXPONENT_OP     reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_RIGHT_SHIFT reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_LEFT_SHIFT  reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CONCATENATE     reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    REP_OP          reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    ASSOCIATE_OP    reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    RANGE_OP        reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY   reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY_NEG reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEMICOLON       reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BLOCK_BEGIN     reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CLOSE_PARANTHESIS reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMMA           reduce using rule 66 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)


state 209

    (85) expression -> expression OR_OP Marker expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    OR_STR_OP       reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    XOR_STR_OP      reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    AND_STR_OP      reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    NOT_STR_OP      reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    OR_OP           reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    RANGE_OP        reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    COMMA           reduce using rule 85 (expression -> expression OR_OP Marker expression .)
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! COMPARE_OP      [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! AND_OP          [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 85 (expression -> expression OR_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 210

    (84) expression -> expression AND_OP Marker expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    OR_STR_OP       reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    XOR_STR_OP      reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    AND_STR_OP      reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    NOT_STR_OP      reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    AND_OP          reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    OR_OP           reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    RANGE_OP        reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    COMMA           reduce using rule 84 (expression -> expression AND_OP Marker expression .)
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132

  ! COMPARE_OP      [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 84 (expression -> expression AND_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 124 ]
  ! XOR_STR_OP      [ shift and go to state 120 ]
  ! AND_STR_OP      [ shift and go to state 115 ]
  ! NOT_STR_OP      [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 125 ]
  ! OR_OP           [ shift and go to state 116 ]
  ! ASSOCIATE_OP    [ shift and go to state 123 ]
  ! RANGE_OP        [ shift and go to state 111 ]


state 211

    (24) caselist -> CASE OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS block caselist
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 224
    empty                          shift and go to state 53

state 212

    (23) switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .

    VARIABLE        reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    LOCAL           reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRIVATE         reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    ARRAY           reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    RETURN          reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    WHILE           reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    FOR             reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    PRINT           reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    SUB             reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    LAST            reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    NEXT            reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    IF              reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    USE             reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    SWITCH          reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)
    $end            reduce using rule 23 (switchStatement -> SWITCH expression BLOCK_BEGIN caselist BLOCK_ENDS .)


state 213

    (25) caselist -> ELSE block .

    BLOCK_ENDS      reduce using rule 25 (caselist -> ELSE block .)


state 214

    (40) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 40 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression SEMICOLON .)


state 215

    (49) parameters -> expression COMMA parameters .

    CLOSE_PARANTHESIS reduce using rule 49 (parameters -> expression COMMA parameters .)


state 216

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression . SEMICOLON expression CLOSE_PARANTHESIS block
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 225
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 217

    (39) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .

    VARIABLE        reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LOCAL           reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRIVATE         reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    ARRAY           reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    RETURN          reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    WHILE           reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    FOR             reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    PRINT           reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SUB             reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    LAST            reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    NEXT            reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    IF              reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    USE             reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    SWITCH          reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    $end            reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 39 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression SEMICOLON .)


state 218

    (29) Markerif -> empty .

    BLOCK_BEGIN     reduce using rule 29 (Markerif -> empty .)


state 219

    (27) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . Marker block
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . Marker block ELSE Markerelse block
    (92) Marker -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 226
    empty                          shift and go to state 37

state 220

    (68) arrayList -> COMMA expression . arrayList
    (69) arrayList -> COMMA expression .
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression
    (68) arrayList -> . COMMA expression arrayList
    (69) arrayList -> . COMMA expression

    CLOSE_PARANTHESIS reduce using rule 69 (arrayList -> COMMA expression .)
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132
    COMMA           shift and go to state 204

    arrayList                      shift and go to state 227

state 221

    (67) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 228


state 222

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 229

state 223

    (53) Markerwhile -> empty .

    BLOCK_BEGIN     reduce using rule 53 (Markerwhile -> empty .)


state 224

    (24) caselist -> CASE OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS block caselist
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 230
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 225

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON . expression CLOSE_PARANTHESIS block
    (70) expression -> . PLUS_OP expression
    (71) expression -> . MINUS_OP expression
    (72) expression -> . BIT_FLIP expression
    (73) expression -> . NOT_OP expression
    (74) expression -> . empty
    (75) expression -> . term
    (76) expression -> . expression OR_STR_OP expression
    (77) expression -> . expression XOR_STR_OP expression
    (78) expression -> . expression AND_STR_OP expression
    (79) expression -> . expression NOT_STR_OP expression
    (80) expression -> . expression COMPARE_OP expression
    (81) expression -> . expression BIT_OR expression
    (82) expression -> . expression BIT_XOR expression
    (83) expression -> . expression BIT_AND expression
    (84) expression -> . expression AND_OP Marker expression
    (85) expression -> . expression OR_OP Marker expression
    (86) expression -> . expression EQUALS_OP expression
    (87) expression -> . expression NOT_EQUALS_OP expression
    (88) expression -> . expression GREATER_OP expression
    (89) expression -> . expression LESS_OP expression
    (90) expression -> . expression GREATER_EQUAL_OP expression
    (91) expression -> . expression LESS_EQUAL_OP expression
    (93) expression -> . expression PLUS_OP expression
    (94) expression -> . expression MINUS_OP expression
    (95) expression -> . expression MULTIPLICATION_OP expression
    (96) expression -> . expression DIVISION_OP expression
    (97) expression -> . expression MODULUS_OP expression
    (98) expression -> . expression EXPONENT_OP expression
    (99) expression -> . expression BIT_RIGHT_SHIFT expression
    (100) expression -> . expression BIT_LEFT_SHIFT expression
    (101) expression -> . expression CONCATENATE expression
    (102) expression -> . expression REP_OP expression
    (103) expression -> . expression ASSOCIATE_OP expression
    (104) expression -> . expression RANGE_OP expression
    (105) expression -> . expression SEARCH_MODIFY expression
    (106) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (48) term -> . functionCall
    (62) term -> . number
    (63) term -> . string
    (64) term -> . VARIABLE
    (65) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (66) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (47) functionCall -> . IDENTIFIER OPEN_PARANTHESIS parameters CLOSE_PARANTHESIS
    (57) number -> . NUMBER
    (58) number -> . SCI_NOT
    (59) number -> . FLOAT
    (60) number -> . HEXADECIMAL
    (61) number -> . OCTAL
    (55) string -> . STRING
    (56) string -> . RES_STRING

    PLUS_OP         shift and go to state 62
    MINUS_OP        shift and go to state 45
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 48
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 58
    OPEN_PARANTHESIS shift and go to state 64
    ARRAY           shift and go to state 52
    IDENTIFIER      shift and go to state 23
    NUMBER          shift and go to state 55
    SCI_NOT         shift and go to state 57
    FLOAT           shift and go to state 61
    HEXADECIMAL     shift and go to state 49
    OCTAL           shift and go to state 60
    STRING          shift and go to state 47
    RES_STRING      shift and go to state 54

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 59
    string                         shift and go to state 50
    number                         shift and go to state 46
    functionCall                   shift and go to state 56
    expression                     shift and go to state 231
    empty                          shift and go to state 53

state 226

    (27) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker . block
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker . block ELSE Markerelse block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 232

state 227

    (68) arrayList -> COMMA expression arrayList .

    CLOSE_PARANTHESIS reduce using rule 68 (arrayList -> COMMA expression arrayList .)


state 228

    (67) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .

    VARIABLE        reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    ARRAY           reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 67 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)


state 229

    (52) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .

    VARIABLE        reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LOCAL           reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRIVATE         reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    ARRAY           reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    RETURN          reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IDENTIFIER      reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    WHILE           reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    FOR             reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRINT           reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SUB             reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LAST            reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NEXT            reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IF              reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    USE             reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SWITCH          reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BLOCK_ENDS      reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    $end            reduce using rule 52 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)


state 230

    (24) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . block caselist
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 233

state 231

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression . CLOSE_PARANTHESIS block
    (76) expression -> expression . OR_STR_OP expression
    (77) expression -> expression . XOR_STR_OP expression
    (78) expression -> expression . AND_STR_OP expression
    (79) expression -> expression . NOT_STR_OP expression
    (80) expression -> expression . COMPARE_OP expression
    (81) expression -> expression . BIT_OR expression
    (82) expression -> expression . BIT_XOR expression
    (83) expression -> expression . BIT_AND expression
    (84) expression -> expression . AND_OP Marker expression
    (85) expression -> expression . OR_OP Marker expression
    (86) expression -> expression . EQUALS_OP expression
    (87) expression -> expression . NOT_EQUALS_OP expression
    (88) expression -> expression . GREATER_OP expression
    (89) expression -> expression . LESS_OP expression
    (90) expression -> expression . GREATER_EQUAL_OP expression
    (91) expression -> expression . LESS_EQUAL_OP expression
    (93) expression -> expression . PLUS_OP expression
    (94) expression -> expression . MINUS_OP expression
    (95) expression -> expression . MULTIPLICATION_OP expression
    (96) expression -> expression . DIVISION_OP expression
    (97) expression -> expression . MODULUS_OP expression
    (98) expression -> expression . EXPONENT_OP expression
    (99) expression -> expression . BIT_RIGHT_SHIFT expression
    (100) expression -> expression . BIT_LEFT_SHIFT expression
    (101) expression -> expression . CONCATENATE expression
    (102) expression -> expression . REP_OP expression
    (103) expression -> expression . ASSOCIATE_OP expression
    (104) expression -> expression . RANGE_OP expression
    (105) expression -> expression . SEARCH_MODIFY expression
    (106) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 234
    OR_STR_OP       shift and go to state 124
    XOR_STR_OP      shift and go to state 120
    AND_STR_OP      shift and go to state 115
    NOT_STR_OP      shift and go to state 109
    COMPARE_OP      shift and go to state 106
    BIT_OR          shift and go to state 130
    BIT_XOR         shift and go to state 112
    BIT_AND         shift and go to state 121
    AND_OP          shift and go to state 125
    OR_OP           shift and go to state 116
    EQUALS_OP       shift and go to state 113
    NOT_EQUALS_OP   shift and go to state 107
    GREATER_OP      shift and go to state 133
    LESS_OP         shift and go to state 117
    GREATER_EQUAL_OP shift and go to state 119
    LESS_EQUAL_OP   shift and go to state 104
    PLUS_OP         shift and go to state 131
    MINUS_OP        shift and go to state 105
    MULTIPLICATION_OP shift and go to state 122
    DIVISION_OP     shift and go to state 110
    MODULUS_OP      shift and go to state 118
    EXPONENT_OP     shift and go to state 108
    BIT_RIGHT_SHIFT shift and go to state 129
    BIT_LEFT_SHIFT  shift and go to state 126
    CONCATENATE     shift and go to state 128
    REP_OP          shift and go to state 127
    ASSOCIATE_OP    shift and go to state 123
    RANGE_OP        shift and go to state 111
    SEARCH_MODIFY   shift and go to state 103
    SEARCH_MODIFY_NEG shift and go to state 132


state 232

    (27) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .
    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block . ELSE Markerelse block

    VARIABLE        reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LOCAL           reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PRIVATE         reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    ARRAY           reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    RETURN          reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    IDENTIFIER      reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    WHILE           reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    FOR             reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PRINT           reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SUB             reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LAST            reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    NEXT            reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    IF              reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    USE             reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SWITCH          reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    $end            reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BLOCK_ENDS      reduce using rule 27 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    ELSE            shift and go to state 235


state 233

    (24) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block . caselist
    (24) caselist -> . CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist
    (25) caselist -> . ELSE block
    (26) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 189
    ELSE            shift and go to state 191
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 236
    empty                          shift and go to state 192

state 234

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 237

state 235

    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE . Markerelse block
    (30) Markerelse -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerelse                     shift and go to state 239
    empty                          shift and go to state 238

state 236

    (24) caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .

    BLOCK_ENDS      reduce using rule 24 (caselist -> CASE OPEN_PARANTHESIS expression CLOSE_PARANTHESIS block caselist .)


state 237

    (54) forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .

    VARIABLE        reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    LOCAL           reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    PRIVATE         reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    ARRAY           reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    RETURN          reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    IDENTIFIER      reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    WHILE           reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    FOR             reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    PRINT           reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    SUB             reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    LAST            reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    NEXT            reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    IF              reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    USE             reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    SWITCH          reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    BLOCK_ENDS      reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)
    $end            reduce using rule 54 (forStatement -> FOR OPEN_PARANTHESIS expression SEMICOLON expression SEMICOLON expression CLOSE_PARANTHESIS block .)


state 238

    (30) Markerelse -> empty .

    BLOCK_BEGIN     reduce using rule 30 (Markerelse -> empty .)


state 239

    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 7

    block                          shift and go to state 240

state 240

    (28) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .

    VARIABLE        reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LOCAL           reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PRIVATE         reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    ARRAY           reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    RETURN          reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    IDENTIFIER      reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    WHILE           reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    FOR             reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PRINT           reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SUB             reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LAST            reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    NEXT            reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    IF              reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    USE             reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SWITCH          reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BLOCK_ENDS      reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    $end            reduce using rule 28 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 155 resolved as shift
WARNING: reduce/reduce conflict in state 142 resolved using rule (parameters -> empty)
WARNING: rejected rule (expression -> empty) in state 142
