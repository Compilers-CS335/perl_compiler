Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    FORMAT
    COMMENT
    TRANSLATION
    GOTO
    FOREACH
    ELSIF
    SUBSTITUTE
    SELECT
    FILE_HANDLING_OPTIONS
    UNLESS
    DECREMENT_OP
    WHITESPACE
    REDO
    HASH
    WRITE
    MATCH
    INCREMENT_OP
    SYSTEM_COMMAND
    CONTINUE

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     start -> statements
Rule 3     block -> BLOCK_BEGIN statements BLOCK_ENDS
Rule 4     statements -> statement statements
Rule 5     statements -> statement
Rule 6     empty -> <empty>
Rule 7     statement -> assignment Marker SEMICOLON
Rule 8     statement -> declaration Marker
Rule 9     statement -> array_assignment Marker
Rule 10    statement -> returnStatement Marker
Rule 11    statement -> functionCall Marker SEMICOLON
Rule 12    statement -> whileStatement Marker
Rule 13    statement -> forStatement Marker
Rule 14    statement -> printStatement Marker
Rule 15    statement -> functionStatement Marker
Rule 16    statement -> lastStatement Marker
Rule 17    statement -> nextStatement Marker
Rule 18    statement -> ifthen Marker
Rule 19    statement -> ifthenelse Marker
Rule 20    statement -> useStatement Marker
Rule 21    statement -> untillStatement Marker
Rule 22    statement -> dowhileStatement Marker
Rule 23    statement -> inputStatement Marker
Rule 24    statement -> switchStatement Marker
Rule 25    statement -> ternaryStatement Marker SEMICOLON
Rule 26    ternaryStatement -> expression QUESTION_MARK Marker_true Marker expression COLON Marker_false expression
Rule 27    ternaryStatement -> expression QUESTION_MARK Marker_true Marker assignment COLON Marker_false assignment
Rule 28    Marker_true -> empty
Rule 29    Marker_false -> empty
Rule 30    useStatement -> USE IDENTIFIER SEMICOLON
Rule 31    useStatement -> USE VERSION SEMICOLON
Rule 32    useStatement -> USE IDENTIFIER module_list SEMICOLON
Rule 33    module_list -> empty
Rule 34    switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
Rule 35    Marker_switch -> empty
Rule 36    caselist -> CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist
Rule 37    caselist -> ELSE block Marker_quit
Rule 38    caselist -> empty
Rule 39    Marker_caselist -> empty
Rule 40    Marker_quit -> empty
Rule 41    inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
Rule 42    ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
Rule 43    ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
Rule 44    Markerif -> empty
Rule 45    Markerelse -> empty
Rule 46    lastStatement -> LAST SEMICOLON
Rule 47    nextStatement -> NEXT SEMICOLON
Rule 48    functionStatement -> SUB IDENTIFIER Markerscope block
Rule 49    Markerscope -> empty
Rule 50    functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
Rule 51    printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
Rule 52    printStatement -> PRINT expression SEMICOLON
Rule 53    returnStatement -> RETURN expression SEMICOLON
Rule 54    assignment -> VARIABLE ASSIGNMENT_OP expression
Rule 55    assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
Rule 56    assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression
Rule 57    assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression
Rule 58    assignment -> VARIABLE ADV_ASSIGNMENT_OP expression
Rule 59    whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
Rule 60    Markerwhile -> empty
Rule 61    dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
Rule 62    Markerdowhile -> empty
Rule 63    untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
Rule 64    Markeruntil -> empty
Rule 65    forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
Rule 66    forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
Rule 67    Markerfor2 -> empty
Rule 68    Markerfor -> empty
Rule 69    assignment -> empty
Rule 70    declaration -> VARIABLE decList SEMICOLON
Rule 71    declaration -> PRIVATE VARIABLE decList SEMICOLON
Rule 72    declaration -> LOCAL VARIABLE decList SEMICOLON
Rule 73    decList -> COMMA VARIABLE decList
Rule 74    decList -> empty
Rule 75    term -> functionCall
Rule 76    string -> STRING
Rule 77    string -> RES_STRING
Rule 78    number -> NUMBER
Rule 79    number -> SCI_NOT
Rule 80    number -> FLOAT
Rule 81    number -> HEXADECIMAL
Rule 82    number -> OCTAL
Rule 83    term -> number
Rule 84    term -> string
Rule 85    term -> VARIABLE
Rule 86    term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
Rule 87    term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
Rule 88    array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
Rule 89    arrayList -> COMMA expression arrayList
Rule 90    arrayList -> COMMA expression
Rule 91    expression -> PLUS_OP expression
Rule 92    expression -> MINUS_OP expression
Rule 93    expression -> BIT_FLIP expression
Rule 94    expression -> NOT_OP expression
Rule 95    expression -> empty
Rule 96    expression -> term
Rule 97    expression -> expression OR_STR_OP expression
Rule 98    expression -> expression XOR_STR_OP expression
Rule 99    expression -> expression AND_STR_OP expression
Rule 100   expression -> expression NOT_STR_OP expression
Rule 101   expression -> expression COMPARE_OP expression
Rule 102   expression -> expression BIT_OR expression
Rule 103   expression -> expression BIT_XOR expression
Rule 104   expression -> expression BIT_AND expression
Rule 105   expression -> expression AND_OP Marker expression
Rule 106   expression -> expression OR_OP Marker expression
Rule 107   expression -> expression EQUALS_OP expression
Rule 108   expression -> expression NOT_EQUALS_OP expression
Rule 109   expression -> expression GREATER_OP expression
Rule 110   expression -> expression LESS_OP expression
Rule 111   expression -> expression GREATER_EQUAL_OP expression
Rule 112   expression -> expression LESS_EQUAL_OP expression
Rule 113   Marker -> empty
Rule 114   expression -> expression PLUS_OP expression
Rule 115   expression -> expression MINUS_OP expression
Rule 116   expression -> expression MULTIPLICATION_OP expression
Rule 117   expression -> expression DIVISION_OP expression
Rule 118   expression -> expression MODULUS_OP expression
Rule 119   expression -> expression EXPONENT_OP expression
Rule 120   expression -> expression BIT_RIGHT_SHIFT expression
Rule 121   expression -> expression BIT_LEFT_SHIFT expression
Rule 122   expression -> expression CONCATENATE expression
Rule 123   expression -> expression REP_OP expression
Rule 124   expression -> expression ASSOCIATE_OP expression
Rule 125   expression -> expression RANGE_OP expression
Rule 126   expression -> expression SEARCH_MODIFY expression
Rule 127   expression -> expression SEARCH_MODIFY_NEG expression

Terminals, with rules where they appear

ADV_ASSIGNMENT_OP    : 58 66
AND_OP               : 105
AND_STR_OP           : 99
ARRAY                : 55 87 88
ASSIGNMENT_OP        : 41 54 55 56 57 65 88
ASSOCIATE_OP         : 124
BIT_AND              : 104
BIT_FLIP             : 93
BIT_LEFT_SHIFT       : 121
BIT_OR               : 102
BIT_RIGHT_SHIFT      : 120
BIT_XOR              : 103
BLOCK_BEGIN          : 3 34
BLOCK_ENDS           : 3 34
CASE                 : 34 36
CLOSE_BRACKET        : 55 87
CLOSE_PARANTHESIS    : 34 36 42 43 50 51 59 61 63 65 66 86 88
COLON                : 26 27
COMMA                : 73 89 90
COMMENT              : 
COMPARE_OP           : 101
CONCATENATE          : 122
CONTINUE             : 
DECREMENT_OP         : 
DIVISION_OP          : 117
DO                   : 61
ELSE                 : 37 43
ELSIF                : 
EQUALS_OP            : 107
EXPONENT_OP          : 119
FILE_HANDLING_OPTIONS : 
FLOAT                : 80
FOR                  : 65 66
FOREACH              : 
FORMAT               : 
GOTO                 : 
GREATER_EQUAL_OP     : 111
GREATER_OP           : 109
HASH                 : 
HEXADECIMAL          : 81
IDENTIFIER           : 30 32 48 50
IF                   : 42 43
INCREMENT_OP         : 
LAST                 : 46
LESS_EQUAL_OP        : 112
LESS_OP              : 110
LOCAL                : 56 72
MATCH                : 
MINUS_OP             : 92 115
MODULUS_OP           : 118
MULTIPLICATION_OP    : 116
NEXT                 : 47
NOT_EQUALS_OP        : 108
NOT_OP               : 94
NOT_STR_OP           : 100
NUMBER               : 55 78 87
OCTAL                : 82
OPEN_BRACKET         : 55 87
OPEN_PARANTHESIS     : 34 36 42 43 50 51 59 61 63 65 66 86 88
OR_OP                : 106
OR_STR_OP            : 97
PLUS_OP              : 91 114
PRINT                : 51 52
PRIVATE              : 57 71
QUESTION_MARK        : 26 27
RANGE_OP             : 125
REDO                 : 
REP_OP               : 123
RES_STRING           : 77
RETURN               : 53
SCI_NOT              : 79
SEARCH_MODIFY        : 126
SEARCH_MODIFY_NEG    : 127
SELECT               : 
SEMICOLON            : 7 11 25 30 31 32 41 46 47 51 52 53 61 65 65 66 66 70 71 72 88
STRING               : 76
SUB                  : 48
SUBSTITUTE           : 
SWITCH               : 34
SYSTEM_COMMAND       : 
TRANSLATION          : 
UNLESS               : 
UNTIL                : 63
USE                  : 30 31 32
USER_INPUT_OP        : 41
VARIABLE             : 41 54 56 57 58 65 66 70 71 72 73 85
VERSION              : 31
WHILE                : 59 61
WHITESPACE           : 
WRITE                : 
XOR_STR_OP           : 98
error                : 

Nonterminals, with rules where they appear

Marker               : 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 42 43 59 61 63 65 65 66 66 105 106
Marker_caselist      : 34 36
Marker_false         : 26 27
Marker_quit          : 34 36 37
Marker_switch        : 34
Marker_true          : 26 27
Markerdowhile        : 61
Markerelse           : 43
Markerfor            : 65 66
Markerfor2           : 
Markerif             : 42 43
Markerscope          : 48
Markeruntil          : 63
Markerwhile          : 59
arrayList            : 88 89
array_assignment     : 9
assignment           : 7 27 27 65 66
block                : 1 34 36 37 42 43 43 48 59 61 63 65 66
caselist             : 34 36
decList              : 70 71 72 73
declaration          : 8
dowhileStatement     : 22
empty                : 28 29 33 35 38 39 40 44 45 49 60 62 64 67 68 69 74 95 113
expression           : 26 26 26 27 34 34 36 42 43 51 52 53 54 55 56 57 58 59 61 63 65 65 66 66 86 88 89 90 91 92 93 94 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 111 111 112 112 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 122 123 123 124 124 125 125 126 126 127 127
forStatement         : 13
functionCall         : 11 75
functionStatement    : 15
ifthen               : 18
ifthenelse           : 19
inputStatement       : 23
lastStatement        : 16
module_list          : 32
nextStatement        : 17
number               : 83
printStatement       : 14
returnStatement      : 10
start                : 0
statement            : 4 5
statements           : 2 3 4
string               : 84
switchStatement      : 24
term                 : 96
ternaryStatement     : 25
untillStatement      : 21
useStatement         : 20
whileStatement       : 12

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) start -> . statements
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker SEMICOLON
    (8) statement -> . declaration Marker
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . untillStatement Marker
    (22) statement -> . dowhileStatement Marker
    (23) statement -> . inputStatement Marker
    (24) statement -> . switchStatement Marker
    (25) statement -> . ternaryStatement Marker SEMICOLON
    (54) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (55) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (56) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression
    (57) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression
    (58) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression
    (69) assignment -> . empty
    (70) declaration -> . VARIABLE decList SEMICOLON
    (71) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (72) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (88) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (53) returnStatement -> . RETURN expression SEMICOLON
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (65) forStatement -> . FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> . FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (51) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (52) printStatement -> . PRINT expression SEMICOLON
    (48) functionStatement -> . SUB IDENTIFIER Markerscope block
    (46) lastStatement -> . LAST SEMICOLON
    (47) nextStatement -> . NEXT SEMICOLON
    (42) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (43) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (30) useStatement -> . USE IDENTIFIER SEMICOLON
    (31) useStatement -> . USE VERSION SEMICOLON
    (32) useStatement -> . USE IDENTIFIER module_list SEMICOLON
    (63) untillStatement -> . UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
    (61) dowhileStatement -> . DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (41) inputStatement -> . VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
    (34) switchStatement -> . SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
    (26) ternaryStatement -> . expression QUESTION_MARK Marker_true Marker expression COLON Marker_false expression
    (27) ternaryStatement -> . expression QUESTION_MARK Marker_true Marker assignment COLON Marker_false assignment
    (6) empty -> .
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

  ! shift/reduce conflict for PLUS_OP resolved as shift
  ! shift/reduce conflict for MINUS_OP resolved as shift
    BLOCK_BEGIN     shift and go to state 48
    VARIABLE        shift and go to state 54
    ARRAY           shift and go to state 38
    LOCAL           shift and go to state 55
    PRIVATE         shift and go to state 50
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 39
    WHILE           shift and go to state 30
    FOR             shift and go to state 21
    PRINT           shift and go to state 17
    SUB             shift and go to state 26
    LAST            shift and go to state 5
    NEXT            shift and go to state 6
    IF              shift and go to state 56
    USE             shift and go to state 45
    UNTIL           shift and go to state 22
    DO              shift and go to state 28
    SWITCH          shift and go to state 34
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OPEN_PARANTHESIS shift and go to state 2
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    forStatement                   shift and go to state 1
    statements                     shift and go to state 25
    functionStatement              shift and go to state 46
    switchStatement                shift and go to state 3
    number                         shift and go to state 29
    inputStatement                 shift and go to state 16
    ifthen                         shift and go to state 31
    string                         shift and go to state 49
    dowhileStatement               shift and go to state 32
    nextStatement                  shift and go to state 33
    start                          shift and go to state 35
    lastStatement                  shift and go to state 36
    useStatement                   shift and go to state 19
    statement                      shift and go to state 37
    ternaryStatement               shift and go to state 7
    printStatement                 shift and go to state 20
    untillStatement                shift and go to state 40
    empty                          shift and go to state 44
    ifthenelse                     shift and go to state 8
    assignment                     shift and go to state 53
    whileStatement                 shift and go to state 9
    array_assignment               shift and go to state 42
    functionCall                   shift and go to state 10
    declaration                    shift and go to state 43
    returnStatement                shift and go to state 12
    term                           shift and go to state 13
    expression                     shift and go to state 23
    block                          shift and go to state 24

state 1

    (13) statement -> forStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 59
    empty                          shift and go to state 60

state 2

    (86) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 65
    empty                          shift and go to state 62

state 3

    (24) statement -> switchStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 66
    empty                          shift and go to state 60

state 4

    (94) expression -> NOT_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 67
    empty                          shift and go to state 62

state 5

    (46) lastStatement -> LAST . SEMICOLON

    SEMICOLON       shift and go to state 68


state 6

    (47) nextStatement -> NEXT . SEMICOLON

    SEMICOLON       shift and go to state 69


state 7

    (25) statement -> ternaryStatement . Marker SEMICOLON
    (113) Marker -> . empty
    (6) empty -> .

    SEMICOLON       reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 70
    empty                          shift and go to state 60

state 8

    (19) statement -> ifthenelse . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 71
    empty                          shift and go to state 60

state 9

    (12) statement -> whileStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 72
    empty                          shift and go to state 60

state 10

    (11) statement -> functionCall . Marker SEMICOLON
    (75) term -> functionCall .
    (113) Marker -> . empty
    (6) empty -> .

    QUESTION_MARK   reduce using rule 75 (term -> functionCall .)
    OR_STR_OP       reduce using rule 75 (term -> functionCall .)
    XOR_STR_OP      reduce using rule 75 (term -> functionCall .)
    AND_STR_OP      reduce using rule 75 (term -> functionCall .)
    NOT_STR_OP      reduce using rule 75 (term -> functionCall .)
    COMPARE_OP      reduce using rule 75 (term -> functionCall .)
    BIT_OR          reduce using rule 75 (term -> functionCall .)
    BIT_XOR         reduce using rule 75 (term -> functionCall .)
    BIT_AND         reduce using rule 75 (term -> functionCall .)
    AND_OP          reduce using rule 75 (term -> functionCall .)
    OR_OP           reduce using rule 75 (term -> functionCall .)
    EQUALS_OP       reduce using rule 75 (term -> functionCall .)
    NOT_EQUALS_OP   reduce using rule 75 (term -> functionCall .)
    GREATER_OP      reduce using rule 75 (term -> functionCall .)
    LESS_OP         reduce using rule 75 (term -> functionCall .)
    GREATER_EQUAL_OP reduce using rule 75 (term -> functionCall .)
    LESS_EQUAL_OP   reduce using rule 75 (term -> functionCall .)
    PLUS_OP         reduce using rule 75 (term -> functionCall .)
    MINUS_OP        reduce using rule 75 (term -> functionCall .)
    MULTIPLICATION_OP reduce using rule 75 (term -> functionCall .)
    DIVISION_OP     reduce using rule 75 (term -> functionCall .)
    MODULUS_OP      reduce using rule 75 (term -> functionCall .)
    EXPONENT_OP     reduce using rule 75 (term -> functionCall .)
    BIT_RIGHT_SHIFT reduce using rule 75 (term -> functionCall .)
    BIT_LEFT_SHIFT  reduce using rule 75 (term -> functionCall .)
    CONCATENATE     reduce using rule 75 (term -> functionCall .)
    REP_OP          reduce using rule 75 (term -> functionCall .)
    ASSOCIATE_OP    reduce using rule 75 (term -> functionCall .)
    RANGE_OP        reduce using rule 75 (term -> functionCall .)
    SEARCH_MODIFY   reduce using rule 75 (term -> functionCall .)
    SEARCH_MODIFY_NEG reduce using rule 75 (term -> functionCall .)
    SEMICOLON       reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 73
    empty                          shift and go to state 60

state 11

    (82) number -> OCTAL .

    OR_STR_OP       reduce using rule 82 (number -> OCTAL .)
    XOR_STR_OP      reduce using rule 82 (number -> OCTAL .)
    AND_STR_OP      reduce using rule 82 (number -> OCTAL .)
    NOT_STR_OP      reduce using rule 82 (number -> OCTAL .)
    COMPARE_OP      reduce using rule 82 (number -> OCTAL .)
    BIT_OR          reduce using rule 82 (number -> OCTAL .)
    BIT_XOR         reduce using rule 82 (number -> OCTAL .)
    BIT_AND         reduce using rule 82 (number -> OCTAL .)
    AND_OP          reduce using rule 82 (number -> OCTAL .)
    OR_OP           reduce using rule 82 (number -> OCTAL .)
    EQUALS_OP       reduce using rule 82 (number -> OCTAL .)
    NOT_EQUALS_OP   reduce using rule 82 (number -> OCTAL .)
    GREATER_OP      reduce using rule 82 (number -> OCTAL .)
    LESS_OP         reduce using rule 82 (number -> OCTAL .)
    GREATER_EQUAL_OP reduce using rule 82 (number -> OCTAL .)
    LESS_EQUAL_OP   reduce using rule 82 (number -> OCTAL .)
    PLUS_OP         reduce using rule 82 (number -> OCTAL .)
    MINUS_OP        reduce using rule 82 (number -> OCTAL .)
    MULTIPLICATION_OP reduce using rule 82 (number -> OCTAL .)
    DIVISION_OP     reduce using rule 82 (number -> OCTAL .)
    MODULUS_OP      reduce using rule 82 (number -> OCTAL .)
    EXPONENT_OP     reduce using rule 82 (number -> OCTAL .)
    BIT_RIGHT_SHIFT reduce using rule 82 (number -> OCTAL .)
    BIT_LEFT_SHIFT  reduce using rule 82 (number -> OCTAL .)
    CONCATENATE     reduce using rule 82 (number -> OCTAL .)
    REP_OP          reduce using rule 82 (number -> OCTAL .)
    ASSOCIATE_OP    reduce using rule 82 (number -> OCTAL .)
    RANGE_OP        reduce using rule 82 (number -> OCTAL .)
    SEARCH_MODIFY   reduce using rule 82 (number -> OCTAL .)
    SEARCH_MODIFY_NEG reduce using rule 82 (number -> OCTAL .)
    QUESTION_MARK   reduce using rule 82 (number -> OCTAL .)
    CLOSE_PARANTHESIS reduce using rule 82 (number -> OCTAL .)
    SEMICOLON       reduce using rule 82 (number -> OCTAL .)
    BLOCK_BEGIN     reduce using rule 82 (number -> OCTAL .)
    COLON           reduce using rule 82 (number -> OCTAL .)
    COMMA           reduce using rule 82 (number -> OCTAL .)


state 12

    (10) statement -> returnStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 74
    empty                          shift and go to state 60

state 13

    (96) expression -> term .

    OR_STR_OP       reduce using rule 96 (expression -> term .)
    XOR_STR_OP      reduce using rule 96 (expression -> term .)
    AND_STR_OP      reduce using rule 96 (expression -> term .)
    NOT_STR_OP      reduce using rule 96 (expression -> term .)
    COMPARE_OP      reduce using rule 96 (expression -> term .)
    BIT_OR          reduce using rule 96 (expression -> term .)
    BIT_XOR         reduce using rule 96 (expression -> term .)
    BIT_AND         reduce using rule 96 (expression -> term .)
    AND_OP          reduce using rule 96 (expression -> term .)
    OR_OP           reduce using rule 96 (expression -> term .)
    EQUALS_OP       reduce using rule 96 (expression -> term .)
    NOT_EQUALS_OP   reduce using rule 96 (expression -> term .)
    GREATER_OP      reduce using rule 96 (expression -> term .)
    LESS_OP         reduce using rule 96 (expression -> term .)
    GREATER_EQUAL_OP reduce using rule 96 (expression -> term .)
    LESS_EQUAL_OP   reduce using rule 96 (expression -> term .)
    PLUS_OP         reduce using rule 96 (expression -> term .)
    MINUS_OP        reduce using rule 96 (expression -> term .)
    MULTIPLICATION_OP reduce using rule 96 (expression -> term .)
    DIVISION_OP     reduce using rule 96 (expression -> term .)
    MODULUS_OP      reduce using rule 96 (expression -> term .)
    EXPONENT_OP     reduce using rule 96 (expression -> term .)
    BIT_RIGHT_SHIFT reduce using rule 96 (expression -> term .)
    BIT_LEFT_SHIFT  reduce using rule 96 (expression -> term .)
    CONCATENATE     reduce using rule 96 (expression -> term .)
    REP_OP          reduce using rule 96 (expression -> term .)
    ASSOCIATE_OP    reduce using rule 96 (expression -> term .)
    RANGE_OP        reduce using rule 96 (expression -> term .)
    SEARCH_MODIFY   reduce using rule 96 (expression -> term .)
    SEARCH_MODIFY_NEG reduce using rule 96 (expression -> term .)
    QUESTION_MARK   reduce using rule 96 (expression -> term .)
    CLOSE_PARANTHESIS reduce using rule 96 (expression -> term .)
    SEMICOLON       reduce using rule 96 (expression -> term .)
    BLOCK_BEGIN     reduce using rule 96 (expression -> term .)
    COLON           reduce using rule 96 (expression -> term .)
    COMMA           reduce using rule 96 (expression -> term .)


state 14

    (53) returnStatement -> RETURN . expression SEMICOLON
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 75
    empty                          shift and go to state 62

state 15

    (77) string -> RES_STRING .

    OR_STR_OP       reduce using rule 77 (string -> RES_STRING .)
    XOR_STR_OP      reduce using rule 77 (string -> RES_STRING .)
    AND_STR_OP      reduce using rule 77 (string -> RES_STRING .)
    NOT_STR_OP      reduce using rule 77 (string -> RES_STRING .)
    COMPARE_OP      reduce using rule 77 (string -> RES_STRING .)
    BIT_OR          reduce using rule 77 (string -> RES_STRING .)
    BIT_XOR         reduce using rule 77 (string -> RES_STRING .)
    BIT_AND         reduce using rule 77 (string -> RES_STRING .)
    AND_OP          reduce using rule 77 (string -> RES_STRING .)
    OR_OP           reduce using rule 77 (string -> RES_STRING .)
    EQUALS_OP       reduce using rule 77 (string -> RES_STRING .)
    NOT_EQUALS_OP   reduce using rule 77 (string -> RES_STRING .)
    GREATER_OP      reduce using rule 77 (string -> RES_STRING .)
    LESS_OP         reduce using rule 77 (string -> RES_STRING .)
    GREATER_EQUAL_OP reduce using rule 77 (string -> RES_STRING .)
    LESS_EQUAL_OP   reduce using rule 77 (string -> RES_STRING .)
    PLUS_OP         reduce using rule 77 (string -> RES_STRING .)
    MINUS_OP        reduce using rule 77 (string -> RES_STRING .)
    MULTIPLICATION_OP reduce using rule 77 (string -> RES_STRING .)
    DIVISION_OP     reduce using rule 77 (string -> RES_STRING .)
    MODULUS_OP      reduce using rule 77 (string -> RES_STRING .)
    EXPONENT_OP     reduce using rule 77 (string -> RES_STRING .)
    BIT_RIGHT_SHIFT reduce using rule 77 (string -> RES_STRING .)
    BIT_LEFT_SHIFT  reduce using rule 77 (string -> RES_STRING .)
    CONCATENATE     reduce using rule 77 (string -> RES_STRING .)
    REP_OP          reduce using rule 77 (string -> RES_STRING .)
    ASSOCIATE_OP    reduce using rule 77 (string -> RES_STRING .)
    RANGE_OP        reduce using rule 77 (string -> RES_STRING .)
    SEARCH_MODIFY   reduce using rule 77 (string -> RES_STRING .)
    SEARCH_MODIFY_NEG reduce using rule 77 (string -> RES_STRING .)
    QUESTION_MARK   reduce using rule 77 (string -> RES_STRING .)
    CLOSE_PARANTHESIS reduce using rule 77 (string -> RES_STRING .)
    SEMICOLON       reduce using rule 77 (string -> RES_STRING .)
    BLOCK_BEGIN     reduce using rule 77 (string -> RES_STRING .)
    COLON           reduce using rule 77 (string -> RES_STRING .)
    COMMA           reduce using rule 77 (string -> RES_STRING .)


state 16

    (23) statement -> inputStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 76
    empty                          shift and go to state 60

state 17

    (51) printStatement -> PRINT . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (52) printStatement -> PRINT . expression SEMICOLON
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    OPEN_PARANTHESIS shift and go to state 77
    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 78
    empty                          shift and go to state 62

state 18

    (81) number -> HEXADECIMAL .

    OR_STR_OP       reduce using rule 81 (number -> HEXADECIMAL .)
    XOR_STR_OP      reduce using rule 81 (number -> HEXADECIMAL .)
    AND_STR_OP      reduce using rule 81 (number -> HEXADECIMAL .)
    NOT_STR_OP      reduce using rule 81 (number -> HEXADECIMAL .)
    COMPARE_OP      reduce using rule 81 (number -> HEXADECIMAL .)
    BIT_OR          reduce using rule 81 (number -> HEXADECIMAL .)
    BIT_XOR         reduce using rule 81 (number -> HEXADECIMAL .)
    BIT_AND         reduce using rule 81 (number -> HEXADECIMAL .)
    AND_OP          reduce using rule 81 (number -> HEXADECIMAL .)
    OR_OP           reduce using rule 81 (number -> HEXADECIMAL .)
    EQUALS_OP       reduce using rule 81 (number -> HEXADECIMAL .)
    NOT_EQUALS_OP   reduce using rule 81 (number -> HEXADECIMAL .)
    GREATER_OP      reduce using rule 81 (number -> HEXADECIMAL .)
    LESS_OP         reduce using rule 81 (number -> HEXADECIMAL .)
    GREATER_EQUAL_OP reduce using rule 81 (number -> HEXADECIMAL .)
    LESS_EQUAL_OP   reduce using rule 81 (number -> HEXADECIMAL .)
    PLUS_OP         reduce using rule 81 (number -> HEXADECIMAL .)
    MINUS_OP        reduce using rule 81 (number -> HEXADECIMAL .)
    MULTIPLICATION_OP reduce using rule 81 (number -> HEXADECIMAL .)
    DIVISION_OP     reduce using rule 81 (number -> HEXADECIMAL .)
    MODULUS_OP      reduce using rule 81 (number -> HEXADECIMAL .)
    EXPONENT_OP     reduce using rule 81 (number -> HEXADECIMAL .)
    BIT_RIGHT_SHIFT reduce using rule 81 (number -> HEXADECIMAL .)
    BIT_LEFT_SHIFT  reduce using rule 81 (number -> HEXADECIMAL .)
    CONCATENATE     reduce using rule 81 (number -> HEXADECIMAL .)
    REP_OP          reduce using rule 81 (number -> HEXADECIMAL .)
    ASSOCIATE_OP    reduce using rule 81 (number -> HEXADECIMAL .)
    RANGE_OP        reduce using rule 81 (number -> HEXADECIMAL .)
    SEARCH_MODIFY   reduce using rule 81 (number -> HEXADECIMAL .)
    SEARCH_MODIFY_NEG reduce using rule 81 (number -> HEXADECIMAL .)
    QUESTION_MARK   reduce using rule 81 (number -> HEXADECIMAL .)
    CLOSE_PARANTHESIS reduce using rule 81 (number -> HEXADECIMAL .)
    SEMICOLON       reduce using rule 81 (number -> HEXADECIMAL .)
    BLOCK_BEGIN     reduce using rule 81 (number -> HEXADECIMAL .)
    COLON           reduce using rule 81 (number -> HEXADECIMAL .)
    COMMA           reduce using rule 81 (number -> HEXADECIMAL .)


state 19

    (20) statement -> useStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 79
    empty                          shift and go to state 60

state 20

    (14) statement -> printStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 80
    empty                          shift and go to state 60

state 21

    (65) forStatement -> FOR . OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR . OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

    OPEN_PARANTHESIS shift and go to state 81


state 22

    (63) untillStatement -> UNTIL . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
    (113) Marker -> . empty
    (6) empty -> .

    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 82
    empty                          shift and go to state 60

state 23

    (26) ternaryStatement -> expression . QUESTION_MARK Marker_true Marker expression COLON Marker_false expression
    (27) ternaryStatement -> expression . QUESTION_MARK Marker_true Marker assignment COLON Marker_false assignment
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    QUESTION_MARK   shift and go to state 95
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 24

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 25

    (2) start -> statements .

    $end            reduce using rule 2 (start -> statements .)


state 26

    (48) functionStatement -> SUB . IDENTIFIER Markerscope block

    IDENTIFIER      shift and go to state 114


state 27

    (92) expression -> MINUS_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 115
    empty                          shift and go to state 62

state 28

    (61) dowhileStatement -> DO . block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 116

state 29

    (83) term -> number .

    OR_STR_OP       reduce using rule 83 (term -> number .)
    XOR_STR_OP      reduce using rule 83 (term -> number .)
    AND_STR_OP      reduce using rule 83 (term -> number .)
    NOT_STR_OP      reduce using rule 83 (term -> number .)
    COMPARE_OP      reduce using rule 83 (term -> number .)
    BIT_OR          reduce using rule 83 (term -> number .)
    BIT_XOR         reduce using rule 83 (term -> number .)
    BIT_AND         reduce using rule 83 (term -> number .)
    AND_OP          reduce using rule 83 (term -> number .)
    OR_OP           reduce using rule 83 (term -> number .)
    EQUALS_OP       reduce using rule 83 (term -> number .)
    NOT_EQUALS_OP   reduce using rule 83 (term -> number .)
    GREATER_OP      reduce using rule 83 (term -> number .)
    LESS_OP         reduce using rule 83 (term -> number .)
    GREATER_EQUAL_OP reduce using rule 83 (term -> number .)
    LESS_EQUAL_OP   reduce using rule 83 (term -> number .)
    PLUS_OP         reduce using rule 83 (term -> number .)
    MINUS_OP        reduce using rule 83 (term -> number .)
    MULTIPLICATION_OP reduce using rule 83 (term -> number .)
    DIVISION_OP     reduce using rule 83 (term -> number .)
    MODULUS_OP      reduce using rule 83 (term -> number .)
    EXPONENT_OP     reduce using rule 83 (term -> number .)
    BIT_RIGHT_SHIFT reduce using rule 83 (term -> number .)
    BIT_LEFT_SHIFT  reduce using rule 83 (term -> number .)
    CONCATENATE     reduce using rule 83 (term -> number .)
    REP_OP          reduce using rule 83 (term -> number .)
    ASSOCIATE_OP    reduce using rule 83 (term -> number .)
    RANGE_OP        reduce using rule 83 (term -> number .)
    SEARCH_MODIFY   reduce using rule 83 (term -> number .)
    SEARCH_MODIFY_NEG reduce using rule 83 (term -> number .)
    CLOSE_PARANTHESIS reduce using rule 83 (term -> number .)
    QUESTION_MARK   reduce using rule 83 (term -> number .)
    SEMICOLON       reduce using rule 83 (term -> number .)
    BLOCK_BEGIN     reduce using rule 83 (term -> number .)
    COLON           reduce using rule 83 (term -> number .)
    COMMA           reduce using rule 83 (term -> number .)


state 30

    (59) whileStatement -> WHILE . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (113) Marker -> . empty
    (6) empty -> .

    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 117
    empty                          shift and go to state 60

state 31

    (18) statement -> ifthen . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 118
    empty                          shift and go to state 60

state 32

    (22) statement -> dowhileStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 119
    empty                          shift and go to state 60

state 33

    (17) statement -> nextStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 120
    empty                          shift and go to state 60

state 34

    (34) switchStatement -> SWITCH . expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    empty                          shift and go to state 62
    expression                     shift and go to state 121

state 35

    (0) S' -> start .



state 36

    (16) statement -> lastStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 122
    empty                          shift and go to state 60

state 37

    (4) statements -> statement . statements
    (5) statements -> statement .
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker SEMICOLON
    (8) statement -> . declaration Marker
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . untillStatement Marker
    (22) statement -> . dowhileStatement Marker
    (23) statement -> . inputStatement Marker
    (24) statement -> . switchStatement Marker
    (25) statement -> . ternaryStatement Marker SEMICOLON
    (54) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (55) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (56) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression
    (57) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression
    (58) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression
    (69) assignment -> . empty
    (70) declaration -> . VARIABLE decList SEMICOLON
    (71) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (72) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (88) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (53) returnStatement -> . RETURN expression SEMICOLON
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (65) forStatement -> . FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> . FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (51) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (52) printStatement -> . PRINT expression SEMICOLON
    (48) functionStatement -> . SUB IDENTIFIER Markerscope block
    (46) lastStatement -> . LAST SEMICOLON
    (47) nextStatement -> . NEXT SEMICOLON
    (42) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (43) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (30) useStatement -> . USE IDENTIFIER SEMICOLON
    (31) useStatement -> . USE VERSION SEMICOLON
    (32) useStatement -> . USE IDENTIFIER module_list SEMICOLON
    (63) untillStatement -> . UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
    (61) dowhileStatement -> . DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (41) inputStatement -> . VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
    (34) switchStatement -> . SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
    (26) ternaryStatement -> . expression QUESTION_MARK Marker_true Marker expression COLON Marker_false expression
    (27) ternaryStatement -> . expression QUESTION_MARK Marker_true Marker assignment COLON Marker_false assignment
    (6) empty -> .
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

  ! shift/reduce conflict for PLUS_OP resolved as shift
  ! shift/reduce conflict for MINUS_OP resolved as shift
    $end            reduce using rule 5 (statements -> statement .)
    BLOCK_ENDS      reduce using rule 5 (statements -> statement .)
    VARIABLE        shift and go to state 54
    ARRAY           shift and go to state 38
    LOCAL           shift and go to state 55
    PRIVATE         shift and go to state 50
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 39
    WHILE           shift and go to state 30
    FOR             shift and go to state 21
    PRINT           shift and go to state 17
    SUB             shift and go to state 26
    LAST            shift and go to state 5
    NEXT            shift and go to state 6
    IF              shift and go to state 56
    USE             shift and go to state 45
    UNTIL           shift and go to state 22
    DO              shift and go to state 28
    SWITCH          shift and go to state 34
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OPEN_PARANTHESIS shift and go to state 2
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    forStatement                   shift and go to state 1
    statements                     shift and go to state 123
    functionStatement              shift and go to state 46
    switchStatement                shift and go to state 3
    number                         shift and go to state 29
    inputStatement                 shift and go to state 16
    ifthen                         shift and go to state 31
    string                         shift and go to state 49
    dowhileStatement               shift and go to state 32
    nextStatement                  shift and go to state 33
    lastStatement                  shift and go to state 36
    useStatement                   shift and go to state 19
    statement                      shift and go to state 37
    ternaryStatement               shift and go to state 7
    printStatement                 shift and go to state 20
    untillStatement                shift and go to state 40
    empty                          shift and go to state 44
    ifthenelse                     shift and go to state 8
    assignment                     shift and go to state 53
    whileStatement                 shift and go to state 9
    array_assignment               shift and go to state 42
    functionCall                   shift and go to state 10
    declaration                    shift and go to state 43
    returnStatement                shift and go to state 12
    term                           shift and go to state 13
    expression                     shift and go to state 23

state 38

    (55) assignment -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (88) array_assignment -> ARRAY . ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (87) term -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 124
    ASSIGNMENT_OP   shift and go to state 125


state 39

    (50) functionCall -> IDENTIFIER . OPEN_PARANTHESIS CLOSE_PARANTHESIS

    OPEN_PARANTHESIS shift and go to state 126


state 40

    (21) statement -> untillStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 127
    empty                          shift and go to state 60

state 41

    (79) number -> SCI_NOT .

    OR_STR_OP       reduce using rule 79 (number -> SCI_NOT .)
    XOR_STR_OP      reduce using rule 79 (number -> SCI_NOT .)
    AND_STR_OP      reduce using rule 79 (number -> SCI_NOT .)
    NOT_STR_OP      reduce using rule 79 (number -> SCI_NOT .)
    COMPARE_OP      reduce using rule 79 (number -> SCI_NOT .)
    BIT_OR          reduce using rule 79 (number -> SCI_NOT .)
    BIT_XOR         reduce using rule 79 (number -> SCI_NOT .)
    BIT_AND         reduce using rule 79 (number -> SCI_NOT .)
    AND_OP          reduce using rule 79 (number -> SCI_NOT .)
    OR_OP           reduce using rule 79 (number -> SCI_NOT .)
    EQUALS_OP       reduce using rule 79 (number -> SCI_NOT .)
    NOT_EQUALS_OP   reduce using rule 79 (number -> SCI_NOT .)
    GREATER_OP      reduce using rule 79 (number -> SCI_NOT .)
    LESS_OP         reduce using rule 79 (number -> SCI_NOT .)
    GREATER_EQUAL_OP reduce using rule 79 (number -> SCI_NOT .)
    LESS_EQUAL_OP   reduce using rule 79 (number -> SCI_NOT .)
    PLUS_OP         reduce using rule 79 (number -> SCI_NOT .)
    MINUS_OP        reduce using rule 79 (number -> SCI_NOT .)
    MULTIPLICATION_OP reduce using rule 79 (number -> SCI_NOT .)
    DIVISION_OP     reduce using rule 79 (number -> SCI_NOT .)
    MODULUS_OP      reduce using rule 79 (number -> SCI_NOT .)
    EXPONENT_OP     reduce using rule 79 (number -> SCI_NOT .)
    BIT_RIGHT_SHIFT reduce using rule 79 (number -> SCI_NOT .)
    BIT_LEFT_SHIFT  reduce using rule 79 (number -> SCI_NOT .)
    CONCATENATE     reduce using rule 79 (number -> SCI_NOT .)
    REP_OP          reduce using rule 79 (number -> SCI_NOT .)
    ASSOCIATE_OP    reduce using rule 79 (number -> SCI_NOT .)
    RANGE_OP        reduce using rule 79 (number -> SCI_NOT .)
    SEARCH_MODIFY   reduce using rule 79 (number -> SCI_NOT .)
    SEARCH_MODIFY_NEG reduce using rule 79 (number -> SCI_NOT .)
    QUESTION_MARK   reduce using rule 79 (number -> SCI_NOT .)
    CLOSE_PARANTHESIS reduce using rule 79 (number -> SCI_NOT .)
    SEMICOLON       reduce using rule 79 (number -> SCI_NOT .)
    BLOCK_BEGIN     reduce using rule 79 (number -> SCI_NOT .)
    COLON           reduce using rule 79 (number -> SCI_NOT .)
    COMMA           reduce using rule 79 (number -> SCI_NOT .)


state 42

    (9) statement -> array_assignment . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 128
    empty                          shift and go to state 60

state 43

    (8) statement -> declaration . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 129
    empty                          shift and go to state 60

state 44

    (69) assignment -> empty .
    (95) expression -> empty .

    SEMICOLON       reduce using rule 69 (assignment -> empty .)
    QUESTION_MARK   reduce using rule 95 (expression -> empty .)
    OR_STR_OP       reduce using rule 95 (expression -> empty .)
    XOR_STR_OP      reduce using rule 95 (expression -> empty .)
    AND_STR_OP      reduce using rule 95 (expression -> empty .)
    NOT_STR_OP      reduce using rule 95 (expression -> empty .)
    COMPARE_OP      reduce using rule 95 (expression -> empty .)
    BIT_OR          reduce using rule 95 (expression -> empty .)
    BIT_XOR         reduce using rule 95 (expression -> empty .)
    BIT_AND         reduce using rule 95 (expression -> empty .)
    AND_OP          reduce using rule 95 (expression -> empty .)
    OR_OP           reduce using rule 95 (expression -> empty .)
    EQUALS_OP       reduce using rule 95 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 95 (expression -> empty .)
    GREATER_OP      reduce using rule 95 (expression -> empty .)
    LESS_OP         reduce using rule 95 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 95 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 95 (expression -> empty .)
    PLUS_OP         reduce using rule 95 (expression -> empty .)
    MINUS_OP        reduce using rule 95 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 95 (expression -> empty .)
    DIVISION_OP     reduce using rule 95 (expression -> empty .)
    MODULUS_OP      reduce using rule 95 (expression -> empty .)
    EXPONENT_OP     reduce using rule 95 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 95 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 95 (expression -> empty .)
    CONCATENATE     reduce using rule 95 (expression -> empty .)
    REP_OP          reduce using rule 95 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 95 (expression -> empty .)
    RANGE_OP        reduce using rule 95 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 95 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 95 (expression -> empty .)


state 45

    (30) useStatement -> USE . IDENTIFIER SEMICOLON
    (31) useStatement -> USE . VERSION SEMICOLON
    (32) useStatement -> USE . IDENTIFIER module_list SEMICOLON

    IDENTIFIER      shift and go to state 130
    VERSION         shift and go to state 131


state 46

    (15) statement -> functionStatement . Marker
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    SUB             reduce using rule 6 (empty -> .)
    LAST            reduce using rule 6 (empty -> .)
    NEXT            reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    USE             reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    DO              reduce using rule 6 (empty -> .)
    SWITCH          reduce using rule 6 (empty -> .)
    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    $end            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 132
    empty                          shift and go to state 60

state 47

    (78) number -> NUMBER .

    OR_STR_OP       reduce using rule 78 (number -> NUMBER .)
    XOR_STR_OP      reduce using rule 78 (number -> NUMBER .)
    AND_STR_OP      reduce using rule 78 (number -> NUMBER .)
    NOT_STR_OP      reduce using rule 78 (number -> NUMBER .)
    COMPARE_OP      reduce using rule 78 (number -> NUMBER .)
    BIT_OR          reduce using rule 78 (number -> NUMBER .)
    BIT_XOR         reduce using rule 78 (number -> NUMBER .)
    BIT_AND         reduce using rule 78 (number -> NUMBER .)
    AND_OP          reduce using rule 78 (number -> NUMBER .)
    OR_OP           reduce using rule 78 (number -> NUMBER .)
    EQUALS_OP       reduce using rule 78 (number -> NUMBER .)
    NOT_EQUALS_OP   reduce using rule 78 (number -> NUMBER .)
    GREATER_OP      reduce using rule 78 (number -> NUMBER .)
    LESS_OP         reduce using rule 78 (number -> NUMBER .)
    GREATER_EQUAL_OP reduce using rule 78 (number -> NUMBER .)
    LESS_EQUAL_OP   reduce using rule 78 (number -> NUMBER .)
    PLUS_OP         reduce using rule 78 (number -> NUMBER .)
    MINUS_OP        reduce using rule 78 (number -> NUMBER .)
    MULTIPLICATION_OP reduce using rule 78 (number -> NUMBER .)
    DIVISION_OP     reduce using rule 78 (number -> NUMBER .)
    MODULUS_OP      reduce using rule 78 (number -> NUMBER .)
    EXPONENT_OP     reduce using rule 78 (number -> NUMBER .)
    BIT_RIGHT_SHIFT reduce using rule 78 (number -> NUMBER .)
    BIT_LEFT_SHIFT  reduce using rule 78 (number -> NUMBER .)
    CONCATENATE     reduce using rule 78 (number -> NUMBER .)
    REP_OP          reduce using rule 78 (number -> NUMBER .)
    ASSOCIATE_OP    reduce using rule 78 (number -> NUMBER .)
    RANGE_OP        reduce using rule 78 (number -> NUMBER .)
    SEARCH_MODIFY   reduce using rule 78 (number -> NUMBER .)
    SEARCH_MODIFY_NEG reduce using rule 78 (number -> NUMBER .)
    QUESTION_MARK   reduce using rule 78 (number -> NUMBER .)
    CLOSE_PARANTHESIS reduce using rule 78 (number -> NUMBER .)
    SEMICOLON       reduce using rule 78 (number -> NUMBER .)
    BLOCK_BEGIN     reduce using rule 78 (number -> NUMBER .)
    COLON           reduce using rule 78 (number -> NUMBER .)
    COMMA           reduce using rule 78 (number -> NUMBER .)


state 48

    (3) block -> BLOCK_BEGIN . statements BLOCK_ENDS
    (4) statements -> . statement statements
    (5) statements -> . statement
    (7) statement -> . assignment Marker SEMICOLON
    (8) statement -> . declaration Marker
    (9) statement -> . array_assignment Marker
    (10) statement -> . returnStatement Marker
    (11) statement -> . functionCall Marker SEMICOLON
    (12) statement -> . whileStatement Marker
    (13) statement -> . forStatement Marker
    (14) statement -> . printStatement Marker
    (15) statement -> . functionStatement Marker
    (16) statement -> . lastStatement Marker
    (17) statement -> . nextStatement Marker
    (18) statement -> . ifthen Marker
    (19) statement -> . ifthenelse Marker
    (20) statement -> . useStatement Marker
    (21) statement -> . untillStatement Marker
    (22) statement -> . dowhileStatement Marker
    (23) statement -> . inputStatement Marker
    (24) statement -> . switchStatement Marker
    (25) statement -> . ternaryStatement Marker SEMICOLON
    (54) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (55) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (56) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression
    (57) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression
    (58) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression
    (69) assignment -> . empty
    (70) declaration -> . VARIABLE decList SEMICOLON
    (71) declaration -> . PRIVATE VARIABLE decList SEMICOLON
    (72) declaration -> . LOCAL VARIABLE decList SEMICOLON
    (88) array_assignment -> . ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (53) returnStatement -> . RETURN expression SEMICOLON
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (59) whileStatement -> . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block
    (65) forStatement -> . FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> . FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (51) printStatement -> . PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON
    (52) printStatement -> . PRINT expression SEMICOLON
    (48) functionStatement -> . SUB IDENTIFIER Markerscope block
    (46) lastStatement -> . LAST SEMICOLON
    (47) nextStatement -> . NEXT SEMICOLON
    (42) ifthen -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (43) ifthenelse -> . IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (30) useStatement -> . USE IDENTIFIER SEMICOLON
    (31) useStatement -> . USE VERSION SEMICOLON
    (32) useStatement -> . USE IDENTIFIER module_list SEMICOLON
    (63) untillStatement -> . UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block
    (61) dowhileStatement -> . DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (41) inputStatement -> . VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
    (34) switchStatement -> . SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
    (26) ternaryStatement -> . expression QUESTION_MARK Marker_true Marker expression COLON Marker_false expression
    (27) ternaryStatement -> . expression QUESTION_MARK Marker_true Marker assignment COLON Marker_false assignment
    (6) empty -> .
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

  ! shift/reduce conflict for PLUS_OP resolved as shift
  ! shift/reduce conflict for MINUS_OP resolved as shift
    VARIABLE        shift and go to state 54
    ARRAY           shift and go to state 38
    LOCAL           shift and go to state 55
    PRIVATE         shift and go to state 50
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 39
    WHILE           shift and go to state 30
    FOR             shift and go to state 21
    PRINT           shift and go to state 17
    SUB             shift and go to state 26
    LAST            shift and go to state 5
    NEXT            shift and go to state 6
    IF              shift and go to state 56
    USE             shift and go to state 45
    UNTIL           shift and go to state 22
    DO              shift and go to state 28
    SWITCH          shift and go to state 34
    SEMICOLON       reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OPEN_PARANTHESIS shift and go to state 2
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    forStatement                   shift and go to state 1
    statements                     shift and go to state 133
    functionStatement              shift and go to state 46
    switchStatement                shift and go to state 3
    number                         shift and go to state 29
    inputStatement                 shift and go to state 16
    ifthen                         shift and go to state 31
    string                         shift and go to state 49
    dowhileStatement               shift and go to state 32
    nextStatement                  shift and go to state 33
    lastStatement                  shift and go to state 36
    useStatement                   shift and go to state 19
    statement                      shift and go to state 37
    ternaryStatement               shift and go to state 7
    printStatement                 shift and go to state 20
    untillStatement                shift and go to state 40
    empty                          shift and go to state 44
    ifthenelse                     shift and go to state 8
    assignment                     shift and go to state 53
    whileStatement                 shift and go to state 9
    array_assignment               shift and go to state 42
    functionCall                   shift and go to state 10
    declaration                    shift and go to state 43
    returnStatement                shift and go to state 12
    term                           shift and go to state 13
    expression                     shift and go to state 23

state 49

    (84) term -> string .

    OR_STR_OP       reduce using rule 84 (term -> string .)
    XOR_STR_OP      reduce using rule 84 (term -> string .)
    AND_STR_OP      reduce using rule 84 (term -> string .)
    NOT_STR_OP      reduce using rule 84 (term -> string .)
    COMPARE_OP      reduce using rule 84 (term -> string .)
    BIT_OR          reduce using rule 84 (term -> string .)
    BIT_XOR         reduce using rule 84 (term -> string .)
    BIT_AND         reduce using rule 84 (term -> string .)
    AND_OP          reduce using rule 84 (term -> string .)
    OR_OP           reduce using rule 84 (term -> string .)
    EQUALS_OP       reduce using rule 84 (term -> string .)
    NOT_EQUALS_OP   reduce using rule 84 (term -> string .)
    GREATER_OP      reduce using rule 84 (term -> string .)
    LESS_OP         reduce using rule 84 (term -> string .)
    GREATER_EQUAL_OP reduce using rule 84 (term -> string .)
    LESS_EQUAL_OP   reduce using rule 84 (term -> string .)
    PLUS_OP         reduce using rule 84 (term -> string .)
    MINUS_OP        reduce using rule 84 (term -> string .)
    MULTIPLICATION_OP reduce using rule 84 (term -> string .)
    DIVISION_OP     reduce using rule 84 (term -> string .)
    MODULUS_OP      reduce using rule 84 (term -> string .)
    EXPONENT_OP     reduce using rule 84 (term -> string .)
    BIT_RIGHT_SHIFT reduce using rule 84 (term -> string .)
    BIT_LEFT_SHIFT  reduce using rule 84 (term -> string .)
    CONCATENATE     reduce using rule 84 (term -> string .)
    REP_OP          reduce using rule 84 (term -> string .)
    ASSOCIATE_OP    reduce using rule 84 (term -> string .)
    RANGE_OP        reduce using rule 84 (term -> string .)
    SEARCH_MODIFY   reduce using rule 84 (term -> string .)
    SEARCH_MODIFY_NEG reduce using rule 84 (term -> string .)
    CLOSE_PARANTHESIS reduce using rule 84 (term -> string .)
    QUESTION_MARK   reduce using rule 84 (term -> string .)
    SEMICOLON       reduce using rule 84 (term -> string .)
    BLOCK_BEGIN     reduce using rule 84 (term -> string .)
    COLON           reduce using rule 84 (term -> string .)
    COMMA           reduce using rule 84 (term -> string .)


state 50

    (57) assignment -> PRIVATE . VARIABLE ASSIGNMENT_OP expression
    (71) declaration -> PRIVATE . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 134


state 51

    (93) expression -> BIT_FLIP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 135
    empty                          shift and go to state 62

state 52

    (76) string -> STRING .

    OR_STR_OP       reduce using rule 76 (string -> STRING .)
    XOR_STR_OP      reduce using rule 76 (string -> STRING .)
    AND_STR_OP      reduce using rule 76 (string -> STRING .)
    NOT_STR_OP      reduce using rule 76 (string -> STRING .)
    COMPARE_OP      reduce using rule 76 (string -> STRING .)
    BIT_OR          reduce using rule 76 (string -> STRING .)
    BIT_XOR         reduce using rule 76 (string -> STRING .)
    BIT_AND         reduce using rule 76 (string -> STRING .)
    AND_OP          reduce using rule 76 (string -> STRING .)
    OR_OP           reduce using rule 76 (string -> STRING .)
    EQUALS_OP       reduce using rule 76 (string -> STRING .)
    NOT_EQUALS_OP   reduce using rule 76 (string -> STRING .)
    GREATER_OP      reduce using rule 76 (string -> STRING .)
    LESS_OP         reduce using rule 76 (string -> STRING .)
    GREATER_EQUAL_OP reduce using rule 76 (string -> STRING .)
    LESS_EQUAL_OP   reduce using rule 76 (string -> STRING .)
    PLUS_OP         reduce using rule 76 (string -> STRING .)
    MINUS_OP        reduce using rule 76 (string -> STRING .)
    MULTIPLICATION_OP reduce using rule 76 (string -> STRING .)
    DIVISION_OP     reduce using rule 76 (string -> STRING .)
    MODULUS_OP      reduce using rule 76 (string -> STRING .)
    EXPONENT_OP     reduce using rule 76 (string -> STRING .)
    BIT_RIGHT_SHIFT reduce using rule 76 (string -> STRING .)
    BIT_LEFT_SHIFT  reduce using rule 76 (string -> STRING .)
    CONCATENATE     reduce using rule 76 (string -> STRING .)
    REP_OP          reduce using rule 76 (string -> STRING .)
    ASSOCIATE_OP    reduce using rule 76 (string -> STRING .)
    RANGE_OP        reduce using rule 76 (string -> STRING .)
    SEARCH_MODIFY   reduce using rule 76 (string -> STRING .)
    SEARCH_MODIFY_NEG reduce using rule 76 (string -> STRING .)
    QUESTION_MARK   reduce using rule 76 (string -> STRING .)
    CLOSE_PARANTHESIS reduce using rule 76 (string -> STRING .)
    SEMICOLON       reduce using rule 76 (string -> STRING .)
    BLOCK_BEGIN     reduce using rule 76 (string -> STRING .)
    COLON           reduce using rule 76 (string -> STRING .)
    COMMA           reduce using rule 76 (string -> STRING .)


state 53

    (7) statement -> assignment . Marker SEMICOLON
    (113) Marker -> . empty
    (6) empty -> .

    SEMICOLON       reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 136
    empty                          shift and go to state 60

state 54

    (54) assignment -> VARIABLE . ASSIGNMENT_OP expression
    (58) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression
    (70) declaration -> VARIABLE . decList SEMICOLON
    (41) inputStatement -> VARIABLE . ASSIGNMENT_OP USER_INPUT_OP SEMICOLON
    (85) term -> VARIABLE .
    (73) decList -> . COMMA VARIABLE decList
    (74) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 140
    ADV_ASSIGNMENT_OP shift and go to state 138
    QUESTION_MARK   reduce using rule 85 (term -> VARIABLE .)
    OR_STR_OP       reduce using rule 85 (term -> VARIABLE .)
    XOR_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    AND_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    NOT_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    COMPARE_OP      reduce using rule 85 (term -> VARIABLE .)
    BIT_OR          reduce using rule 85 (term -> VARIABLE .)
    BIT_XOR         reduce using rule 85 (term -> VARIABLE .)
    BIT_AND         reduce using rule 85 (term -> VARIABLE .)
    AND_OP          reduce using rule 85 (term -> VARIABLE .)
    OR_OP           reduce using rule 85 (term -> VARIABLE .)
    EQUALS_OP       reduce using rule 85 (term -> VARIABLE .)
    NOT_EQUALS_OP   reduce using rule 85 (term -> VARIABLE .)
    GREATER_OP      reduce using rule 85 (term -> VARIABLE .)
    LESS_OP         reduce using rule 85 (term -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 85 (term -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 85 (term -> VARIABLE .)
    PLUS_OP         reduce using rule 85 (term -> VARIABLE .)
    MINUS_OP        reduce using rule 85 (term -> VARIABLE .)
    MULTIPLICATION_OP reduce using rule 85 (term -> VARIABLE .)
    DIVISION_OP     reduce using rule 85 (term -> VARIABLE .)
    MODULUS_OP      reduce using rule 85 (term -> VARIABLE .)
    EXPONENT_OP     reduce using rule 85 (term -> VARIABLE .)
    BIT_RIGHT_SHIFT reduce using rule 85 (term -> VARIABLE .)
    BIT_LEFT_SHIFT  reduce using rule 85 (term -> VARIABLE .)
    CONCATENATE     reduce using rule 85 (term -> VARIABLE .)
    REP_OP          reduce using rule 85 (term -> VARIABLE .)
    ASSOCIATE_OP    reduce using rule 85 (term -> VARIABLE .)
    RANGE_OP        reduce using rule 85 (term -> VARIABLE .)
    SEARCH_MODIFY   reduce using rule 85 (term -> VARIABLE .)
    SEARCH_MODIFY_NEG reduce using rule 85 (term -> VARIABLE .)
    COMMA           shift and go to state 139
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 141
    decList                        shift and go to state 137

state 55

    (56) assignment -> LOCAL . VARIABLE ASSIGNMENT_OP expression
    (72) declaration -> LOCAL . VARIABLE decList SEMICOLON

    VARIABLE        shift and go to state 142


state 56

    (42) ifthen -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block
    (43) ifthenelse -> IF . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block

    OPEN_PARANTHESIS shift and go to state 143


state 57

    (80) number -> FLOAT .

    OR_STR_OP       reduce using rule 80 (number -> FLOAT .)
    XOR_STR_OP      reduce using rule 80 (number -> FLOAT .)
    AND_STR_OP      reduce using rule 80 (number -> FLOAT .)
    NOT_STR_OP      reduce using rule 80 (number -> FLOAT .)
    COMPARE_OP      reduce using rule 80 (number -> FLOAT .)
    BIT_OR          reduce using rule 80 (number -> FLOAT .)
    BIT_XOR         reduce using rule 80 (number -> FLOAT .)
    BIT_AND         reduce using rule 80 (number -> FLOAT .)
    AND_OP          reduce using rule 80 (number -> FLOAT .)
    OR_OP           reduce using rule 80 (number -> FLOAT .)
    EQUALS_OP       reduce using rule 80 (number -> FLOAT .)
    NOT_EQUALS_OP   reduce using rule 80 (number -> FLOAT .)
    GREATER_OP      reduce using rule 80 (number -> FLOAT .)
    LESS_OP         reduce using rule 80 (number -> FLOAT .)
    GREATER_EQUAL_OP reduce using rule 80 (number -> FLOAT .)
    LESS_EQUAL_OP   reduce using rule 80 (number -> FLOAT .)
    PLUS_OP         reduce using rule 80 (number -> FLOAT .)
    MINUS_OP        reduce using rule 80 (number -> FLOAT .)
    MULTIPLICATION_OP reduce using rule 80 (number -> FLOAT .)
    DIVISION_OP     reduce using rule 80 (number -> FLOAT .)
    MODULUS_OP      reduce using rule 80 (number -> FLOAT .)
    EXPONENT_OP     reduce using rule 80 (number -> FLOAT .)
    BIT_RIGHT_SHIFT reduce using rule 80 (number -> FLOAT .)
    BIT_LEFT_SHIFT  reduce using rule 80 (number -> FLOAT .)
    CONCATENATE     reduce using rule 80 (number -> FLOAT .)
    REP_OP          reduce using rule 80 (number -> FLOAT .)
    ASSOCIATE_OP    reduce using rule 80 (number -> FLOAT .)
    RANGE_OP        reduce using rule 80 (number -> FLOAT .)
    SEARCH_MODIFY   reduce using rule 80 (number -> FLOAT .)
    SEARCH_MODIFY_NEG reduce using rule 80 (number -> FLOAT .)
    QUESTION_MARK   reduce using rule 80 (number -> FLOAT .)
    CLOSE_PARANTHESIS reduce using rule 80 (number -> FLOAT .)
    SEMICOLON       reduce using rule 80 (number -> FLOAT .)
    BLOCK_BEGIN     reduce using rule 80 (number -> FLOAT .)
    COLON           reduce using rule 80 (number -> FLOAT .)
    COMMA           reduce using rule 80 (number -> FLOAT .)


state 58

    (91) expression -> PLUS_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 144
    empty                          shift and go to state 62

state 59

    (13) statement -> forStatement Marker .

    VARIABLE        reduce using rule 13 (statement -> forStatement Marker .)
    ARRAY           reduce using rule 13 (statement -> forStatement Marker .)
    LOCAL           reduce using rule 13 (statement -> forStatement Marker .)
    PRIVATE         reduce using rule 13 (statement -> forStatement Marker .)
    RETURN          reduce using rule 13 (statement -> forStatement Marker .)
    IDENTIFIER      reduce using rule 13 (statement -> forStatement Marker .)
    WHILE           reduce using rule 13 (statement -> forStatement Marker .)
    FOR             reduce using rule 13 (statement -> forStatement Marker .)
    PRINT           reduce using rule 13 (statement -> forStatement Marker .)
    SUB             reduce using rule 13 (statement -> forStatement Marker .)
    LAST            reduce using rule 13 (statement -> forStatement Marker .)
    NEXT            reduce using rule 13 (statement -> forStatement Marker .)
    IF              reduce using rule 13 (statement -> forStatement Marker .)
    USE             reduce using rule 13 (statement -> forStatement Marker .)
    UNTIL           reduce using rule 13 (statement -> forStatement Marker .)
    DO              reduce using rule 13 (statement -> forStatement Marker .)
    SWITCH          reduce using rule 13 (statement -> forStatement Marker .)
    PLUS_OP         reduce using rule 13 (statement -> forStatement Marker .)
    MINUS_OP        reduce using rule 13 (statement -> forStatement Marker .)
    BIT_FLIP        reduce using rule 13 (statement -> forStatement Marker .)
    NOT_OP          reduce using rule 13 (statement -> forStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 13 (statement -> forStatement Marker .)
    NUMBER          reduce using rule 13 (statement -> forStatement Marker .)
    SCI_NOT         reduce using rule 13 (statement -> forStatement Marker .)
    FLOAT           reduce using rule 13 (statement -> forStatement Marker .)
    HEXADECIMAL     reduce using rule 13 (statement -> forStatement Marker .)
    OCTAL           reduce using rule 13 (statement -> forStatement Marker .)
    STRING          reduce using rule 13 (statement -> forStatement Marker .)
    RES_STRING      reduce using rule 13 (statement -> forStatement Marker .)
    SEMICOLON       reduce using rule 13 (statement -> forStatement Marker .)
    QUESTION_MARK   reduce using rule 13 (statement -> forStatement Marker .)
    OR_STR_OP       reduce using rule 13 (statement -> forStatement Marker .)
    XOR_STR_OP      reduce using rule 13 (statement -> forStatement Marker .)
    AND_STR_OP      reduce using rule 13 (statement -> forStatement Marker .)
    NOT_STR_OP      reduce using rule 13 (statement -> forStatement Marker .)
    COMPARE_OP      reduce using rule 13 (statement -> forStatement Marker .)
    BIT_OR          reduce using rule 13 (statement -> forStatement Marker .)
    BIT_XOR         reduce using rule 13 (statement -> forStatement Marker .)
    BIT_AND         reduce using rule 13 (statement -> forStatement Marker .)
    AND_OP          reduce using rule 13 (statement -> forStatement Marker .)
    OR_OP           reduce using rule 13 (statement -> forStatement Marker .)
    EQUALS_OP       reduce using rule 13 (statement -> forStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 13 (statement -> forStatement Marker .)
    GREATER_OP      reduce using rule 13 (statement -> forStatement Marker .)
    LESS_OP         reduce using rule 13 (statement -> forStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 13 (statement -> forStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 13 (statement -> forStatement Marker .)
    MULTIPLICATION_OP reduce using rule 13 (statement -> forStatement Marker .)
    DIVISION_OP     reduce using rule 13 (statement -> forStatement Marker .)
    MODULUS_OP      reduce using rule 13 (statement -> forStatement Marker .)
    EXPONENT_OP     reduce using rule 13 (statement -> forStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 13 (statement -> forStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 13 (statement -> forStatement Marker .)
    CONCATENATE     reduce using rule 13 (statement -> forStatement Marker .)
    REP_OP          reduce using rule 13 (statement -> forStatement Marker .)
    ASSOCIATE_OP    reduce using rule 13 (statement -> forStatement Marker .)
    RANGE_OP        reduce using rule 13 (statement -> forStatement Marker .)
    SEARCH_MODIFY   reduce using rule 13 (statement -> forStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 13 (statement -> forStatement Marker .)
    $end            reduce using rule 13 (statement -> forStatement Marker .)
    BLOCK_ENDS      reduce using rule 13 (statement -> forStatement Marker .)


state 60

    (113) Marker -> empty .

    VARIABLE        reduce using rule 113 (Marker -> empty .)
    ARRAY           reduce using rule 113 (Marker -> empty .)
    LOCAL           reduce using rule 113 (Marker -> empty .)
    PRIVATE         reduce using rule 113 (Marker -> empty .)
    RETURN          reduce using rule 113 (Marker -> empty .)
    IDENTIFIER      reduce using rule 113 (Marker -> empty .)
    WHILE           reduce using rule 113 (Marker -> empty .)
    FOR             reduce using rule 113 (Marker -> empty .)
    PRINT           reduce using rule 113 (Marker -> empty .)
    SUB             reduce using rule 113 (Marker -> empty .)
    LAST            reduce using rule 113 (Marker -> empty .)
    NEXT            reduce using rule 113 (Marker -> empty .)
    IF              reduce using rule 113 (Marker -> empty .)
    USE             reduce using rule 113 (Marker -> empty .)
    UNTIL           reduce using rule 113 (Marker -> empty .)
    DO              reduce using rule 113 (Marker -> empty .)
    SWITCH          reduce using rule 113 (Marker -> empty .)
    PLUS_OP         reduce using rule 113 (Marker -> empty .)
    MINUS_OP        reduce using rule 113 (Marker -> empty .)
    BIT_FLIP        reduce using rule 113 (Marker -> empty .)
    NOT_OP          reduce using rule 113 (Marker -> empty .)
    OPEN_PARANTHESIS reduce using rule 113 (Marker -> empty .)
    NUMBER          reduce using rule 113 (Marker -> empty .)
    SCI_NOT         reduce using rule 113 (Marker -> empty .)
    FLOAT           reduce using rule 113 (Marker -> empty .)
    HEXADECIMAL     reduce using rule 113 (Marker -> empty .)
    OCTAL           reduce using rule 113 (Marker -> empty .)
    STRING          reduce using rule 113 (Marker -> empty .)
    RES_STRING      reduce using rule 113 (Marker -> empty .)
    SEMICOLON       reduce using rule 113 (Marker -> empty .)
    QUESTION_MARK   reduce using rule 113 (Marker -> empty .)
    OR_STR_OP       reduce using rule 113 (Marker -> empty .)
    XOR_STR_OP      reduce using rule 113 (Marker -> empty .)
    AND_STR_OP      reduce using rule 113 (Marker -> empty .)
    NOT_STR_OP      reduce using rule 113 (Marker -> empty .)
    COMPARE_OP      reduce using rule 113 (Marker -> empty .)
    BIT_OR          reduce using rule 113 (Marker -> empty .)
    BIT_XOR         reduce using rule 113 (Marker -> empty .)
    BIT_AND         reduce using rule 113 (Marker -> empty .)
    AND_OP          reduce using rule 113 (Marker -> empty .)
    OR_OP           reduce using rule 113 (Marker -> empty .)
    EQUALS_OP       reduce using rule 113 (Marker -> empty .)
    NOT_EQUALS_OP   reduce using rule 113 (Marker -> empty .)
    GREATER_OP      reduce using rule 113 (Marker -> empty .)
    LESS_OP         reduce using rule 113 (Marker -> empty .)
    GREATER_EQUAL_OP reduce using rule 113 (Marker -> empty .)
    LESS_EQUAL_OP   reduce using rule 113 (Marker -> empty .)
    MULTIPLICATION_OP reduce using rule 113 (Marker -> empty .)
    DIVISION_OP     reduce using rule 113 (Marker -> empty .)
    MODULUS_OP      reduce using rule 113 (Marker -> empty .)
    EXPONENT_OP     reduce using rule 113 (Marker -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 113 (Marker -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 113 (Marker -> empty .)
    CONCATENATE     reduce using rule 113 (Marker -> empty .)
    REP_OP          reduce using rule 113 (Marker -> empty .)
    ASSOCIATE_OP    reduce using rule 113 (Marker -> empty .)
    RANGE_OP        reduce using rule 113 (Marker -> empty .)
    SEARCH_MODIFY   reduce using rule 113 (Marker -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 113 (Marker -> empty .)
    $end            reduce using rule 113 (Marker -> empty .)
    BLOCK_ENDS      reduce using rule 113 (Marker -> empty .)
    CLOSE_PARANTHESIS reduce using rule 113 (Marker -> empty .)
    BLOCK_BEGIN     reduce using rule 113 (Marker -> empty .)
    COLON           reduce using rule 113 (Marker -> empty .)
    COMMA           reduce using rule 113 (Marker -> empty .)


state 61

    (87) term -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 145


state 62

    (95) expression -> empty .

    OR_STR_OP       reduce using rule 95 (expression -> empty .)
    XOR_STR_OP      reduce using rule 95 (expression -> empty .)
    AND_STR_OP      reduce using rule 95 (expression -> empty .)
    NOT_STR_OP      reduce using rule 95 (expression -> empty .)
    COMPARE_OP      reduce using rule 95 (expression -> empty .)
    BIT_OR          reduce using rule 95 (expression -> empty .)
    BIT_XOR         reduce using rule 95 (expression -> empty .)
    BIT_AND         reduce using rule 95 (expression -> empty .)
    AND_OP          reduce using rule 95 (expression -> empty .)
    OR_OP           reduce using rule 95 (expression -> empty .)
    EQUALS_OP       reduce using rule 95 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 95 (expression -> empty .)
    GREATER_OP      reduce using rule 95 (expression -> empty .)
    LESS_OP         reduce using rule 95 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 95 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 95 (expression -> empty .)
    PLUS_OP         reduce using rule 95 (expression -> empty .)
    MINUS_OP        reduce using rule 95 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 95 (expression -> empty .)
    DIVISION_OP     reduce using rule 95 (expression -> empty .)
    MODULUS_OP      reduce using rule 95 (expression -> empty .)
    EXPONENT_OP     reduce using rule 95 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 95 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 95 (expression -> empty .)
    CONCATENATE     reduce using rule 95 (expression -> empty .)
    REP_OP          reduce using rule 95 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 95 (expression -> empty .)
    RANGE_OP        reduce using rule 95 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 95 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 95 (expression -> empty .)
    QUESTION_MARK   reduce using rule 95 (expression -> empty .)
    CLOSE_PARANTHESIS reduce using rule 95 (expression -> empty .)
    SEMICOLON       reduce using rule 95 (expression -> empty .)
    BLOCK_BEGIN     reduce using rule 95 (expression -> empty .)
    COLON           reduce using rule 95 (expression -> empty .)
    COMMA           reduce using rule 95 (expression -> empty .)


state 63

    (75) term -> functionCall .

    OR_STR_OP       reduce using rule 75 (term -> functionCall .)
    XOR_STR_OP      reduce using rule 75 (term -> functionCall .)
    AND_STR_OP      reduce using rule 75 (term -> functionCall .)
    NOT_STR_OP      reduce using rule 75 (term -> functionCall .)
    COMPARE_OP      reduce using rule 75 (term -> functionCall .)
    BIT_OR          reduce using rule 75 (term -> functionCall .)
    BIT_XOR         reduce using rule 75 (term -> functionCall .)
    BIT_AND         reduce using rule 75 (term -> functionCall .)
    AND_OP          reduce using rule 75 (term -> functionCall .)
    OR_OP           reduce using rule 75 (term -> functionCall .)
    EQUALS_OP       reduce using rule 75 (term -> functionCall .)
    NOT_EQUALS_OP   reduce using rule 75 (term -> functionCall .)
    GREATER_OP      reduce using rule 75 (term -> functionCall .)
    LESS_OP         reduce using rule 75 (term -> functionCall .)
    GREATER_EQUAL_OP reduce using rule 75 (term -> functionCall .)
    LESS_EQUAL_OP   reduce using rule 75 (term -> functionCall .)
    PLUS_OP         reduce using rule 75 (term -> functionCall .)
    MINUS_OP        reduce using rule 75 (term -> functionCall .)
    MULTIPLICATION_OP reduce using rule 75 (term -> functionCall .)
    DIVISION_OP     reduce using rule 75 (term -> functionCall .)
    MODULUS_OP      reduce using rule 75 (term -> functionCall .)
    EXPONENT_OP     reduce using rule 75 (term -> functionCall .)
    BIT_RIGHT_SHIFT reduce using rule 75 (term -> functionCall .)
    BIT_LEFT_SHIFT  reduce using rule 75 (term -> functionCall .)
    CONCATENATE     reduce using rule 75 (term -> functionCall .)
    REP_OP          reduce using rule 75 (term -> functionCall .)
    ASSOCIATE_OP    reduce using rule 75 (term -> functionCall .)
    RANGE_OP        reduce using rule 75 (term -> functionCall .)
    SEARCH_MODIFY   reduce using rule 75 (term -> functionCall .)
    SEARCH_MODIFY_NEG reduce using rule 75 (term -> functionCall .)
    CLOSE_PARANTHESIS reduce using rule 75 (term -> functionCall .)
    QUESTION_MARK   reduce using rule 75 (term -> functionCall .)
    SEMICOLON       reduce using rule 75 (term -> functionCall .)
    BLOCK_BEGIN     reduce using rule 75 (term -> functionCall .)
    COLON           reduce using rule 75 (term -> functionCall .)
    COMMA           reduce using rule 75 (term -> functionCall .)


state 64

    (85) term -> VARIABLE .

    OR_STR_OP       reduce using rule 85 (term -> VARIABLE .)
    XOR_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    AND_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    NOT_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    COMPARE_OP      reduce using rule 85 (term -> VARIABLE .)
    BIT_OR          reduce using rule 85 (term -> VARIABLE .)
    BIT_XOR         reduce using rule 85 (term -> VARIABLE .)
    BIT_AND         reduce using rule 85 (term -> VARIABLE .)
    AND_OP          reduce using rule 85 (term -> VARIABLE .)
    OR_OP           reduce using rule 85 (term -> VARIABLE .)
    EQUALS_OP       reduce using rule 85 (term -> VARIABLE .)
    NOT_EQUALS_OP   reduce using rule 85 (term -> VARIABLE .)
    GREATER_OP      reduce using rule 85 (term -> VARIABLE .)
    LESS_OP         reduce using rule 85 (term -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 85 (term -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 85 (term -> VARIABLE .)
    PLUS_OP         reduce using rule 85 (term -> VARIABLE .)
    MINUS_OP        reduce using rule 85 (term -> VARIABLE .)
    MULTIPLICATION_OP reduce using rule 85 (term -> VARIABLE .)
    DIVISION_OP     reduce using rule 85 (term -> VARIABLE .)
    MODULUS_OP      reduce using rule 85 (term -> VARIABLE .)
    EXPONENT_OP     reduce using rule 85 (term -> VARIABLE .)
    BIT_RIGHT_SHIFT reduce using rule 85 (term -> VARIABLE .)
    BIT_LEFT_SHIFT  reduce using rule 85 (term -> VARIABLE .)
    CONCATENATE     reduce using rule 85 (term -> VARIABLE .)
    REP_OP          reduce using rule 85 (term -> VARIABLE .)
    ASSOCIATE_OP    reduce using rule 85 (term -> VARIABLE .)
    RANGE_OP        reduce using rule 85 (term -> VARIABLE .)
    SEARCH_MODIFY   reduce using rule 85 (term -> VARIABLE .)
    SEARCH_MODIFY_NEG reduce using rule 85 (term -> VARIABLE .)
    CLOSE_PARANTHESIS reduce using rule 85 (term -> VARIABLE .)
    QUESTION_MARK   reduce using rule 85 (term -> VARIABLE .)
    SEMICOLON       reduce using rule 85 (term -> VARIABLE .)
    BLOCK_BEGIN     reduce using rule 85 (term -> VARIABLE .)
    COLON           reduce using rule 85 (term -> VARIABLE .)
    COMMA           reduce using rule 85 (term -> VARIABLE .)


state 65

    (86) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 146
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 66

    (24) statement -> switchStatement Marker .

    VARIABLE        reduce using rule 24 (statement -> switchStatement Marker .)
    ARRAY           reduce using rule 24 (statement -> switchStatement Marker .)
    LOCAL           reduce using rule 24 (statement -> switchStatement Marker .)
    PRIVATE         reduce using rule 24 (statement -> switchStatement Marker .)
    RETURN          reduce using rule 24 (statement -> switchStatement Marker .)
    IDENTIFIER      reduce using rule 24 (statement -> switchStatement Marker .)
    WHILE           reduce using rule 24 (statement -> switchStatement Marker .)
    FOR             reduce using rule 24 (statement -> switchStatement Marker .)
    PRINT           reduce using rule 24 (statement -> switchStatement Marker .)
    SUB             reduce using rule 24 (statement -> switchStatement Marker .)
    LAST            reduce using rule 24 (statement -> switchStatement Marker .)
    NEXT            reduce using rule 24 (statement -> switchStatement Marker .)
    IF              reduce using rule 24 (statement -> switchStatement Marker .)
    USE             reduce using rule 24 (statement -> switchStatement Marker .)
    UNTIL           reduce using rule 24 (statement -> switchStatement Marker .)
    DO              reduce using rule 24 (statement -> switchStatement Marker .)
    SWITCH          reduce using rule 24 (statement -> switchStatement Marker .)
    PLUS_OP         reduce using rule 24 (statement -> switchStatement Marker .)
    MINUS_OP        reduce using rule 24 (statement -> switchStatement Marker .)
    BIT_FLIP        reduce using rule 24 (statement -> switchStatement Marker .)
    NOT_OP          reduce using rule 24 (statement -> switchStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 24 (statement -> switchStatement Marker .)
    NUMBER          reduce using rule 24 (statement -> switchStatement Marker .)
    SCI_NOT         reduce using rule 24 (statement -> switchStatement Marker .)
    FLOAT           reduce using rule 24 (statement -> switchStatement Marker .)
    HEXADECIMAL     reduce using rule 24 (statement -> switchStatement Marker .)
    OCTAL           reduce using rule 24 (statement -> switchStatement Marker .)
    STRING          reduce using rule 24 (statement -> switchStatement Marker .)
    RES_STRING      reduce using rule 24 (statement -> switchStatement Marker .)
    SEMICOLON       reduce using rule 24 (statement -> switchStatement Marker .)
    QUESTION_MARK   reduce using rule 24 (statement -> switchStatement Marker .)
    OR_STR_OP       reduce using rule 24 (statement -> switchStatement Marker .)
    XOR_STR_OP      reduce using rule 24 (statement -> switchStatement Marker .)
    AND_STR_OP      reduce using rule 24 (statement -> switchStatement Marker .)
    NOT_STR_OP      reduce using rule 24 (statement -> switchStatement Marker .)
    COMPARE_OP      reduce using rule 24 (statement -> switchStatement Marker .)
    BIT_OR          reduce using rule 24 (statement -> switchStatement Marker .)
    BIT_XOR         reduce using rule 24 (statement -> switchStatement Marker .)
    BIT_AND         reduce using rule 24 (statement -> switchStatement Marker .)
    AND_OP          reduce using rule 24 (statement -> switchStatement Marker .)
    OR_OP           reduce using rule 24 (statement -> switchStatement Marker .)
    EQUALS_OP       reduce using rule 24 (statement -> switchStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 24 (statement -> switchStatement Marker .)
    GREATER_OP      reduce using rule 24 (statement -> switchStatement Marker .)
    LESS_OP         reduce using rule 24 (statement -> switchStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 24 (statement -> switchStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 24 (statement -> switchStatement Marker .)
    MULTIPLICATION_OP reduce using rule 24 (statement -> switchStatement Marker .)
    DIVISION_OP     reduce using rule 24 (statement -> switchStatement Marker .)
    MODULUS_OP      reduce using rule 24 (statement -> switchStatement Marker .)
    EXPONENT_OP     reduce using rule 24 (statement -> switchStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 24 (statement -> switchStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 24 (statement -> switchStatement Marker .)
    CONCATENATE     reduce using rule 24 (statement -> switchStatement Marker .)
    REP_OP          reduce using rule 24 (statement -> switchStatement Marker .)
    ASSOCIATE_OP    reduce using rule 24 (statement -> switchStatement Marker .)
    RANGE_OP        reduce using rule 24 (statement -> switchStatement Marker .)
    SEARCH_MODIFY   reduce using rule 24 (statement -> switchStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 24 (statement -> switchStatement Marker .)
    $end            reduce using rule 24 (statement -> switchStatement Marker .)
    BLOCK_ENDS      reduce using rule 24 (statement -> switchStatement Marker .)


state 67

    (94) expression -> NOT_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 94 (expression -> NOT_OP expression .)
    XOR_STR_OP      reduce using rule 94 (expression -> NOT_OP expression .)
    AND_STR_OP      reduce using rule 94 (expression -> NOT_OP expression .)
    NOT_STR_OP      reduce using rule 94 (expression -> NOT_OP expression .)
    COMPARE_OP      reduce using rule 94 (expression -> NOT_OP expression .)
    BIT_OR          reduce using rule 94 (expression -> NOT_OP expression .)
    BIT_XOR         reduce using rule 94 (expression -> NOT_OP expression .)
    BIT_AND         reduce using rule 94 (expression -> NOT_OP expression .)
    AND_OP          reduce using rule 94 (expression -> NOT_OP expression .)
    OR_OP           reduce using rule 94 (expression -> NOT_OP expression .)
    EQUALS_OP       reduce using rule 94 (expression -> NOT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 94 (expression -> NOT_OP expression .)
    GREATER_OP      reduce using rule 94 (expression -> NOT_OP expression .)
    LESS_OP         reduce using rule 94 (expression -> NOT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 94 (expression -> NOT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 94 (expression -> NOT_OP expression .)
    PLUS_OP         reduce using rule 94 (expression -> NOT_OP expression .)
    MINUS_OP        reduce using rule 94 (expression -> NOT_OP expression .)
    MULTIPLICATION_OP reduce using rule 94 (expression -> NOT_OP expression .)
    DIVISION_OP     reduce using rule 94 (expression -> NOT_OP expression .)
    MODULUS_OP      reduce using rule 94 (expression -> NOT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 94 (expression -> NOT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 94 (expression -> NOT_OP expression .)
    CONCATENATE     reduce using rule 94 (expression -> NOT_OP expression .)
    REP_OP          reduce using rule 94 (expression -> NOT_OP expression .)
    ASSOCIATE_OP    reduce using rule 94 (expression -> NOT_OP expression .)
    RANGE_OP        reduce using rule 94 (expression -> NOT_OP expression .)
    SEARCH_MODIFY   reduce using rule 94 (expression -> NOT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 94 (expression -> NOT_OP expression .)
    QUESTION_MARK   reduce using rule 94 (expression -> NOT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 94 (expression -> NOT_OP expression .)
    SEMICOLON       reduce using rule 94 (expression -> NOT_OP expression .)
    BLOCK_BEGIN     reduce using rule 94 (expression -> NOT_OP expression .)
    COLON           reduce using rule 94 (expression -> NOT_OP expression .)
    COMMA           reduce using rule 94 (expression -> NOT_OP expression .)
    EXPONENT_OP     shift and go to state 88

  ! EXPONENT_OP     [ reduce using rule 94 (expression -> NOT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]
  ! SEARCH_MODIFY   [ shift and go to state 83 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 111 ]


state 68

    (46) lastStatement -> LAST SEMICOLON .

    VARIABLE        reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    ARRAY           reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    LOCAL           reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    PRIVATE         reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    RETURN          reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    WHILE           reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    FOR             reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    PRINT           reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    SUB             reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    LAST            reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    NEXT            reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    IF              reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    USE             reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    UNTIL           reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    DO              reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    SWITCH          reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    PLUS_OP         reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    MINUS_OP        reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    BIT_FLIP        reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    NOT_OP          reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    NUMBER          reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    SCI_NOT         reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    FLOAT           reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    HEXADECIMAL     reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    OCTAL           reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    STRING          reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    RES_STRING      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    SEMICOLON       reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    QUESTION_MARK   reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    OR_STR_OP       reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    XOR_STR_OP      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    AND_STR_OP      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    NOT_STR_OP      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    COMPARE_OP      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    BIT_OR          reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    BIT_XOR         reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    BIT_AND         reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    AND_OP          reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    OR_OP           reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    EQUALS_OP       reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    GREATER_OP      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    LESS_OP         reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    DIVISION_OP     reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    MODULUS_OP      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    EXPONENT_OP     reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    CONCATENATE     reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    REP_OP          reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    RANGE_OP        reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    $end            reduce using rule 46 (lastStatement -> LAST SEMICOLON .)
    BLOCK_ENDS      reduce using rule 46 (lastStatement -> LAST SEMICOLON .)


state 69

    (47) nextStatement -> NEXT SEMICOLON .

    VARIABLE        reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    ARRAY           reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    LOCAL           reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    PRIVATE         reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    RETURN          reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    IDENTIFIER      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    WHILE           reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    FOR             reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    PRINT           reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    SUB             reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    LAST            reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    NEXT            reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    IF              reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    USE             reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    UNTIL           reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    DO              reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    SWITCH          reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    PLUS_OP         reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    MINUS_OP        reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    BIT_FLIP        reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    NOT_OP          reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    NUMBER          reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    SCI_NOT         reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    FLOAT           reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    HEXADECIMAL     reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    OCTAL           reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    STRING          reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    RES_STRING      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    SEMICOLON       reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    QUESTION_MARK   reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    OR_STR_OP       reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    XOR_STR_OP      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    AND_STR_OP      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    NOT_STR_OP      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    COMPARE_OP      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    BIT_OR          reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    BIT_XOR         reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    BIT_AND         reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    AND_OP          reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    OR_OP           reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    EQUALS_OP       reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    GREATER_OP      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    LESS_OP         reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    DIVISION_OP     reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    MODULUS_OP      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    EXPONENT_OP     reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    CONCATENATE     reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    REP_OP          reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    RANGE_OP        reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    BLOCK_ENDS      reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)
    $end            reduce using rule 47 (nextStatement -> NEXT SEMICOLON .)


state 70

    (25) statement -> ternaryStatement Marker . SEMICOLON

    SEMICOLON       shift and go to state 147


state 71

    (19) statement -> ifthenelse Marker .

    VARIABLE        reduce using rule 19 (statement -> ifthenelse Marker .)
    ARRAY           reduce using rule 19 (statement -> ifthenelse Marker .)
    LOCAL           reduce using rule 19 (statement -> ifthenelse Marker .)
    PRIVATE         reduce using rule 19 (statement -> ifthenelse Marker .)
    RETURN          reduce using rule 19 (statement -> ifthenelse Marker .)
    IDENTIFIER      reduce using rule 19 (statement -> ifthenelse Marker .)
    WHILE           reduce using rule 19 (statement -> ifthenelse Marker .)
    FOR             reduce using rule 19 (statement -> ifthenelse Marker .)
    PRINT           reduce using rule 19 (statement -> ifthenelse Marker .)
    SUB             reduce using rule 19 (statement -> ifthenelse Marker .)
    LAST            reduce using rule 19 (statement -> ifthenelse Marker .)
    NEXT            reduce using rule 19 (statement -> ifthenelse Marker .)
    IF              reduce using rule 19 (statement -> ifthenelse Marker .)
    USE             reduce using rule 19 (statement -> ifthenelse Marker .)
    UNTIL           reduce using rule 19 (statement -> ifthenelse Marker .)
    DO              reduce using rule 19 (statement -> ifthenelse Marker .)
    SWITCH          reduce using rule 19 (statement -> ifthenelse Marker .)
    PLUS_OP         reduce using rule 19 (statement -> ifthenelse Marker .)
    MINUS_OP        reduce using rule 19 (statement -> ifthenelse Marker .)
    BIT_FLIP        reduce using rule 19 (statement -> ifthenelse Marker .)
    NOT_OP          reduce using rule 19 (statement -> ifthenelse Marker .)
    OPEN_PARANTHESIS reduce using rule 19 (statement -> ifthenelse Marker .)
    NUMBER          reduce using rule 19 (statement -> ifthenelse Marker .)
    SCI_NOT         reduce using rule 19 (statement -> ifthenelse Marker .)
    FLOAT           reduce using rule 19 (statement -> ifthenelse Marker .)
    HEXADECIMAL     reduce using rule 19 (statement -> ifthenelse Marker .)
    OCTAL           reduce using rule 19 (statement -> ifthenelse Marker .)
    STRING          reduce using rule 19 (statement -> ifthenelse Marker .)
    RES_STRING      reduce using rule 19 (statement -> ifthenelse Marker .)
    SEMICOLON       reduce using rule 19 (statement -> ifthenelse Marker .)
    QUESTION_MARK   reduce using rule 19 (statement -> ifthenelse Marker .)
    OR_STR_OP       reduce using rule 19 (statement -> ifthenelse Marker .)
    XOR_STR_OP      reduce using rule 19 (statement -> ifthenelse Marker .)
    AND_STR_OP      reduce using rule 19 (statement -> ifthenelse Marker .)
    NOT_STR_OP      reduce using rule 19 (statement -> ifthenelse Marker .)
    COMPARE_OP      reduce using rule 19 (statement -> ifthenelse Marker .)
    BIT_OR          reduce using rule 19 (statement -> ifthenelse Marker .)
    BIT_XOR         reduce using rule 19 (statement -> ifthenelse Marker .)
    BIT_AND         reduce using rule 19 (statement -> ifthenelse Marker .)
    AND_OP          reduce using rule 19 (statement -> ifthenelse Marker .)
    OR_OP           reduce using rule 19 (statement -> ifthenelse Marker .)
    EQUALS_OP       reduce using rule 19 (statement -> ifthenelse Marker .)
    NOT_EQUALS_OP   reduce using rule 19 (statement -> ifthenelse Marker .)
    GREATER_OP      reduce using rule 19 (statement -> ifthenelse Marker .)
    LESS_OP         reduce using rule 19 (statement -> ifthenelse Marker .)
    GREATER_EQUAL_OP reduce using rule 19 (statement -> ifthenelse Marker .)
    LESS_EQUAL_OP   reduce using rule 19 (statement -> ifthenelse Marker .)
    MULTIPLICATION_OP reduce using rule 19 (statement -> ifthenelse Marker .)
    DIVISION_OP     reduce using rule 19 (statement -> ifthenelse Marker .)
    MODULUS_OP      reduce using rule 19 (statement -> ifthenelse Marker .)
    EXPONENT_OP     reduce using rule 19 (statement -> ifthenelse Marker .)
    BIT_RIGHT_SHIFT reduce using rule 19 (statement -> ifthenelse Marker .)
    BIT_LEFT_SHIFT  reduce using rule 19 (statement -> ifthenelse Marker .)
    CONCATENATE     reduce using rule 19 (statement -> ifthenelse Marker .)
    REP_OP          reduce using rule 19 (statement -> ifthenelse Marker .)
    ASSOCIATE_OP    reduce using rule 19 (statement -> ifthenelse Marker .)
    RANGE_OP        reduce using rule 19 (statement -> ifthenelse Marker .)
    SEARCH_MODIFY   reduce using rule 19 (statement -> ifthenelse Marker .)
    SEARCH_MODIFY_NEG reduce using rule 19 (statement -> ifthenelse Marker .)
    $end            reduce using rule 19 (statement -> ifthenelse Marker .)
    BLOCK_ENDS      reduce using rule 19 (statement -> ifthenelse Marker .)


state 72

    (12) statement -> whileStatement Marker .

    VARIABLE        reduce using rule 12 (statement -> whileStatement Marker .)
    ARRAY           reduce using rule 12 (statement -> whileStatement Marker .)
    LOCAL           reduce using rule 12 (statement -> whileStatement Marker .)
    PRIVATE         reduce using rule 12 (statement -> whileStatement Marker .)
    RETURN          reduce using rule 12 (statement -> whileStatement Marker .)
    IDENTIFIER      reduce using rule 12 (statement -> whileStatement Marker .)
    WHILE           reduce using rule 12 (statement -> whileStatement Marker .)
    FOR             reduce using rule 12 (statement -> whileStatement Marker .)
    PRINT           reduce using rule 12 (statement -> whileStatement Marker .)
    SUB             reduce using rule 12 (statement -> whileStatement Marker .)
    LAST            reduce using rule 12 (statement -> whileStatement Marker .)
    NEXT            reduce using rule 12 (statement -> whileStatement Marker .)
    IF              reduce using rule 12 (statement -> whileStatement Marker .)
    USE             reduce using rule 12 (statement -> whileStatement Marker .)
    UNTIL           reduce using rule 12 (statement -> whileStatement Marker .)
    DO              reduce using rule 12 (statement -> whileStatement Marker .)
    SWITCH          reduce using rule 12 (statement -> whileStatement Marker .)
    PLUS_OP         reduce using rule 12 (statement -> whileStatement Marker .)
    MINUS_OP        reduce using rule 12 (statement -> whileStatement Marker .)
    BIT_FLIP        reduce using rule 12 (statement -> whileStatement Marker .)
    NOT_OP          reduce using rule 12 (statement -> whileStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 12 (statement -> whileStatement Marker .)
    NUMBER          reduce using rule 12 (statement -> whileStatement Marker .)
    SCI_NOT         reduce using rule 12 (statement -> whileStatement Marker .)
    FLOAT           reduce using rule 12 (statement -> whileStatement Marker .)
    HEXADECIMAL     reduce using rule 12 (statement -> whileStatement Marker .)
    OCTAL           reduce using rule 12 (statement -> whileStatement Marker .)
    STRING          reduce using rule 12 (statement -> whileStatement Marker .)
    RES_STRING      reduce using rule 12 (statement -> whileStatement Marker .)
    SEMICOLON       reduce using rule 12 (statement -> whileStatement Marker .)
    QUESTION_MARK   reduce using rule 12 (statement -> whileStatement Marker .)
    OR_STR_OP       reduce using rule 12 (statement -> whileStatement Marker .)
    XOR_STR_OP      reduce using rule 12 (statement -> whileStatement Marker .)
    AND_STR_OP      reduce using rule 12 (statement -> whileStatement Marker .)
    NOT_STR_OP      reduce using rule 12 (statement -> whileStatement Marker .)
    COMPARE_OP      reduce using rule 12 (statement -> whileStatement Marker .)
    BIT_OR          reduce using rule 12 (statement -> whileStatement Marker .)
    BIT_XOR         reduce using rule 12 (statement -> whileStatement Marker .)
    BIT_AND         reduce using rule 12 (statement -> whileStatement Marker .)
    AND_OP          reduce using rule 12 (statement -> whileStatement Marker .)
    OR_OP           reduce using rule 12 (statement -> whileStatement Marker .)
    EQUALS_OP       reduce using rule 12 (statement -> whileStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 12 (statement -> whileStatement Marker .)
    GREATER_OP      reduce using rule 12 (statement -> whileStatement Marker .)
    LESS_OP         reduce using rule 12 (statement -> whileStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 12 (statement -> whileStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 12 (statement -> whileStatement Marker .)
    MULTIPLICATION_OP reduce using rule 12 (statement -> whileStatement Marker .)
    DIVISION_OP     reduce using rule 12 (statement -> whileStatement Marker .)
    MODULUS_OP      reduce using rule 12 (statement -> whileStatement Marker .)
    EXPONENT_OP     reduce using rule 12 (statement -> whileStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 12 (statement -> whileStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 12 (statement -> whileStatement Marker .)
    CONCATENATE     reduce using rule 12 (statement -> whileStatement Marker .)
    REP_OP          reduce using rule 12 (statement -> whileStatement Marker .)
    ASSOCIATE_OP    reduce using rule 12 (statement -> whileStatement Marker .)
    RANGE_OP        reduce using rule 12 (statement -> whileStatement Marker .)
    SEARCH_MODIFY   reduce using rule 12 (statement -> whileStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 12 (statement -> whileStatement Marker .)
    $end            reduce using rule 12 (statement -> whileStatement Marker .)
    BLOCK_ENDS      reduce using rule 12 (statement -> whileStatement Marker .)


state 73

    (11) statement -> functionCall Marker . SEMICOLON

    SEMICOLON       shift and go to state 148


state 74

    (10) statement -> returnStatement Marker .

    VARIABLE        reduce using rule 10 (statement -> returnStatement Marker .)
    ARRAY           reduce using rule 10 (statement -> returnStatement Marker .)
    LOCAL           reduce using rule 10 (statement -> returnStatement Marker .)
    PRIVATE         reduce using rule 10 (statement -> returnStatement Marker .)
    RETURN          reduce using rule 10 (statement -> returnStatement Marker .)
    IDENTIFIER      reduce using rule 10 (statement -> returnStatement Marker .)
    WHILE           reduce using rule 10 (statement -> returnStatement Marker .)
    FOR             reduce using rule 10 (statement -> returnStatement Marker .)
    PRINT           reduce using rule 10 (statement -> returnStatement Marker .)
    SUB             reduce using rule 10 (statement -> returnStatement Marker .)
    LAST            reduce using rule 10 (statement -> returnStatement Marker .)
    NEXT            reduce using rule 10 (statement -> returnStatement Marker .)
    IF              reduce using rule 10 (statement -> returnStatement Marker .)
    USE             reduce using rule 10 (statement -> returnStatement Marker .)
    UNTIL           reduce using rule 10 (statement -> returnStatement Marker .)
    DO              reduce using rule 10 (statement -> returnStatement Marker .)
    SWITCH          reduce using rule 10 (statement -> returnStatement Marker .)
    PLUS_OP         reduce using rule 10 (statement -> returnStatement Marker .)
    MINUS_OP        reduce using rule 10 (statement -> returnStatement Marker .)
    BIT_FLIP        reduce using rule 10 (statement -> returnStatement Marker .)
    NOT_OP          reduce using rule 10 (statement -> returnStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 10 (statement -> returnStatement Marker .)
    NUMBER          reduce using rule 10 (statement -> returnStatement Marker .)
    SCI_NOT         reduce using rule 10 (statement -> returnStatement Marker .)
    FLOAT           reduce using rule 10 (statement -> returnStatement Marker .)
    HEXADECIMAL     reduce using rule 10 (statement -> returnStatement Marker .)
    OCTAL           reduce using rule 10 (statement -> returnStatement Marker .)
    STRING          reduce using rule 10 (statement -> returnStatement Marker .)
    RES_STRING      reduce using rule 10 (statement -> returnStatement Marker .)
    SEMICOLON       reduce using rule 10 (statement -> returnStatement Marker .)
    QUESTION_MARK   reduce using rule 10 (statement -> returnStatement Marker .)
    OR_STR_OP       reduce using rule 10 (statement -> returnStatement Marker .)
    XOR_STR_OP      reduce using rule 10 (statement -> returnStatement Marker .)
    AND_STR_OP      reduce using rule 10 (statement -> returnStatement Marker .)
    NOT_STR_OP      reduce using rule 10 (statement -> returnStatement Marker .)
    COMPARE_OP      reduce using rule 10 (statement -> returnStatement Marker .)
    BIT_OR          reduce using rule 10 (statement -> returnStatement Marker .)
    BIT_XOR         reduce using rule 10 (statement -> returnStatement Marker .)
    BIT_AND         reduce using rule 10 (statement -> returnStatement Marker .)
    AND_OP          reduce using rule 10 (statement -> returnStatement Marker .)
    OR_OP           reduce using rule 10 (statement -> returnStatement Marker .)
    EQUALS_OP       reduce using rule 10 (statement -> returnStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 10 (statement -> returnStatement Marker .)
    GREATER_OP      reduce using rule 10 (statement -> returnStatement Marker .)
    LESS_OP         reduce using rule 10 (statement -> returnStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 10 (statement -> returnStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 10 (statement -> returnStatement Marker .)
    MULTIPLICATION_OP reduce using rule 10 (statement -> returnStatement Marker .)
    DIVISION_OP     reduce using rule 10 (statement -> returnStatement Marker .)
    MODULUS_OP      reduce using rule 10 (statement -> returnStatement Marker .)
    EXPONENT_OP     reduce using rule 10 (statement -> returnStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 10 (statement -> returnStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 10 (statement -> returnStatement Marker .)
    CONCATENATE     reduce using rule 10 (statement -> returnStatement Marker .)
    REP_OP          reduce using rule 10 (statement -> returnStatement Marker .)
    ASSOCIATE_OP    reduce using rule 10 (statement -> returnStatement Marker .)
    RANGE_OP        reduce using rule 10 (statement -> returnStatement Marker .)
    SEARCH_MODIFY   reduce using rule 10 (statement -> returnStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 10 (statement -> returnStatement Marker .)
    $end            reduce using rule 10 (statement -> returnStatement Marker .)
    BLOCK_ENDS      reduce using rule 10 (statement -> returnStatement Marker .)


state 75

    (53) returnStatement -> RETURN expression . SEMICOLON
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 149
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 76

    (23) statement -> inputStatement Marker .

    VARIABLE        reduce using rule 23 (statement -> inputStatement Marker .)
    ARRAY           reduce using rule 23 (statement -> inputStatement Marker .)
    LOCAL           reduce using rule 23 (statement -> inputStatement Marker .)
    PRIVATE         reduce using rule 23 (statement -> inputStatement Marker .)
    RETURN          reduce using rule 23 (statement -> inputStatement Marker .)
    IDENTIFIER      reduce using rule 23 (statement -> inputStatement Marker .)
    WHILE           reduce using rule 23 (statement -> inputStatement Marker .)
    FOR             reduce using rule 23 (statement -> inputStatement Marker .)
    PRINT           reduce using rule 23 (statement -> inputStatement Marker .)
    SUB             reduce using rule 23 (statement -> inputStatement Marker .)
    LAST            reduce using rule 23 (statement -> inputStatement Marker .)
    NEXT            reduce using rule 23 (statement -> inputStatement Marker .)
    IF              reduce using rule 23 (statement -> inputStatement Marker .)
    USE             reduce using rule 23 (statement -> inputStatement Marker .)
    UNTIL           reduce using rule 23 (statement -> inputStatement Marker .)
    DO              reduce using rule 23 (statement -> inputStatement Marker .)
    SWITCH          reduce using rule 23 (statement -> inputStatement Marker .)
    PLUS_OP         reduce using rule 23 (statement -> inputStatement Marker .)
    MINUS_OP        reduce using rule 23 (statement -> inputStatement Marker .)
    BIT_FLIP        reduce using rule 23 (statement -> inputStatement Marker .)
    NOT_OP          reduce using rule 23 (statement -> inputStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 23 (statement -> inputStatement Marker .)
    NUMBER          reduce using rule 23 (statement -> inputStatement Marker .)
    SCI_NOT         reduce using rule 23 (statement -> inputStatement Marker .)
    FLOAT           reduce using rule 23 (statement -> inputStatement Marker .)
    HEXADECIMAL     reduce using rule 23 (statement -> inputStatement Marker .)
    OCTAL           reduce using rule 23 (statement -> inputStatement Marker .)
    STRING          reduce using rule 23 (statement -> inputStatement Marker .)
    RES_STRING      reduce using rule 23 (statement -> inputStatement Marker .)
    SEMICOLON       reduce using rule 23 (statement -> inputStatement Marker .)
    QUESTION_MARK   reduce using rule 23 (statement -> inputStatement Marker .)
    OR_STR_OP       reduce using rule 23 (statement -> inputStatement Marker .)
    XOR_STR_OP      reduce using rule 23 (statement -> inputStatement Marker .)
    AND_STR_OP      reduce using rule 23 (statement -> inputStatement Marker .)
    NOT_STR_OP      reduce using rule 23 (statement -> inputStatement Marker .)
    COMPARE_OP      reduce using rule 23 (statement -> inputStatement Marker .)
    BIT_OR          reduce using rule 23 (statement -> inputStatement Marker .)
    BIT_XOR         reduce using rule 23 (statement -> inputStatement Marker .)
    BIT_AND         reduce using rule 23 (statement -> inputStatement Marker .)
    AND_OP          reduce using rule 23 (statement -> inputStatement Marker .)
    OR_OP           reduce using rule 23 (statement -> inputStatement Marker .)
    EQUALS_OP       reduce using rule 23 (statement -> inputStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 23 (statement -> inputStatement Marker .)
    GREATER_OP      reduce using rule 23 (statement -> inputStatement Marker .)
    LESS_OP         reduce using rule 23 (statement -> inputStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 23 (statement -> inputStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 23 (statement -> inputStatement Marker .)
    MULTIPLICATION_OP reduce using rule 23 (statement -> inputStatement Marker .)
    DIVISION_OP     reduce using rule 23 (statement -> inputStatement Marker .)
    MODULUS_OP      reduce using rule 23 (statement -> inputStatement Marker .)
    EXPONENT_OP     reduce using rule 23 (statement -> inputStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 23 (statement -> inputStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 23 (statement -> inputStatement Marker .)
    CONCATENATE     reduce using rule 23 (statement -> inputStatement Marker .)
    REP_OP          reduce using rule 23 (statement -> inputStatement Marker .)
    ASSOCIATE_OP    reduce using rule 23 (statement -> inputStatement Marker .)
    RANGE_OP        reduce using rule 23 (statement -> inputStatement Marker .)
    SEARCH_MODIFY   reduce using rule 23 (statement -> inputStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 23 (statement -> inputStatement Marker .)
    $end            reduce using rule 23 (statement -> inputStatement Marker .)
    BLOCK_ENDS      reduce using rule 23 (statement -> inputStatement Marker .)


state 77

    (51) printStatement -> PRINT OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS SEMICOLON
    (86) term -> OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 150
    empty                          shift and go to state 62

state 78

    (52) printStatement -> PRINT expression . SEMICOLON
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 151
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 79

    (20) statement -> useStatement Marker .

    VARIABLE        reduce using rule 20 (statement -> useStatement Marker .)
    ARRAY           reduce using rule 20 (statement -> useStatement Marker .)
    LOCAL           reduce using rule 20 (statement -> useStatement Marker .)
    PRIVATE         reduce using rule 20 (statement -> useStatement Marker .)
    RETURN          reduce using rule 20 (statement -> useStatement Marker .)
    IDENTIFIER      reduce using rule 20 (statement -> useStatement Marker .)
    WHILE           reduce using rule 20 (statement -> useStatement Marker .)
    FOR             reduce using rule 20 (statement -> useStatement Marker .)
    PRINT           reduce using rule 20 (statement -> useStatement Marker .)
    SUB             reduce using rule 20 (statement -> useStatement Marker .)
    LAST            reduce using rule 20 (statement -> useStatement Marker .)
    NEXT            reduce using rule 20 (statement -> useStatement Marker .)
    IF              reduce using rule 20 (statement -> useStatement Marker .)
    USE             reduce using rule 20 (statement -> useStatement Marker .)
    UNTIL           reduce using rule 20 (statement -> useStatement Marker .)
    DO              reduce using rule 20 (statement -> useStatement Marker .)
    SWITCH          reduce using rule 20 (statement -> useStatement Marker .)
    PLUS_OP         reduce using rule 20 (statement -> useStatement Marker .)
    MINUS_OP        reduce using rule 20 (statement -> useStatement Marker .)
    BIT_FLIP        reduce using rule 20 (statement -> useStatement Marker .)
    NOT_OP          reduce using rule 20 (statement -> useStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 20 (statement -> useStatement Marker .)
    NUMBER          reduce using rule 20 (statement -> useStatement Marker .)
    SCI_NOT         reduce using rule 20 (statement -> useStatement Marker .)
    FLOAT           reduce using rule 20 (statement -> useStatement Marker .)
    HEXADECIMAL     reduce using rule 20 (statement -> useStatement Marker .)
    OCTAL           reduce using rule 20 (statement -> useStatement Marker .)
    STRING          reduce using rule 20 (statement -> useStatement Marker .)
    RES_STRING      reduce using rule 20 (statement -> useStatement Marker .)
    SEMICOLON       reduce using rule 20 (statement -> useStatement Marker .)
    QUESTION_MARK   reduce using rule 20 (statement -> useStatement Marker .)
    OR_STR_OP       reduce using rule 20 (statement -> useStatement Marker .)
    XOR_STR_OP      reduce using rule 20 (statement -> useStatement Marker .)
    AND_STR_OP      reduce using rule 20 (statement -> useStatement Marker .)
    NOT_STR_OP      reduce using rule 20 (statement -> useStatement Marker .)
    COMPARE_OP      reduce using rule 20 (statement -> useStatement Marker .)
    BIT_OR          reduce using rule 20 (statement -> useStatement Marker .)
    BIT_XOR         reduce using rule 20 (statement -> useStatement Marker .)
    BIT_AND         reduce using rule 20 (statement -> useStatement Marker .)
    AND_OP          reduce using rule 20 (statement -> useStatement Marker .)
    OR_OP           reduce using rule 20 (statement -> useStatement Marker .)
    EQUALS_OP       reduce using rule 20 (statement -> useStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 20 (statement -> useStatement Marker .)
    GREATER_OP      reduce using rule 20 (statement -> useStatement Marker .)
    LESS_OP         reduce using rule 20 (statement -> useStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 20 (statement -> useStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 20 (statement -> useStatement Marker .)
    MULTIPLICATION_OP reduce using rule 20 (statement -> useStatement Marker .)
    DIVISION_OP     reduce using rule 20 (statement -> useStatement Marker .)
    MODULUS_OP      reduce using rule 20 (statement -> useStatement Marker .)
    EXPONENT_OP     reduce using rule 20 (statement -> useStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 20 (statement -> useStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 20 (statement -> useStatement Marker .)
    CONCATENATE     reduce using rule 20 (statement -> useStatement Marker .)
    REP_OP          reduce using rule 20 (statement -> useStatement Marker .)
    ASSOCIATE_OP    reduce using rule 20 (statement -> useStatement Marker .)
    RANGE_OP        reduce using rule 20 (statement -> useStatement Marker .)
    SEARCH_MODIFY   reduce using rule 20 (statement -> useStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 20 (statement -> useStatement Marker .)
    $end            reduce using rule 20 (statement -> useStatement Marker .)
    BLOCK_ENDS      reduce using rule 20 (statement -> useStatement Marker .)


state 80

    (14) statement -> printStatement Marker .

    VARIABLE        reduce using rule 14 (statement -> printStatement Marker .)
    ARRAY           reduce using rule 14 (statement -> printStatement Marker .)
    LOCAL           reduce using rule 14 (statement -> printStatement Marker .)
    PRIVATE         reduce using rule 14 (statement -> printStatement Marker .)
    RETURN          reduce using rule 14 (statement -> printStatement Marker .)
    IDENTIFIER      reduce using rule 14 (statement -> printStatement Marker .)
    WHILE           reduce using rule 14 (statement -> printStatement Marker .)
    FOR             reduce using rule 14 (statement -> printStatement Marker .)
    PRINT           reduce using rule 14 (statement -> printStatement Marker .)
    SUB             reduce using rule 14 (statement -> printStatement Marker .)
    LAST            reduce using rule 14 (statement -> printStatement Marker .)
    NEXT            reduce using rule 14 (statement -> printStatement Marker .)
    IF              reduce using rule 14 (statement -> printStatement Marker .)
    USE             reduce using rule 14 (statement -> printStatement Marker .)
    UNTIL           reduce using rule 14 (statement -> printStatement Marker .)
    DO              reduce using rule 14 (statement -> printStatement Marker .)
    SWITCH          reduce using rule 14 (statement -> printStatement Marker .)
    PLUS_OP         reduce using rule 14 (statement -> printStatement Marker .)
    MINUS_OP        reduce using rule 14 (statement -> printStatement Marker .)
    BIT_FLIP        reduce using rule 14 (statement -> printStatement Marker .)
    NOT_OP          reduce using rule 14 (statement -> printStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 14 (statement -> printStatement Marker .)
    NUMBER          reduce using rule 14 (statement -> printStatement Marker .)
    SCI_NOT         reduce using rule 14 (statement -> printStatement Marker .)
    FLOAT           reduce using rule 14 (statement -> printStatement Marker .)
    HEXADECIMAL     reduce using rule 14 (statement -> printStatement Marker .)
    OCTAL           reduce using rule 14 (statement -> printStatement Marker .)
    STRING          reduce using rule 14 (statement -> printStatement Marker .)
    RES_STRING      reduce using rule 14 (statement -> printStatement Marker .)
    SEMICOLON       reduce using rule 14 (statement -> printStatement Marker .)
    QUESTION_MARK   reduce using rule 14 (statement -> printStatement Marker .)
    OR_STR_OP       reduce using rule 14 (statement -> printStatement Marker .)
    XOR_STR_OP      reduce using rule 14 (statement -> printStatement Marker .)
    AND_STR_OP      reduce using rule 14 (statement -> printStatement Marker .)
    NOT_STR_OP      reduce using rule 14 (statement -> printStatement Marker .)
    COMPARE_OP      reduce using rule 14 (statement -> printStatement Marker .)
    BIT_OR          reduce using rule 14 (statement -> printStatement Marker .)
    BIT_XOR         reduce using rule 14 (statement -> printStatement Marker .)
    BIT_AND         reduce using rule 14 (statement -> printStatement Marker .)
    AND_OP          reduce using rule 14 (statement -> printStatement Marker .)
    OR_OP           reduce using rule 14 (statement -> printStatement Marker .)
    EQUALS_OP       reduce using rule 14 (statement -> printStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 14 (statement -> printStatement Marker .)
    GREATER_OP      reduce using rule 14 (statement -> printStatement Marker .)
    LESS_OP         reduce using rule 14 (statement -> printStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 14 (statement -> printStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 14 (statement -> printStatement Marker .)
    MULTIPLICATION_OP reduce using rule 14 (statement -> printStatement Marker .)
    DIVISION_OP     reduce using rule 14 (statement -> printStatement Marker .)
    MODULUS_OP      reduce using rule 14 (statement -> printStatement Marker .)
    EXPONENT_OP     reduce using rule 14 (statement -> printStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 14 (statement -> printStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 14 (statement -> printStatement Marker .)
    CONCATENATE     reduce using rule 14 (statement -> printStatement Marker .)
    REP_OP          reduce using rule 14 (statement -> printStatement Marker .)
    ASSOCIATE_OP    reduce using rule 14 (statement -> printStatement Marker .)
    RANGE_OP        reduce using rule 14 (statement -> printStatement Marker .)
    SEARCH_MODIFY   reduce using rule 14 (statement -> printStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 14 (statement -> printStatement Marker .)
    $end            reduce using rule 14 (statement -> printStatement Marker .)
    BLOCK_ENDS      reduce using rule 14 (statement -> printStatement Marker .)


state 81

    (65) forStatement -> FOR OPEN_PARANTHESIS . assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR OPEN_PARANTHESIS . assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (54) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (55) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (56) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression
    (57) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression
    (58) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression
    (69) assignment -> . empty
    (6) empty -> .

    VARIABLE        shift and go to state 154
    ARRAY           shift and go to state 157
    LOCAL           shift and go to state 153
    PRIVATE         shift and go to state 156
    SEMICOLON       reduce using rule 6 (empty -> .)

    assignment                     shift and go to state 152
    empty                          shift and go to state 155

state 82

    (63) untillStatement -> UNTIL Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block

    OPEN_PARANTHESIS shift and go to state 158


state 83

    (126) expression -> expression SEARCH_MODIFY . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 159
    empty                          shift and go to state 62

state 84

    (112) expression -> expression LESS_EQUAL_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 160
    empty                          shift and go to state 62

state 85

    (107) expression -> expression EQUALS_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 161
    empty                          shift and go to state 62

state 86

    (101) expression -> expression COMPARE_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 162
    empty                          shift and go to state 62

state 87

    (108) expression -> expression NOT_EQUALS_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 163
    empty                          shift and go to state 62

state 88

    (119) expression -> expression EXPONENT_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 164
    empty                          shift and go to state 62

state 89

    (100) expression -> expression NOT_STR_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 165
    empty                          shift and go to state 62

state 90

    (117) expression -> expression DIVISION_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 166
    empty                          shift and go to state 62

state 91

    (125) expression -> expression RANGE_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 167
    empty                          shift and go to state 62

state 92

    (103) expression -> expression BIT_XOR . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 168
    empty                          shift and go to state 62

state 93

    (115) expression -> expression MINUS_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 169
    empty                          shift and go to state 62

state 94

    (114) expression -> expression PLUS_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 170
    empty                          shift and go to state 62

state 95

    (26) ternaryStatement -> expression QUESTION_MARK . Marker_true Marker expression COLON Marker_false expression
    (27) ternaryStatement -> expression QUESTION_MARK . Marker_true Marker assignment COLON Marker_false assignment
    (28) Marker_true -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)

    Marker_true                    shift and go to state 171
    empty                          shift and go to state 172

state 96

    (106) expression -> expression OR_OP . Marker expression
    (113) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 173
    empty                          shift and go to state 60

state 97

    (110) expression -> expression LESS_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 174
    empty                          shift and go to state 62

state 98

    (118) expression -> expression MODULUS_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 175
    empty                          shift and go to state 62

state 99

    (116) expression -> expression MULTIPLICATION_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 176
    empty                          shift and go to state 62

state 100

    (111) expression -> expression GREATER_EQUAL_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 177
    empty                          shift and go to state 62

state 101

    (98) expression -> expression XOR_STR_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 178
    empty                          shift and go to state 62

state 102

    (104) expression -> expression BIT_AND . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 179
    empty                          shift and go to state 62

state 103

    (124) expression -> expression ASSOCIATE_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 180
    empty                          shift and go to state 62

state 104

    (97) expression -> expression OR_STR_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 181
    empty                          shift and go to state 62

state 105

    (105) expression -> expression AND_OP . Marker expression
    (113) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 182
    empty                          shift and go to state 60

state 106

    (121) expression -> expression BIT_LEFT_SHIFT . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 183
    empty                          shift and go to state 62

state 107

    (123) expression -> expression REP_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 184
    empty                          shift and go to state 62

state 108

    (122) expression -> expression CONCATENATE . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 185
    empty                          shift and go to state 62

state 109

    (120) expression -> expression BIT_RIGHT_SHIFT . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 186
    empty                          shift and go to state 62

state 110

    (102) expression -> expression BIT_OR . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 187
    empty                          shift and go to state 62

state 111

    (127) expression -> expression SEARCH_MODIFY_NEG . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 188
    empty                          shift and go to state 62

state 112

    (109) expression -> expression GREATER_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 189
    empty                          shift and go to state 62

state 113

    (99) expression -> expression AND_STR_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 190
    empty                          shift and go to state 62

state 114

    (48) functionStatement -> SUB IDENTIFIER . Markerscope block
    (49) Markerscope -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerscope                    shift and go to state 191
    empty                          shift and go to state 192

state 115

    (92) expression -> MINUS_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 92 (expression -> MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 92 (expression -> MINUS_OP expression .)
    AND_STR_OP      reduce using rule 92 (expression -> MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 92 (expression -> MINUS_OP expression .)
    COMPARE_OP      reduce using rule 92 (expression -> MINUS_OP expression .)
    BIT_OR          reduce using rule 92 (expression -> MINUS_OP expression .)
    BIT_XOR         reduce using rule 92 (expression -> MINUS_OP expression .)
    BIT_AND         reduce using rule 92 (expression -> MINUS_OP expression .)
    AND_OP          reduce using rule 92 (expression -> MINUS_OP expression .)
    OR_OP           reduce using rule 92 (expression -> MINUS_OP expression .)
    EQUALS_OP       reduce using rule 92 (expression -> MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 92 (expression -> MINUS_OP expression .)
    GREATER_OP      reduce using rule 92 (expression -> MINUS_OP expression .)
    LESS_OP         reduce using rule 92 (expression -> MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 92 (expression -> MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 92 (expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 92 (expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 92 (expression -> MINUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 92 (expression -> MINUS_OP expression .)
    DIVISION_OP     reduce using rule 92 (expression -> MINUS_OP expression .)
    MODULUS_OP      reduce using rule 92 (expression -> MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 92 (expression -> MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 92 (expression -> MINUS_OP expression .)
    CONCATENATE     reduce using rule 92 (expression -> MINUS_OP expression .)
    REP_OP          reduce using rule 92 (expression -> MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 92 (expression -> MINUS_OP expression .)
    RANGE_OP        reduce using rule 92 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 92 (expression -> MINUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 92 (expression -> MINUS_OP expression .)
    QUESTION_MARK   reduce using rule 92 (expression -> MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 92 (expression -> MINUS_OP expression .)
    SEMICOLON       reduce using rule 92 (expression -> MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 92 (expression -> MINUS_OP expression .)
    COLON           reduce using rule 92 (expression -> MINUS_OP expression .)
    COMMA           reduce using rule 92 (expression -> MINUS_OP expression .)
    EXPONENT_OP     shift and go to state 88

  ! EXPONENT_OP     [ reduce using rule 92 (expression -> MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]
  ! SEARCH_MODIFY   [ shift and go to state 83 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 111 ]


state 116

    (61) dowhileStatement -> DO block . WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON

    WHILE           shift and go to state 193


state 117

    (59) whileStatement -> WHILE Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block

    OPEN_PARANTHESIS shift and go to state 194


state 118

    (18) statement -> ifthen Marker .

    VARIABLE        reduce using rule 18 (statement -> ifthen Marker .)
    ARRAY           reduce using rule 18 (statement -> ifthen Marker .)
    LOCAL           reduce using rule 18 (statement -> ifthen Marker .)
    PRIVATE         reduce using rule 18 (statement -> ifthen Marker .)
    RETURN          reduce using rule 18 (statement -> ifthen Marker .)
    IDENTIFIER      reduce using rule 18 (statement -> ifthen Marker .)
    WHILE           reduce using rule 18 (statement -> ifthen Marker .)
    FOR             reduce using rule 18 (statement -> ifthen Marker .)
    PRINT           reduce using rule 18 (statement -> ifthen Marker .)
    SUB             reduce using rule 18 (statement -> ifthen Marker .)
    LAST            reduce using rule 18 (statement -> ifthen Marker .)
    NEXT            reduce using rule 18 (statement -> ifthen Marker .)
    IF              reduce using rule 18 (statement -> ifthen Marker .)
    USE             reduce using rule 18 (statement -> ifthen Marker .)
    UNTIL           reduce using rule 18 (statement -> ifthen Marker .)
    DO              reduce using rule 18 (statement -> ifthen Marker .)
    SWITCH          reduce using rule 18 (statement -> ifthen Marker .)
    PLUS_OP         reduce using rule 18 (statement -> ifthen Marker .)
    MINUS_OP        reduce using rule 18 (statement -> ifthen Marker .)
    BIT_FLIP        reduce using rule 18 (statement -> ifthen Marker .)
    NOT_OP          reduce using rule 18 (statement -> ifthen Marker .)
    OPEN_PARANTHESIS reduce using rule 18 (statement -> ifthen Marker .)
    NUMBER          reduce using rule 18 (statement -> ifthen Marker .)
    SCI_NOT         reduce using rule 18 (statement -> ifthen Marker .)
    FLOAT           reduce using rule 18 (statement -> ifthen Marker .)
    HEXADECIMAL     reduce using rule 18 (statement -> ifthen Marker .)
    OCTAL           reduce using rule 18 (statement -> ifthen Marker .)
    STRING          reduce using rule 18 (statement -> ifthen Marker .)
    RES_STRING      reduce using rule 18 (statement -> ifthen Marker .)
    SEMICOLON       reduce using rule 18 (statement -> ifthen Marker .)
    QUESTION_MARK   reduce using rule 18 (statement -> ifthen Marker .)
    OR_STR_OP       reduce using rule 18 (statement -> ifthen Marker .)
    XOR_STR_OP      reduce using rule 18 (statement -> ifthen Marker .)
    AND_STR_OP      reduce using rule 18 (statement -> ifthen Marker .)
    NOT_STR_OP      reduce using rule 18 (statement -> ifthen Marker .)
    COMPARE_OP      reduce using rule 18 (statement -> ifthen Marker .)
    BIT_OR          reduce using rule 18 (statement -> ifthen Marker .)
    BIT_XOR         reduce using rule 18 (statement -> ifthen Marker .)
    BIT_AND         reduce using rule 18 (statement -> ifthen Marker .)
    AND_OP          reduce using rule 18 (statement -> ifthen Marker .)
    OR_OP           reduce using rule 18 (statement -> ifthen Marker .)
    EQUALS_OP       reduce using rule 18 (statement -> ifthen Marker .)
    NOT_EQUALS_OP   reduce using rule 18 (statement -> ifthen Marker .)
    GREATER_OP      reduce using rule 18 (statement -> ifthen Marker .)
    LESS_OP         reduce using rule 18 (statement -> ifthen Marker .)
    GREATER_EQUAL_OP reduce using rule 18 (statement -> ifthen Marker .)
    LESS_EQUAL_OP   reduce using rule 18 (statement -> ifthen Marker .)
    MULTIPLICATION_OP reduce using rule 18 (statement -> ifthen Marker .)
    DIVISION_OP     reduce using rule 18 (statement -> ifthen Marker .)
    MODULUS_OP      reduce using rule 18 (statement -> ifthen Marker .)
    EXPONENT_OP     reduce using rule 18 (statement -> ifthen Marker .)
    BIT_RIGHT_SHIFT reduce using rule 18 (statement -> ifthen Marker .)
    BIT_LEFT_SHIFT  reduce using rule 18 (statement -> ifthen Marker .)
    CONCATENATE     reduce using rule 18 (statement -> ifthen Marker .)
    REP_OP          reduce using rule 18 (statement -> ifthen Marker .)
    ASSOCIATE_OP    reduce using rule 18 (statement -> ifthen Marker .)
    RANGE_OP        reduce using rule 18 (statement -> ifthen Marker .)
    SEARCH_MODIFY   reduce using rule 18 (statement -> ifthen Marker .)
    SEARCH_MODIFY_NEG reduce using rule 18 (statement -> ifthen Marker .)
    $end            reduce using rule 18 (statement -> ifthen Marker .)
    BLOCK_ENDS      reduce using rule 18 (statement -> ifthen Marker .)


state 119

    (22) statement -> dowhileStatement Marker .

    VARIABLE        reduce using rule 22 (statement -> dowhileStatement Marker .)
    ARRAY           reduce using rule 22 (statement -> dowhileStatement Marker .)
    LOCAL           reduce using rule 22 (statement -> dowhileStatement Marker .)
    PRIVATE         reduce using rule 22 (statement -> dowhileStatement Marker .)
    RETURN          reduce using rule 22 (statement -> dowhileStatement Marker .)
    IDENTIFIER      reduce using rule 22 (statement -> dowhileStatement Marker .)
    WHILE           reduce using rule 22 (statement -> dowhileStatement Marker .)
    FOR             reduce using rule 22 (statement -> dowhileStatement Marker .)
    PRINT           reduce using rule 22 (statement -> dowhileStatement Marker .)
    SUB             reduce using rule 22 (statement -> dowhileStatement Marker .)
    LAST            reduce using rule 22 (statement -> dowhileStatement Marker .)
    NEXT            reduce using rule 22 (statement -> dowhileStatement Marker .)
    IF              reduce using rule 22 (statement -> dowhileStatement Marker .)
    USE             reduce using rule 22 (statement -> dowhileStatement Marker .)
    UNTIL           reduce using rule 22 (statement -> dowhileStatement Marker .)
    DO              reduce using rule 22 (statement -> dowhileStatement Marker .)
    SWITCH          reduce using rule 22 (statement -> dowhileStatement Marker .)
    PLUS_OP         reduce using rule 22 (statement -> dowhileStatement Marker .)
    MINUS_OP        reduce using rule 22 (statement -> dowhileStatement Marker .)
    BIT_FLIP        reduce using rule 22 (statement -> dowhileStatement Marker .)
    NOT_OP          reduce using rule 22 (statement -> dowhileStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 22 (statement -> dowhileStatement Marker .)
    NUMBER          reduce using rule 22 (statement -> dowhileStatement Marker .)
    SCI_NOT         reduce using rule 22 (statement -> dowhileStatement Marker .)
    FLOAT           reduce using rule 22 (statement -> dowhileStatement Marker .)
    HEXADECIMAL     reduce using rule 22 (statement -> dowhileStatement Marker .)
    OCTAL           reduce using rule 22 (statement -> dowhileStatement Marker .)
    STRING          reduce using rule 22 (statement -> dowhileStatement Marker .)
    RES_STRING      reduce using rule 22 (statement -> dowhileStatement Marker .)
    SEMICOLON       reduce using rule 22 (statement -> dowhileStatement Marker .)
    QUESTION_MARK   reduce using rule 22 (statement -> dowhileStatement Marker .)
    OR_STR_OP       reduce using rule 22 (statement -> dowhileStatement Marker .)
    XOR_STR_OP      reduce using rule 22 (statement -> dowhileStatement Marker .)
    AND_STR_OP      reduce using rule 22 (statement -> dowhileStatement Marker .)
    NOT_STR_OP      reduce using rule 22 (statement -> dowhileStatement Marker .)
    COMPARE_OP      reduce using rule 22 (statement -> dowhileStatement Marker .)
    BIT_OR          reduce using rule 22 (statement -> dowhileStatement Marker .)
    BIT_XOR         reduce using rule 22 (statement -> dowhileStatement Marker .)
    BIT_AND         reduce using rule 22 (statement -> dowhileStatement Marker .)
    AND_OP          reduce using rule 22 (statement -> dowhileStatement Marker .)
    OR_OP           reduce using rule 22 (statement -> dowhileStatement Marker .)
    EQUALS_OP       reduce using rule 22 (statement -> dowhileStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 22 (statement -> dowhileStatement Marker .)
    GREATER_OP      reduce using rule 22 (statement -> dowhileStatement Marker .)
    LESS_OP         reduce using rule 22 (statement -> dowhileStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 22 (statement -> dowhileStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 22 (statement -> dowhileStatement Marker .)
    MULTIPLICATION_OP reduce using rule 22 (statement -> dowhileStatement Marker .)
    DIVISION_OP     reduce using rule 22 (statement -> dowhileStatement Marker .)
    MODULUS_OP      reduce using rule 22 (statement -> dowhileStatement Marker .)
    EXPONENT_OP     reduce using rule 22 (statement -> dowhileStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 22 (statement -> dowhileStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 22 (statement -> dowhileStatement Marker .)
    CONCATENATE     reduce using rule 22 (statement -> dowhileStatement Marker .)
    REP_OP          reduce using rule 22 (statement -> dowhileStatement Marker .)
    ASSOCIATE_OP    reduce using rule 22 (statement -> dowhileStatement Marker .)
    RANGE_OP        reduce using rule 22 (statement -> dowhileStatement Marker .)
    SEARCH_MODIFY   reduce using rule 22 (statement -> dowhileStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 22 (statement -> dowhileStatement Marker .)
    $end            reduce using rule 22 (statement -> dowhileStatement Marker .)
    BLOCK_ENDS      reduce using rule 22 (statement -> dowhileStatement Marker .)


state 120

    (17) statement -> nextStatement Marker .

    VARIABLE        reduce using rule 17 (statement -> nextStatement Marker .)
    ARRAY           reduce using rule 17 (statement -> nextStatement Marker .)
    LOCAL           reduce using rule 17 (statement -> nextStatement Marker .)
    PRIVATE         reduce using rule 17 (statement -> nextStatement Marker .)
    RETURN          reduce using rule 17 (statement -> nextStatement Marker .)
    IDENTIFIER      reduce using rule 17 (statement -> nextStatement Marker .)
    WHILE           reduce using rule 17 (statement -> nextStatement Marker .)
    FOR             reduce using rule 17 (statement -> nextStatement Marker .)
    PRINT           reduce using rule 17 (statement -> nextStatement Marker .)
    SUB             reduce using rule 17 (statement -> nextStatement Marker .)
    LAST            reduce using rule 17 (statement -> nextStatement Marker .)
    NEXT            reduce using rule 17 (statement -> nextStatement Marker .)
    IF              reduce using rule 17 (statement -> nextStatement Marker .)
    USE             reduce using rule 17 (statement -> nextStatement Marker .)
    UNTIL           reduce using rule 17 (statement -> nextStatement Marker .)
    DO              reduce using rule 17 (statement -> nextStatement Marker .)
    SWITCH          reduce using rule 17 (statement -> nextStatement Marker .)
    PLUS_OP         reduce using rule 17 (statement -> nextStatement Marker .)
    MINUS_OP        reduce using rule 17 (statement -> nextStatement Marker .)
    BIT_FLIP        reduce using rule 17 (statement -> nextStatement Marker .)
    NOT_OP          reduce using rule 17 (statement -> nextStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 17 (statement -> nextStatement Marker .)
    NUMBER          reduce using rule 17 (statement -> nextStatement Marker .)
    SCI_NOT         reduce using rule 17 (statement -> nextStatement Marker .)
    FLOAT           reduce using rule 17 (statement -> nextStatement Marker .)
    HEXADECIMAL     reduce using rule 17 (statement -> nextStatement Marker .)
    OCTAL           reduce using rule 17 (statement -> nextStatement Marker .)
    STRING          reduce using rule 17 (statement -> nextStatement Marker .)
    RES_STRING      reduce using rule 17 (statement -> nextStatement Marker .)
    SEMICOLON       reduce using rule 17 (statement -> nextStatement Marker .)
    QUESTION_MARK   reduce using rule 17 (statement -> nextStatement Marker .)
    OR_STR_OP       reduce using rule 17 (statement -> nextStatement Marker .)
    XOR_STR_OP      reduce using rule 17 (statement -> nextStatement Marker .)
    AND_STR_OP      reduce using rule 17 (statement -> nextStatement Marker .)
    NOT_STR_OP      reduce using rule 17 (statement -> nextStatement Marker .)
    COMPARE_OP      reduce using rule 17 (statement -> nextStatement Marker .)
    BIT_OR          reduce using rule 17 (statement -> nextStatement Marker .)
    BIT_XOR         reduce using rule 17 (statement -> nextStatement Marker .)
    BIT_AND         reduce using rule 17 (statement -> nextStatement Marker .)
    AND_OP          reduce using rule 17 (statement -> nextStatement Marker .)
    OR_OP           reduce using rule 17 (statement -> nextStatement Marker .)
    EQUALS_OP       reduce using rule 17 (statement -> nextStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 17 (statement -> nextStatement Marker .)
    GREATER_OP      reduce using rule 17 (statement -> nextStatement Marker .)
    LESS_OP         reduce using rule 17 (statement -> nextStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 17 (statement -> nextStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 17 (statement -> nextStatement Marker .)
    MULTIPLICATION_OP reduce using rule 17 (statement -> nextStatement Marker .)
    DIVISION_OP     reduce using rule 17 (statement -> nextStatement Marker .)
    MODULUS_OP      reduce using rule 17 (statement -> nextStatement Marker .)
    EXPONENT_OP     reduce using rule 17 (statement -> nextStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 17 (statement -> nextStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 17 (statement -> nextStatement Marker .)
    CONCATENATE     reduce using rule 17 (statement -> nextStatement Marker .)
    REP_OP          reduce using rule 17 (statement -> nextStatement Marker .)
    ASSOCIATE_OP    reduce using rule 17 (statement -> nextStatement Marker .)
    RANGE_OP        reduce using rule 17 (statement -> nextStatement Marker .)
    SEARCH_MODIFY   reduce using rule 17 (statement -> nextStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 17 (statement -> nextStatement Marker .)
    $end            reduce using rule 17 (statement -> nextStatement Marker .)
    BLOCK_ENDS      reduce using rule 17 (statement -> nextStatement Marker .)


state 121

    (34) switchStatement -> SWITCH expression . BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    BLOCK_BEGIN     shift and go to state 195
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 122

    (16) statement -> lastStatement Marker .

    VARIABLE        reduce using rule 16 (statement -> lastStatement Marker .)
    ARRAY           reduce using rule 16 (statement -> lastStatement Marker .)
    LOCAL           reduce using rule 16 (statement -> lastStatement Marker .)
    PRIVATE         reduce using rule 16 (statement -> lastStatement Marker .)
    RETURN          reduce using rule 16 (statement -> lastStatement Marker .)
    IDENTIFIER      reduce using rule 16 (statement -> lastStatement Marker .)
    WHILE           reduce using rule 16 (statement -> lastStatement Marker .)
    FOR             reduce using rule 16 (statement -> lastStatement Marker .)
    PRINT           reduce using rule 16 (statement -> lastStatement Marker .)
    SUB             reduce using rule 16 (statement -> lastStatement Marker .)
    LAST            reduce using rule 16 (statement -> lastStatement Marker .)
    NEXT            reduce using rule 16 (statement -> lastStatement Marker .)
    IF              reduce using rule 16 (statement -> lastStatement Marker .)
    USE             reduce using rule 16 (statement -> lastStatement Marker .)
    UNTIL           reduce using rule 16 (statement -> lastStatement Marker .)
    DO              reduce using rule 16 (statement -> lastStatement Marker .)
    SWITCH          reduce using rule 16 (statement -> lastStatement Marker .)
    PLUS_OP         reduce using rule 16 (statement -> lastStatement Marker .)
    MINUS_OP        reduce using rule 16 (statement -> lastStatement Marker .)
    BIT_FLIP        reduce using rule 16 (statement -> lastStatement Marker .)
    NOT_OP          reduce using rule 16 (statement -> lastStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 16 (statement -> lastStatement Marker .)
    NUMBER          reduce using rule 16 (statement -> lastStatement Marker .)
    SCI_NOT         reduce using rule 16 (statement -> lastStatement Marker .)
    FLOAT           reduce using rule 16 (statement -> lastStatement Marker .)
    HEXADECIMAL     reduce using rule 16 (statement -> lastStatement Marker .)
    OCTAL           reduce using rule 16 (statement -> lastStatement Marker .)
    STRING          reduce using rule 16 (statement -> lastStatement Marker .)
    RES_STRING      reduce using rule 16 (statement -> lastStatement Marker .)
    SEMICOLON       reduce using rule 16 (statement -> lastStatement Marker .)
    QUESTION_MARK   reduce using rule 16 (statement -> lastStatement Marker .)
    OR_STR_OP       reduce using rule 16 (statement -> lastStatement Marker .)
    XOR_STR_OP      reduce using rule 16 (statement -> lastStatement Marker .)
    AND_STR_OP      reduce using rule 16 (statement -> lastStatement Marker .)
    NOT_STR_OP      reduce using rule 16 (statement -> lastStatement Marker .)
    COMPARE_OP      reduce using rule 16 (statement -> lastStatement Marker .)
    BIT_OR          reduce using rule 16 (statement -> lastStatement Marker .)
    BIT_XOR         reduce using rule 16 (statement -> lastStatement Marker .)
    BIT_AND         reduce using rule 16 (statement -> lastStatement Marker .)
    AND_OP          reduce using rule 16 (statement -> lastStatement Marker .)
    OR_OP           reduce using rule 16 (statement -> lastStatement Marker .)
    EQUALS_OP       reduce using rule 16 (statement -> lastStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 16 (statement -> lastStatement Marker .)
    GREATER_OP      reduce using rule 16 (statement -> lastStatement Marker .)
    LESS_OP         reduce using rule 16 (statement -> lastStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 16 (statement -> lastStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 16 (statement -> lastStatement Marker .)
    MULTIPLICATION_OP reduce using rule 16 (statement -> lastStatement Marker .)
    DIVISION_OP     reduce using rule 16 (statement -> lastStatement Marker .)
    MODULUS_OP      reduce using rule 16 (statement -> lastStatement Marker .)
    EXPONENT_OP     reduce using rule 16 (statement -> lastStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 16 (statement -> lastStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 16 (statement -> lastStatement Marker .)
    CONCATENATE     reduce using rule 16 (statement -> lastStatement Marker .)
    REP_OP          reduce using rule 16 (statement -> lastStatement Marker .)
    ASSOCIATE_OP    reduce using rule 16 (statement -> lastStatement Marker .)
    RANGE_OP        reduce using rule 16 (statement -> lastStatement Marker .)
    SEARCH_MODIFY   reduce using rule 16 (statement -> lastStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 16 (statement -> lastStatement Marker .)
    $end            reduce using rule 16 (statement -> lastStatement Marker .)
    BLOCK_ENDS      reduce using rule 16 (statement -> lastStatement Marker .)


state 123

    (4) statements -> statement statements .

    $end            reduce using rule 4 (statements -> statement statements .)
    BLOCK_ENDS      reduce using rule 4 (statements -> statement statements .)


state 124

    (55) assignment -> ARRAY OPEN_BRACKET . NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (87) term -> ARRAY OPEN_BRACKET . NUMBER CLOSE_BRACKET

    NUMBER          shift and go to state 196


state 125

    (88) array_assignment -> ARRAY ASSIGNMENT_OP . OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS shift and go to state 197


state 126

    (50) functionCall -> IDENTIFIER OPEN_PARANTHESIS . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS shift and go to state 198


state 127

    (21) statement -> untillStatement Marker .

    VARIABLE        reduce using rule 21 (statement -> untillStatement Marker .)
    ARRAY           reduce using rule 21 (statement -> untillStatement Marker .)
    LOCAL           reduce using rule 21 (statement -> untillStatement Marker .)
    PRIVATE         reduce using rule 21 (statement -> untillStatement Marker .)
    RETURN          reduce using rule 21 (statement -> untillStatement Marker .)
    IDENTIFIER      reduce using rule 21 (statement -> untillStatement Marker .)
    WHILE           reduce using rule 21 (statement -> untillStatement Marker .)
    FOR             reduce using rule 21 (statement -> untillStatement Marker .)
    PRINT           reduce using rule 21 (statement -> untillStatement Marker .)
    SUB             reduce using rule 21 (statement -> untillStatement Marker .)
    LAST            reduce using rule 21 (statement -> untillStatement Marker .)
    NEXT            reduce using rule 21 (statement -> untillStatement Marker .)
    IF              reduce using rule 21 (statement -> untillStatement Marker .)
    USE             reduce using rule 21 (statement -> untillStatement Marker .)
    UNTIL           reduce using rule 21 (statement -> untillStatement Marker .)
    DO              reduce using rule 21 (statement -> untillStatement Marker .)
    SWITCH          reduce using rule 21 (statement -> untillStatement Marker .)
    PLUS_OP         reduce using rule 21 (statement -> untillStatement Marker .)
    MINUS_OP        reduce using rule 21 (statement -> untillStatement Marker .)
    BIT_FLIP        reduce using rule 21 (statement -> untillStatement Marker .)
    NOT_OP          reduce using rule 21 (statement -> untillStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 21 (statement -> untillStatement Marker .)
    NUMBER          reduce using rule 21 (statement -> untillStatement Marker .)
    SCI_NOT         reduce using rule 21 (statement -> untillStatement Marker .)
    FLOAT           reduce using rule 21 (statement -> untillStatement Marker .)
    HEXADECIMAL     reduce using rule 21 (statement -> untillStatement Marker .)
    OCTAL           reduce using rule 21 (statement -> untillStatement Marker .)
    STRING          reduce using rule 21 (statement -> untillStatement Marker .)
    RES_STRING      reduce using rule 21 (statement -> untillStatement Marker .)
    SEMICOLON       reduce using rule 21 (statement -> untillStatement Marker .)
    QUESTION_MARK   reduce using rule 21 (statement -> untillStatement Marker .)
    OR_STR_OP       reduce using rule 21 (statement -> untillStatement Marker .)
    XOR_STR_OP      reduce using rule 21 (statement -> untillStatement Marker .)
    AND_STR_OP      reduce using rule 21 (statement -> untillStatement Marker .)
    NOT_STR_OP      reduce using rule 21 (statement -> untillStatement Marker .)
    COMPARE_OP      reduce using rule 21 (statement -> untillStatement Marker .)
    BIT_OR          reduce using rule 21 (statement -> untillStatement Marker .)
    BIT_XOR         reduce using rule 21 (statement -> untillStatement Marker .)
    BIT_AND         reduce using rule 21 (statement -> untillStatement Marker .)
    AND_OP          reduce using rule 21 (statement -> untillStatement Marker .)
    OR_OP           reduce using rule 21 (statement -> untillStatement Marker .)
    EQUALS_OP       reduce using rule 21 (statement -> untillStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 21 (statement -> untillStatement Marker .)
    GREATER_OP      reduce using rule 21 (statement -> untillStatement Marker .)
    LESS_OP         reduce using rule 21 (statement -> untillStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 21 (statement -> untillStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 21 (statement -> untillStatement Marker .)
    MULTIPLICATION_OP reduce using rule 21 (statement -> untillStatement Marker .)
    DIVISION_OP     reduce using rule 21 (statement -> untillStatement Marker .)
    MODULUS_OP      reduce using rule 21 (statement -> untillStatement Marker .)
    EXPONENT_OP     reduce using rule 21 (statement -> untillStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 21 (statement -> untillStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 21 (statement -> untillStatement Marker .)
    CONCATENATE     reduce using rule 21 (statement -> untillStatement Marker .)
    REP_OP          reduce using rule 21 (statement -> untillStatement Marker .)
    ASSOCIATE_OP    reduce using rule 21 (statement -> untillStatement Marker .)
    RANGE_OP        reduce using rule 21 (statement -> untillStatement Marker .)
    SEARCH_MODIFY   reduce using rule 21 (statement -> untillStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 21 (statement -> untillStatement Marker .)
    $end            reduce using rule 21 (statement -> untillStatement Marker .)
    BLOCK_ENDS      reduce using rule 21 (statement -> untillStatement Marker .)


state 128

    (9) statement -> array_assignment Marker .

    VARIABLE        reduce using rule 9 (statement -> array_assignment Marker .)
    ARRAY           reduce using rule 9 (statement -> array_assignment Marker .)
    LOCAL           reduce using rule 9 (statement -> array_assignment Marker .)
    PRIVATE         reduce using rule 9 (statement -> array_assignment Marker .)
    RETURN          reduce using rule 9 (statement -> array_assignment Marker .)
    IDENTIFIER      reduce using rule 9 (statement -> array_assignment Marker .)
    WHILE           reduce using rule 9 (statement -> array_assignment Marker .)
    FOR             reduce using rule 9 (statement -> array_assignment Marker .)
    PRINT           reduce using rule 9 (statement -> array_assignment Marker .)
    SUB             reduce using rule 9 (statement -> array_assignment Marker .)
    LAST            reduce using rule 9 (statement -> array_assignment Marker .)
    NEXT            reduce using rule 9 (statement -> array_assignment Marker .)
    IF              reduce using rule 9 (statement -> array_assignment Marker .)
    USE             reduce using rule 9 (statement -> array_assignment Marker .)
    UNTIL           reduce using rule 9 (statement -> array_assignment Marker .)
    DO              reduce using rule 9 (statement -> array_assignment Marker .)
    SWITCH          reduce using rule 9 (statement -> array_assignment Marker .)
    PLUS_OP         reduce using rule 9 (statement -> array_assignment Marker .)
    MINUS_OP        reduce using rule 9 (statement -> array_assignment Marker .)
    BIT_FLIP        reduce using rule 9 (statement -> array_assignment Marker .)
    NOT_OP          reduce using rule 9 (statement -> array_assignment Marker .)
    OPEN_PARANTHESIS reduce using rule 9 (statement -> array_assignment Marker .)
    NUMBER          reduce using rule 9 (statement -> array_assignment Marker .)
    SCI_NOT         reduce using rule 9 (statement -> array_assignment Marker .)
    FLOAT           reduce using rule 9 (statement -> array_assignment Marker .)
    HEXADECIMAL     reduce using rule 9 (statement -> array_assignment Marker .)
    OCTAL           reduce using rule 9 (statement -> array_assignment Marker .)
    STRING          reduce using rule 9 (statement -> array_assignment Marker .)
    RES_STRING      reduce using rule 9 (statement -> array_assignment Marker .)
    SEMICOLON       reduce using rule 9 (statement -> array_assignment Marker .)
    QUESTION_MARK   reduce using rule 9 (statement -> array_assignment Marker .)
    OR_STR_OP       reduce using rule 9 (statement -> array_assignment Marker .)
    XOR_STR_OP      reduce using rule 9 (statement -> array_assignment Marker .)
    AND_STR_OP      reduce using rule 9 (statement -> array_assignment Marker .)
    NOT_STR_OP      reduce using rule 9 (statement -> array_assignment Marker .)
    COMPARE_OP      reduce using rule 9 (statement -> array_assignment Marker .)
    BIT_OR          reduce using rule 9 (statement -> array_assignment Marker .)
    BIT_XOR         reduce using rule 9 (statement -> array_assignment Marker .)
    BIT_AND         reduce using rule 9 (statement -> array_assignment Marker .)
    AND_OP          reduce using rule 9 (statement -> array_assignment Marker .)
    OR_OP           reduce using rule 9 (statement -> array_assignment Marker .)
    EQUALS_OP       reduce using rule 9 (statement -> array_assignment Marker .)
    NOT_EQUALS_OP   reduce using rule 9 (statement -> array_assignment Marker .)
    GREATER_OP      reduce using rule 9 (statement -> array_assignment Marker .)
    LESS_OP         reduce using rule 9 (statement -> array_assignment Marker .)
    GREATER_EQUAL_OP reduce using rule 9 (statement -> array_assignment Marker .)
    LESS_EQUAL_OP   reduce using rule 9 (statement -> array_assignment Marker .)
    MULTIPLICATION_OP reduce using rule 9 (statement -> array_assignment Marker .)
    DIVISION_OP     reduce using rule 9 (statement -> array_assignment Marker .)
    MODULUS_OP      reduce using rule 9 (statement -> array_assignment Marker .)
    EXPONENT_OP     reduce using rule 9 (statement -> array_assignment Marker .)
    BIT_RIGHT_SHIFT reduce using rule 9 (statement -> array_assignment Marker .)
    BIT_LEFT_SHIFT  reduce using rule 9 (statement -> array_assignment Marker .)
    CONCATENATE     reduce using rule 9 (statement -> array_assignment Marker .)
    REP_OP          reduce using rule 9 (statement -> array_assignment Marker .)
    ASSOCIATE_OP    reduce using rule 9 (statement -> array_assignment Marker .)
    RANGE_OP        reduce using rule 9 (statement -> array_assignment Marker .)
    SEARCH_MODIFY   reduce using rule 9 (statement -> array_assignment Marker .)
    SEARCH_MODIFY_NEG reduce using rule 9 (statement -> array_assignment Marker .)
    $end            reduce using rule 9 (statement -> array_assignment Marker .)
    BLOCK_ENDS      reduce using rule 9 (statement -> array_assignment Marker .)


state 129

    (8) statement -> declaration Marker .

    VARIABLE        reduce using rule 8 (statement -> declaration Marker .)
    ARRAY           reduce using rule 8 (statement -> declaration Marker .)
    LOCAL           reduce using rule 8 (statement -> declaration Marker .)
    PRIVATE         reduce using rule 8 (statement -> declaration Marker .)
    RETURN          reduce using rule 8 (statement -> declaration Marker .)
    IDENTIFIER      reduce using rule 8 (statement -> declaration Marker .)
    WHILE           reduce using rule 8 (statement -> declaration Marker .)
    FOR             reduce using rule 8 (statement -> declaration Marker .)
    PRINT           reduce using rule 8 (statement -> declaration Marker .)
    SUB             reduce using rule 8 (statement -> declaration Marker .)
    LAST            reduce using rule 8 (statement -> declaration Marker .)
    NEXT            reduce using rule 8 (statement -> declaration Marker .)
    IF              reduce using rule 8 (statement -> declaration Marker .)
    USE             reduce using rule 8 (statement -> declaration Marker .)
    UNTIL           reduce using rule 8 (statement -> declaration Marker .)
    DO              reduce using rule 8 (statement -> declaration Marker .)
    SWITCH          reduce using rule 8 (statement -> declaration Marker .)
    PLUS_OP         reduce using rule 8 (statement -> declaration Marker .)
    MINUS_OP        reduce using rule 8 (statement -> declaration Marker .)
    BIT_FLIP        reduce using rule 8 (statement -> declaration Marker .)
    NOT_OP          reduce using rule 8 (statement -> declaration Marker .)
    OPEN_PARANTHESIS reduce using rule 8 (statement -> declaration Marker .)
    NUMBER          reduce using rule 8 (statement -> declaration Marker .)
    SCI_NOT         reduce using rule 8 (statement -> declaration Marker .)
    FLOAT           reduce using rule 8 (statement -> declaration Marker .)
    HEXADECIMAL     reduce using rule 8 (statement -> declaration Marker .)
    OCTAL           reduce using rule 8 (statement -> declaration Marker .)
    STRING          reduce using rule 8 (statement -> declaration Marker .)
    RES_STRING      reduce using rule 8 (statement -> declaration Marker .)
    SEMICOLON       reduce using rule 8 (statement -> declaration Marker .)
    QUESTION_MARK   reduce using rule 8 (statement -> declaration Marker .)
    OR_STR_OP       reduce using rule 8 (statement -> declaration Marker .)
    XOR_STR_OP      reduce using rule 8 (statement -> declaration Marker .)
    AND_STR_OP      reduce using rule 8 (statement -> declaration Marker .)
    NOT_STR_OP      reduce using rule 8 (statement -> declaration Marker .)
    COMPARE_OP      reduce using rule 8 (statement -> declaration Marker .)
    BIT_OR          reduce using rule 8 (statement -> declaration Marker .)
    BIT_XOR         reduce using rule 8 (statement -> declaration Marker .)
    BIT_AND         reduce using rule 8 (statement -> declaration Marker .)
    AND_OP          reduce using rule 8 (statement -> declaration Marker .)
    OR_OP           reduce using rule 8 (statement -> declaration Marker .)
    EQUALS_OP       reduce using rule 8 (statement -> declaration Marker .)
    NOT_EQUALS_OP   reduce using rule 8 (statement -> declaration Marker .)
    GREATER_OP      reduce using rule 8 (statement -> declaration Marker .)
    LESS_OP         reduce using rule 8 (statement -> declaration Marker .)
    GREATER_EQUAL_OP reduce using rule 8 (statement -> declaration Marker .)
    LESS_EQUAL_OP   reduce using rule 8 (statement -> declaration Marker .)
    MULTIPLICATION_OP reduce using rule 8 (statement -> declaration Marker .)
    DIVISION_OP     reduce using rule 8 (statement -> declaration Marker .)
    MODULUS_OP      reduce using rule 8 (statement -> declaration Marker .)
    EXPONENT_OP     reduce using rule 8 (statement -> declaration Marker .)
    BIT_RIGHT_SHIFT reduce using rule 8 (statement -> declaration Marker .)
    BIT_LEFT_SHIFT  reduce using rule 8 (statement -> declaration Marker .)
    CONCATENATE     reduce using rule 8 (statement -> declaration Marker .)
    REP_OP          reduce using rule 8 (statement -> declaration Marker .)
    ASSOCIATE_OP    reduce using rule 8 (statement -> declaration Marker .)
    RANGE_OP        reduce using rule 8 (statement -> declaration Marker .)
    SEARCH_MODIFY   reduce using rule 8 (statement -> declaration Marker .)
    SEARCH_MODIFY_NEG reduce using rule 8 (statement -> declaration Marker .)
    $end            reduce using rule 8 (statement -> declaration Marker .)
    BLOCK_ENDS      reduce using rule 8 (statement -> declaration Marker .)


state 130

    (30) useStatement -> USE IDENTIFIER . SEMICOLON
    (32) useStatement -> USE IDENTIFIER . module_list SEMICOLON
    (33) module_list -> . empty
    (6) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 201

  ! SEMICOLON       [ reduce using rule 6 (empty -> .) ]

    module_list                    shift and go to state 199
    empty                          shift and go to state 200

state 131

    (31) useStatement -> USE VERSION . SEMICOLON

    SEMICOLON       shift and go to state 202


state 132

    (15) statement -> functionStatement Marker .

    VARIABLE        reduce using rule 15 (statement -> functionStatement Marker .)
    ARRAY           reduce using rule 15 (statement -> functionStatement Marker .)
    LOCAL           reduce using rule 15 (statement -> functionStatement Marker .)
    PRIVATE         reduce using rule 15 (statement -> functionStatement Marker .)
    RETURN          reduce using rule 15 (statement -> functionStatement Marker .)
    IDENTIFIER      reduce using rule 15 (statement -> functionStatement Marker .)
    WHILE           reduce using rule 15 (statement -> functionStatement Marker .)
    FOR             reduce using rule 15 (statement -> functionStatement Marker .)
    PRINT           reduce using rule 15 (statement -> functionStatement Marker .)
    SUB             reduce using rule 15 (statement -> functionStatement Marker .)
    LAST            reduce using rule 15 (statement -> functionStatement Marker .)
    NEXT            reduce using rule 15 (statement -> functionStatement Marker .)
    IF              reduce using rule 15 (statement -> functionStatement Marker .)
    USE             reduce using rule 15 (statement -> functionStatement Marker .)
    UNTIL           reduce using rule 15 (statement -> functionStatement Marker .)
    DO              reduce using rule 15 (statement -> functionStatement Marker .)
    SWITCH          reduce using rule 15 (statement -> functionStatement Marker .)
    PLUS_OP         reduce using rule 15 (statement -> functionStatement Marker .)
    MINUS_OP        reduce using rule 15 (statement -> functionStatement Marker .)
    BIT_FLIP        reduce using rule 15 (statement -> functionStatement Marker .)
    NOT_OP          reduce using rule 15 (statement -> functionStatement Marker .)
    OPEN_PARANTHESIS reduce using rule 15 (statement -> functionStatement Marker .)
    NUMBER          reduce using rule 15 (statement -> functionStatement Marker .)
    SCI_NOT         reduce using rule 15 (statement -> functionStatement Marker .)
    FLOAT           reduce using rule 15 (statement -> functionStatement Marker .)
    HEXADECIMAL     reduce using rule 15 (statement -> functionStatement Marker .)
    OCTAL           reduce using rule 15 (statement -> functionStatement Marker .)
    STRING          reduce using rule 15 (statement -> functionStatement Marker .)
    RES_STRING      reduce using rule 15 (statement -> functionStatement Marker .)
    SEMICOLON       reduce using rule 15 (statement -> functionStatement Marker .)
    QUESTION_MARK   reduce using rule 15 (statement -> functionStatement Marker .)
    OR_STR_OP       reduce using rule 15 (statement -> functionStatement Marker .)
    XOR_STR_OP      reduce using rule 15 (statement -> functionStatement Marker .)
    AND_STR_OP      reduce using rule 15 (statement -> functionStatement Marker .)
    NOT_STR_OP      reduce using rule 15 (statement -> functionStatement Marker .)
    COMPARE_OP      reduce using rule 15 (statement -> functionStatement Marker .)
    BIT_OR          reduce using rule 15 (statement -> functionStatement Marker .)
    BIT_XOR         reduce using rule 15 (statement -> functionStatement Marker .)
    BIT_AND         reduce using rule 15 (statement -> functionStatement Marker .)
    AND_OP          reduce using rule 15 (statement -> functionStatement Marker .)
    OR_OP           reduce using rule 15 (statement -> functionStatement Marker .)
    EQUALS_OP       reduce using rule 15 (statement -> functionStatement Marker .)
    NOT_EQUALS_OP   reduce using rule 15 (statement -> functionStatement Marker .)
    GREATER_OP      reduce using rule 15 (statement -> functionStatement Marker .)
    LESS_OP         reduce using rule 15 (statement -> functionStatement Marker .)
    GREATER_EQUAL_OP reduce using rule 15 (statement -> functionStatement Marker .)
    LESS_EQUAL_OP   reduce using rule 15 (statement -> functionStatement Marker .)
    MULTIPLICATION_OP reduce using rule 15 (statement -> functionStatement Marker .)
    DIVISION_OP     reduce using rule 15 (statement -> functionStatement Marker .)
    MODULUS_OP      reduce using rule 15 (statement -> functionStatement Marker .)
    EXPONENT_OP     reduce using rule 15 (statement -> functionStatement Marker .)
    BIT_RIGHT_SHIFT reduce using rule 15 (statement -> functionStatement Marker .)
    BIT_LEFT_SHIFT  reduce using rule 15 (statement -> functionStatement Marker .)
    CONCATENATE     reduce using rule 15 (statement -> functionStatement Marker .)
    REP_OP          reduce using rule 15 (statement -> functionStatement Marker .)
    ASSOCIATE_OP    reduce using rule 15 (statement -> functionStatement Marker .)
    RANGE_OP        reduce using rule 15 (statement -> functionStatement Marker .)
    SEARCH_MODIFY   reduce using rule 15 (statement -> functionStatement Marker .)
    SEARCH_MODIFY_NEG reduce using rule 15 (statement -> functionStatement Marker .)
    $end            reduce using rule 15 (statement -> functionStatement Marker .)
    BLOCK_ENDS      reduce using rule 15 (statement -> functionStatement Marker .)


state 133

    (3) block -> BLOCK_BEGIN statements . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 203


state 134

    (57) assignment -> PRIVATE VARIABLE . ASSIGNMENT_OP expression
    (71) declaration -> PRIVATE VARIABLE . decList SEMICOLON
    (73) decList -> . COMMA VARIABLE decList
    (74) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 205
    COMMA           shift and go to state 139
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 141
    decList                        shift and go to state 204

state 135

    (93) expression -> BIT_FLIP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 93 (expression -> BIT_FLIP expression .)
    XOR_STR_OP      reduce using rule 93 (expression -> BIT_FLIP expression .)
    AND_STR_OP      reduce using rule 93 (expression -> BIT_FLIP expression .)
    NOT_STR_OP      reduce using rule 93 (expression -> BIT_FLIP expression .)
    COMPARE_OP      reduce using rule 93 (expression -> BIT_FLIP expression .)
    BIT_OR          reduce using rule 93 (expression -> BIT_FLIP expression .)
    BIT_XOR         reduce using rule 93 (expression -> BIT_FLIP expression .)
    BIT_AND         reduce using rule 93 (expression -> BIT_FLIP expression .)
    AND_OP          reduce using rule 93 (expression -> BIT_FLIP expression .)
    OR_OP           reduce using rule 93 (expression -> BIT_FLIP expression .)
    EQUALS_OP       reduce using rule 93 (expression -> BIT_FLIP expression .)
    NOT_EQUALS_OP   reduce using rule 93 (expression -> BIT_FLIP expression .)
    GREATER_OP      reduce using rule 93 (expression -> BIT_FLIP expression .)
    LESS_OP         reduce using rule 93 (expression -> BIT_FLIP expression .)
    GREATER_EQUAL_OP reduce using rule 93 (expression -> BIT_FLIP expression .)
    LESS_EQUAL_OP   reduce using rule 93 (expression -> BIT_FLIP expression .)
    PLUS_OP         reduce using rule 93 (expression -> BIT_FLIP expression .)
    MINUS_OP        reduce using rule 93 (expression -> BIT_FLIP expression .)
    MULTIPLICATION_OP reduce using rule 93 (expression -> BIT_FLIP expression .)
    DIVISION_OP     reduce using rule 93 (expression -> BIT_FLIP expression .)
    MODULUS_OP      reduce using rule 93 (expression -> BIT_FLIP expression .)
    BIT_RIGHT_SHIFT reduce using rule 93 (expression -> BIT_FLIP expression .)
    BIT_LEFT_SHIFT  reduce using rule 93 (expression -> BIT_FLIP expression .)
    CONCATENATE     reduce using rule 93 (expression -> BIT_FLIP expression .)
    REP_OP          reduce using rule 93 (expression -> BIT_FLIP expression .)
    ASSOCIATE_OP    reduce using rule 93 (expression -> BIT_FLIP expression .)
    RANGE_OP        reduce using rule 93 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY   reduce using rule 93 (expression -> BIT_FLIP expression .)
    SEARCH_MODIFY_NEG reduce using rule 93 (expression -> BIT_FLIP expression .)
    QUESTION_MARK   reduce using rule 93 (expression -> BIT_FLIP expression .)
    CLOSE_PARANTHESIS reduce using rule 93 (expression -> BIT_FLIP expression .)
    SEMICOLON       reduce using rule 93 (expression -> BIT_FLIP expression .)
    BLOCK_BEGIN     reduce using rule 93 (expression -> BIT_FLIP expression .)
    COLON           reduce using rule 93 (expression -> BIT_FLIP expression .)
    COMMA           reduce using rule 93 (expression -> BIT_FLIP expression .)
    EXPONENT_OP     shift and go to state 88

  ! EXPONENT_OP     [ reduce using rule 93 (expression -> BIT_FLIP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]
  ! SEARCH_MODIFY   [ shift and go to state 83 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 111 ]


state 136

    (7) statement -> assignment Marker . SEMICOLON

    SEMICOLON       shift and go to state 206


state 137

    (70) declaration -> VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 207


state 138

    (58) assignment -> VARIABLE ADV_ASSIGNMENT_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 208
    empty                          shift and go to state 62

state 139

    (73) decList -> COMMA . VARIABLE decList

    VARIABLE        shift and go to state 209


state 140

    (54) assignment -> VARIABLE ASSIGNMENT_OP . expression
    (41) inputStatement -> VARIABLE ASSIGNMENT_OP . USER_INPUT_OP SEMICOLON
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    USER_INPUT_OP   shift and go to state 210
    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 211
    empty                          shift and go to state 62

state 141

    (74) decList -> empty .

    SEMICOLON       reduce using rule 74 (decList -> empty .)


state 142

    (56) assignment -> LOCAL VARIABLE . ASSIGNMENT_OP expression
    (72) declaration -> LOCAL VARIABLE . decList SEMICOLON
    (73) decList -> . COMMA VARIABLE decList
    (74) decList -> . empty
    (6) empty -> .

    ASSIGNMENT_OP   shift and go to state 213
    COMMA           shift and go to state 139
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 141
    decList                        shift and go to state 212

state 143

    (42) ifthen -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif Marker block
    (43) ifthenelse -> IF OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 214
    empty                          shift and go to state 62

state 144

    (91) expression -> PLUS_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 91 (expression -> PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 91 (expression -> PLUS_OP expression .)
    AND_STR_OP      reduce using rule 91 (expression -> PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 91 (expression -> PLUS_OP expression .)
    COMPARE_OP      reduce using rule 91 (expression -> PLUS_OP expression .)
    BIT_OR          reduce using rule 91 (expression -> PLUS_OP expression .)
    BIT_XOR         reduce using rule 91 (expression -> PLUS_OP expression .)
    BIT_AND         reduce using rule 91 (expression -> PLUS_OP expression .)
    AND_OP          reduce using rule 91 (expression -> PLUS_OP expression .)
    OR_OP           reduce using rule 91 (expression -> PLUS_OP expression .)
    EQUALS_OP       reduce using rule 91 (expression -> PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 91 (expression -> PLUS_OP expression .)
    GREATER_OP      reduce using rule 91 (expression -> PLUS_OP expression .)
    LESS_OP         reduce using rule 91 (expression -> PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 91 (expression -> PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 91 (expression -> PLUS_OP expression .)
    PLUS_OP         reduce using rule 91 (expression -> PLUS_OP expression .)
    MINUS_OP        reduce using rule 91 (expression -> PLUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 91 (expression -> PLUS_OP expression .)
    DIVISION_OP     reduce using rule 91 (expression -> PLUS_OP expression .)
    MODULUS_OP      reduce using rule 91 (expression -> PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 91 (expression -> PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 91 (expression -> PLUS_OP expression .)
    CONCATENATE     reduce using rule 91 (expression -> PLUS_OP expression .)
    REP_OP          reduce using rule 91 (expression -> PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 91 (expression -> PLUS_OP expression .)
    RANGE_OP        reduce using rule 91 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY   reduce using rule 91 (expression -> PLUS_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 91 (expression -> PLUS_OP expression .)
    QUESTION_MARK   reduce using rule 91 (expression -> PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 91 (expression -> PLUS_OP expression .)
    SEMICOLON       reduce using rule 91 (expression -> PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 91 (expression -> PLUS_OP expression .)
    COLON           reduce using rule 91 (expression -> PLUS_OP expression .)
    COMMA           reduce using rule 91 (expression -> PLUS_OP expression .)
    EXPONENT_OP     shift and go to state 88

  ! EXPONENT_OP     [ reduce using rule 91 (expression -> PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]
  ! SEARCH_MODIFY   [ shift and go to state 83 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 111 ]


state 145

    (87) term -> ARRAY OPEN_BRACKET . NUMBER CLOSE_BRACKET

    NUMBER          shift and go to state 215


state 146

    (86) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

    OR_STR_OP       reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    QUESTION_MARK   reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEMICOLON       reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COLON           reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)


state 147

    (25) statement -> ternaryStatement Marker SEMICOLON .

    VARIABLE        reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    ARRAY           reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    LOCAL           reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    PRIVATE         reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    RETURN          reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    WHILE           reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    FOR             reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    PRINT           reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    SUB             reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    LAST            reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    NEXT            reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    IF              reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    USE             reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    UNTIL           reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    DO              reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    SWITCH          reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    PLUS_OP         reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    MINUS_OP        reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    BIT_FLIP        reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    NOT_OP          reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    NUMBER          reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    SCI_NOT         reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    FLOAT           reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    HEXADECIMAL     reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    OCTAL           reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    STRING          reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    RES_STRING      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    SEMICOLON       reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    QUESTION_MARK   reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    OR_STR_OP       reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    XOR_STR_OP      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    AND_STR_OP      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    NOT_STR_OP      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    COMPARE_OP      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    BIT_OR          reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    BIT_XOR         reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    BIT_AND         reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    AND_OP          reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    OR_OP           reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    EQUALS_OP       reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    GREATER_OP      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    LESS_OP         reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    DIVISION_OP     reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    MODULUS_OP      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    EXPONENT_OP     reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    CONCATENATE     reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    REP_OP          reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    RANGE_OP        reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    $end            reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)
    BLOCK_ENDS      reduce using rule 25 (statement -> ternaryStatement Marker SEMICOLON .)


state 148

    (11) statement -> functionCall Marker SEMICOLON .

    VARIABLE        reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    ARRAY           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    LOCAL           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    PRIVATE         reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    FOR             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    PRINT           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SUB             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    LAST            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    NEXT            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    IF              reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    USE             reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    UNTIL           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    DO              reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SWITCH          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    PLUS_OP         reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    MINUS_OP        reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BIT_FLIP        reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    NOT_OP          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    NUMBER          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SCI_NOT         reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    FLOAT           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    HEXADECIMAL     reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    OCTAL           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    STRING          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    RES_STRING      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SEMICOLON       reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    QUESTION_MARK   reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    OR_STR_OP       reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    XOR_STR_OP      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    AND_STR_OP      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    NOT_STR_OP      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    COMPARE_OP      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BIT_OR          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BIT_XOR         reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BIT_AND         reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    AND_OP          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    OR_OP           reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    EQUALS_OP       reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    GREATER_OP      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    LESS_OP         reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    DIVISION_OP     reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    MODULUS_OP      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    EXPONENT_OP     reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    CONCATENATE     reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    REP_OP          reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    RANGE_OP        reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    $end            reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)
    BLOCK_ENDS      reduce using rule 11 (statement -> functionCall Marker SEMICOLON .)


state 149

    (53) returnStatement -> RETURN expression SEMICOLON .

    VARIABLE        reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    ARRAY           reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    LOCAL           reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    PRIVATE         reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    SUB             reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    LAST            reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    NEXT            reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    USE             reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    UNTIL           reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    PLUS_OP         reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    MINUS_OP        reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    BIT_FLIP        reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    NOT_OP          reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    SCI_NOT         reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    OCTAL           reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    RES_STRING      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    QUESTION_MARK   reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    OR_STR_OP       reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    AND_STR_OP      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    COMPARE_OP      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    BIT_OR          reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    BIT_XOR         reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    BIT_AND         reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    AND_OP          reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    OR_OP           reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    EQUALS_OP       reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    GREATER_OP      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    LESS_OP         reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    DIVISION_OP     reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    MODULUS_OP      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    CONCATENATE     reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    REP_OP          reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    RANGE_OP        reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 53 (returnStatement -> RETURN expression SEMICOLON .)


state 150

    (51) printStatement -> PRINT OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS SEMICOLON
    (86) term -> OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 216
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 151

    (52) printStatement -> PRINT expression SEMICOLON .

    VARIABLE        reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    ARRAY           reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    LOCAL           reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    PRIVATE         reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    RETURN          reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    WHILE           reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    FOR             reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    PRINT           reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    SUB             reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    LAST            reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    NEXT            reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    IF              reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    USE             reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    UNTIL           reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    DO              reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    SWITCH          reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    PLUS_OP         reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    MINUS_OP        reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    BIT_FLIP        reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    NOT_OP          reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    NUMBER          reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    SCI_NOT         reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    FLOAT           reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    OCTAL           reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    STRING          reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    RES_STRING      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    SEMICOLON       reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    QUESTION_MARK   reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    OR_STR_OP       reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    XOR_STR_OP      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    AND_STR_OP      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    NOT_STR_OP      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    COMPARE_OP      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    BIT_OR          reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    BIT_XOR         reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    BIT_AND         reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    AND_OP          reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    OR_OP           reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    EQUALS_OP       reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    GREATER_OP      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    LESS_OP         reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    DIVISION_OP     reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    MODULUS_OP      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    EXPONENT_OP     reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    CONCATENATE     reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    REP_OP          reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    RANGE_OP        reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    $end            reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)
    BLOCK_ENDS      reduce using rule 52 (printStatement -> PRINT expression SEMICOLON .)


state 152

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment . SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR OPEN_PARANTHESIS assignment . SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

    SEMICOLON       shift and go to state 217


state 153

    (56) assignment -> LOCAL . VARIABLE ASSIGNMENT_OP expression

    VARIABLE        shift and go to state 218


state 154

    (54) assignment -> VARIABLE . ASSIGNMENT_OP expression
    (58) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression

    ASSIGNMENT_OP   shift and go to state 219
    ADV_ASSIGNMENT_OP shift and go to state 138


state 155

    (69) assignment -> empty .

    SEMICOLON       reduce using rule 69 (assignment -> empty .)


state 156

    (57) assignment -> PRIVATE . VARIABLE ASSIGNMENT_OP expression

    VARIABLE        shift and go to state 220


state 157

    (55) assignment -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression

    OPEN_BRACKET    shift and go to state 221


state 158

    (63) untillStatement -> UNTIL Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markeruntil block
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 222
    empty                          shift and go to state 62

state 159

    (126) expression -> expression SEARCH_MODIFY expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    XOR_STR_OP      reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    AND_STR_OP      reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    NOT_STR_OP      reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    COMPARE_OP      reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    BIT_OR          reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    BIT_XOR         reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    BIT_AND         reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    AND_OP          reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    OR_OP           reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    EQUALS_OP       reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    NOT_EQUALS_OP   reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_OP      reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    LESS_OP         reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    GREATER_EQUAL_OP reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    LESS_EQUAL_OP   reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    PLUS_OP         reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    MINUS_OP        reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    MULTIPLICATION_OP reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    DIVISION_OP     reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    MODULUS_OP      reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    BIT_RIGHT_SHIFT reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    BIT_LEFT_SHIFT  reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    CONCATENATE     reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    REP_OP          reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    ASSOCIATE_OP    reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    RANGE_OP        reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY   reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    SEARCH_MODIFY_NEG reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    QUESTION_MARK   reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    CLOSE_PARANTHESIS reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    SEMICOLON       reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    BLOCK_BEGIN     reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    COLON           reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    COMMA           reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .)
    EXPONENT_OP     shift and go to state 88

  ! EXPONENT_OP     [ reduce using rule 126 (expression -> expression SEARCH_MODIFY expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]
  ! SEARCH_MODIFY   [ shift and go to state 83 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 111 ]


state 160

    (112) expression -> expression LESS_EQUAL_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_OR          reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    BIT_AND         reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    AND_OP          reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    OR_OP           reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_OP         reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    QUESTION_MARK   reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    SEMICOLON       reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    COLON           reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    COMMA           reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! PLUS_OP         [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 112 (expression -> expression LESS_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 161

    (107) expression -> expression EQUALS_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    BIT_OR          reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    BIT_XOR         reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    BIT_AND         reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    AND_OP          reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    OR_OP           reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    RANGE_OP        reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    QUESTION_MARK   reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    SEMICOLON       reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    COLON           reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    COMMA           reduce using rule 107 (expression -> expression EQUALS_OP expression .)
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! GREATER_OP      [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 107 (expression -> expression EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 162

    (101) expression -> expression COMPARE_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    XOR_STR_OP      reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    AND_STR_OP      reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    NOT_STR_OP      reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    COMPARE_OP      reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    BIT_OR          reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    BIT_XOR         reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    BIT_AND         reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    AND_OP          reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    OR_OP           reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    EQUALS_OP       reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    NOT_EQUALS_OP   reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    ASSOCIATE_OP    reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    RANGE_OP        reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    QUESTION_MARK   reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    SEMICOLON       reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    BLOCK_BEGIN     reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    COLON           reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    COMMA           reduce using rule 101 (expression -> expression COMPARE_OP expression .)
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! GREATER_OP      [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! REP_OP          [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 101 (expression -> expression COMPARE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 163

    (108) expression -> expression NOT_EQUALS_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    XOR_STR_OP      reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    AND_STR_OP      reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_STR_OP      reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    COMPARE_OP      reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_OR          reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_XOR         reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    BIT_AND         reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    AND_OP          reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    OR_OP           reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    EQUALS_OP       reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    ASSOCIATE_OP    reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    RANGE_OP        reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    QUESTION_MARK   reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    SEMICOLON       reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    BLOCK_BEGIN     reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    COLON           reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    COMMA           reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .)
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! GREATER_OP      [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_OP         [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! REP_OP          [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 108 (expression -> expression NOT_EQUALS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 164

    (119) expression -> expression EXPONENT_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    XOR_STR_OP      reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    AND_STR_OP      reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    NOT_STR_OP      reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    COMPARE_OP      reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    BIT_OR          reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    BIT_XOR         reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    BIT_AND         reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    AND_OP          reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    OR_OP           reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    EQUALS_OP       reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    NOT_EQUALS_OP   reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    GREATER_OP      reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    LESS_OP         reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    PLUS_OP         reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    MINUS_OP        reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    MULTIPLICATION_OP reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    DIVISION_OP     reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    MODULUS_OP      reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    CONCATENATE     reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    REP_OP          reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    ASSOCIATE_OP    reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    RANGE_OP        reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY   reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    SEARCH_MODIFY_NEG reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    QUESTION_MARK   reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    SEMICOLON       reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    BLOCK_BEGIN     reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    COLON           reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    COMMA           reduce using rule 119 (expression -> expression EXPONENT_OP expression .)
    EXPONENT_OP     shift and go to state 88

  ! EXPONENT_OP     [ reduce using rule 119 (expression -> expression EXPONENT_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]
  ! SEARCH_MODIFY   [ shift and go to state 83 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 111 ]


state 165

    (100) expression -> expression NOT_STR_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    XOR_STR_OP      reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    AND_STR_OP      reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    QUESTION_MARK   reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    SEMICOLON       reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    COLON           reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    COMMA           reduce using rule 100 (expression -> expression NOT_STR_OP expression .)
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! NOT_STR_OP      [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 100 (expression -> expression NOT_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]


state 166

    (117) expression -> expression DIVISION_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    XOR_STR_OP      reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    AND_STR_OP      reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    NOT_STR_OP      reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    COMPARE_OP      reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    BIT_OR          reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    BIT_XOR         reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    BIT_AND         reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    AND_OP          reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    OR_OP           reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    EQUALS_OP       reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    GREATER_OP      reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    LESS_OP         reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    PLUS_OP         reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    MINUS_OP        reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    MULTIPLICATION_OP reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    DIVISION_OP     reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    MODULUS_OP      reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    CONCATENATE     reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    REP_OP          reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    ASSOCIATE_OP    reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    RANGE_OP        reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    QUESTION_MARK   reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    SEMICOLON       reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    BLOCK_BEGIN     reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    COLON           reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    COMMA           reduce using rule 117 (expression -> expression DIVISION_OP expression .)
    EXPONENT_OP     shift and go to state 88
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 117 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 117 (expression -> expression DIVISION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 117 (expression -> expression DIVISION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 167

    (125) expression -> expression RANGE_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 125 (expression -> expression RANGE_OP expression .)
    XOR_STR_OP      reduce using rule 125 (expression -> expression RANGE_OP expression .)
    AND_STR_OP      reduce using rule 125 (expression -> expression RANGE_OP expression .)
    NOT_STR_OP      reduce using rule 125 (expression -> expression RANGE_OP expression .)
    ASSOCIATE_OP    reduce using rule 125 (expression -> expression RANGE_OP expression .)
    RANGE_OP        reduce using rule 125 (expression -> expression RANGE_OP expression .)
    QUESTION_MARK   reduce using rule 125 (expression -> expression RANGE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 125 (expression -> expression RANGE_OP expression .)
    SEMICOLON       reduce using rule 125 (expression -> expression RANGE_OP expression .)
    BLOCK_BEGIN     reduce using rule 125 (expression -> expression RANGE_OP expression .)
    COLON           reduce using rule 125 (expression -> expression RANGE_OP expression .)
    COMMA           reduce using rule 125 (expression -> expression RANGE_OP expression .)
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! COMPARE_OP      [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! AND_OP          [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! OR_OP           [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! REP_OP          [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 125 (expression -> expression RANGE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 168

    (103) expression -> expression BIT_XOR expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 103 (expression -> expression BIT_XOR expression .)
    XOR_STR_OP      reduce using rule 103 (expression -> expression BIT_XOR expression .)
    AND_STR_OP      reduce using rule 103 (expression -> expression BIT_XOR expression .)
    NOT_STR_OP      reduce using rule 103 (expression -> expression BIT_XOR expression .)
    BIT_OR          reduce using rule 103 (expression -> expression BIT_XOR expression .)
    BIT_XOR         reduce using rule 103 (expression -> expression BIT_XOR expression .)
    AND_OP          reduce using rule 103 (expression -> expression BIT_XOR expression .)
    OR_OP           reduce using rule 103 (expression -> expression BIT_XOR expression .)
    ASSOCIATE_OP    reduce using rule 103 (expression -> expression BIT_XOR expression .)
    RANGE_OP        reduce using rule 103 (expression -> expression BIT_XOR expression .)
    QUESTION_MARK   reduce using rule 103 (expression -> expression BIT_XOR expression .)
    CLOSE_PARANTHESIS reduce using rule 103 (expression -> expression BIT_XOR expression .)
    SEMICOLON       reduce using rule 103 (expression -> expression BIT_XOR expression .)
    BLOCK_BEGIN     reduce using rule 103 (expression -> expression BIT_XOR expression .)
    COLON           reduce using rule 103 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 103 (expression -> expression BIT_XOR expression .)
    COMPARE_OP      shift and go to state 86
    BIT_AND         shift and go to state 102
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! COMPARE_OP      [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! EQUALS_OP       [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_OP      [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! LESS_OP         [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! PLUS_OP         [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! MINUS_OP        [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! DIVISION_OP     [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! MODULUS_OP      [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! CONCATENATE     [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! REP_OP          [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 103 (expression -> expression BIT_XOR expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 169

    (115) expression -> expression MINUS_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 115 (expression -> expression MINUS_OP expression .)
    XOR_STR_OP      reduce using rule 115 (expression -> expression MINUS_OP expression .)
    AND_STR_OP      reduce using rule 115 (expression -> expression MINUS_OP expression .)
    NOT_STR_OP      reduce using rule 115 (expression -> expression MINUS_OP expression .)
    COMPARE_OP      reduce using rule 115 (expression -> expression MINUS_OP expression .)
    BIT_OR          reduce using rule 115 (expression -> expression MINUS_OP expression .)
    BIT_XOR         reduce using rule 115 (expression -> expression MINUS_OP expression .)
    BIT_AND         reduce using rule 115 (expression -> expression MINUS_OP expression .)
    AND_OP          reduce using rule 115 (expression -> expression MINUS_OP expression .)
    OR_OP           reduce using rule 115 (expression -> expression MINUS_OP expression .)
    EQUALS_OP       reduce using rule 115 (expression -> expression MINUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 115 (expression -> expression MINUS_OP expression .)
    GREATER_OP      reduce using rule 115 (expression -> expression MINUS_OP expression .)
    LESS_OP         reduce using rule 115 (expression -> expression MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 115 (expression -> expression MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 115 (expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 115 (expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 115 (expression -> expression MINUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 115 (expression -> expression MINUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 115 (expression -> expression MINUS_OP expression .)
    CONCATENATE     reduce using rule 115 (expression -> expression MINUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 115 (expression -> expression MINUS_OP expression .)
    RANGE_OP        reduce using rule 115 (expression -> expression MINUS_OP expression .)
    QUESTION_MARK   reduce using rule 115 (expression -> expression MINUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 115 (expression -> expression MINUS_OP expression .)
    SEMICOLON       reduce using rule 115 (expression -> expression MINUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 115 (expression -> expression MINUS_OP expression .)
    COLON           reduce using rule 115 (expression -> expression MINUS_OP expression .)
    COMMA           reduce using rule 115 (expression -> expression MINUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! MULTIPLICATION_OP [ reduce using rule 115 (expression -> expression MINUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 115 (expression -> expression MINUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 115 (expression -> expression MINUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 115 (expression -> expression MINUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 115 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 115 (expression -> expression MINUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 115 (expression -> expression MINUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 170

    (114) expression -> expression PLUS_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 114 (expression -> expression PLUS_OP expression .)
    XOR_STR_OP      reduce using rule 114 (expression -> expression PLUS_OP expression .)
    AND_STR_OP      reduce using rule 114 (expression -> expression PLUS_OP expression .)
    NOT_STR_OP      reduce using rule 114 (expression -> expression PLUS_OP expression .)
    COMPARE_OP      reduce using rule 114 (expression -> expression PLUS_OP expression .)
    BIT_OR          reduce using rule 114 (expression -> expression PLUS_OP expression .)
    BIT_XOR         reduce using rule 114 (expression -> expression PLUS_OP expression .)
    BIT_AND         reduce using rule 114 (expression -> expression PLUS_OP expression .)
    AND_OP          reduce using rule 114 (expression -> expression PLUS_OP expression .)
    OR_OP           reduce using rule 114 (expression -> expression PLUS_OP expression .)
    EQUALS_OP       reduce using rule 114 (expression -> expression PLUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 114 (expression -> expression PLUS_OP expression .)
    GREATER_OP      reduce using rule 114 (expression -> expression PLUS_OP expression .)
    LESS_OP         reduce using rule 114 (expression -> expression PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 114 (expression -> expression PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 114 (expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 114 (expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 114 (expression -> expression PLUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 114 (expression -> expression PLUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 114 (expression -> expression PLUS_OP expression .)
    CONCATENATE     reduce using rule 114 (expression -> expression PLUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 114 (expression -> expression PLUS_OP expression .)
    RANGE_OP        reduce using rule 114 (expression -> expression PLUS_OP expression .)
    QUESTION_MARK   reduce using rule 114 (expression -> expression PLUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 114 (expression -> expression PLUS_OP expression .)
    SEMICOLON       reduce using rule 114 (expression -> expression PLUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 114 (expression -> expression PLUS_OP expression .)
    COLON           reduce using rule 114 (expression -> expression PLUS_OP expression .)
    COMMA           reduce using rule 114 (expression -> expression PLUS_OP expression .)
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! MULTIPLICATION_OP [ reduce using rule 114 (expression -> expression PLUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 114 (expression -> expression PLUS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 114 (expression -> expression PLUS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 114 (expression -> expression PLUS_OP expression .) ]
  ! REP_OP          [ reduce using rule 114 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 114 (expression -> expression PLUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 114 (expression -> expression PLUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 171

    (26) ternaryStatement -> expression QUESTION_MARK Marker_true . Marker expression COLON Marker_false expression
    (27) ternaryStatement -> expression QUESTION_MARK Marker_true . Marker assignment COLON Marker_false assignment
    (113) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 223
    empty                          shift and go to state 60

state 172

    (28) Marker_true -> empty .

    PLUS_OP         reduce using rule 28 (Marker_true -> empty .)
    MINUS_OP        reduce using rule 28 (Marker_true -> empty .)
    BIT_FLIP        reduce using rule 28 (Marker_true -> empty .)
    NOT_OP          reduce using rule 28 (Marker_true -> empty .)
    VARIABLE        reduce using rule 28 (Marker_true -> empty .)
    ARRAY           reduce using rule 28 (Marker_true -> empty .)
    LOCAL           reduce using rule 28 (Marker_true -> empty .)
    PRIVATE         reduce using rule 28 (Marker_true -> empty .)
    OPEN_PARANTHESIS reduce using rule 28 (Marker_true -> empty .)
    IDENTIFIER      reduce using rule 28 (Marker_true -> empty .)
    NUMBER          reduce using rule 28 (Marker_true -> empty .)
    SCI_NOT         reduce using rule 28 (Marker_true -> empty .)
    FLOAT           reduce using rule 28 (Marker_true -> empty .)
    HEXADECIMAL     reduce using rule 28 (Marker_true -> empty .)
    OCTAL           reduce using rule 28 (Marker_true -> empty .)
    STRING          reduce using rule 28 (Marker_true -> empty .)
    RES_STRING      reduce using rule 28 (Marker_true -> empty .)
    COLON           reduce using rule 28 (Marker_true -> empty .)
    OR_STR_OP       reduce using rule 28 (Marker_true -> empty .)
    XOR_STR_OP      reduce using rule 28 (Marker_true -> empty .)
    AND_STR_OP      reduce using rule 28 (Marker_true -> empty .)
    NOT_STR_OP      reduce using rule 28 (Marker_true -> empty .)
    COMPARE_OP      reduce using rule 28 (Marker_true -> empty .)
    BIT_OR          reduce using rule 28 (Marker_true -> empty .)
    BIT_XOR         reduce using rule 28 (Marker_true -> empty .)
    BIT_AND         reduce using rule 28 (Marker_true -> empty .)
    AND_OP          reduce using rule 28 (Marker_true -> empty .)
    OR_OP           reduce using rule 28 (Marker_true -> empty .)
    EQUALS_OP       reduce using rule 28 (Marker_true -> empty .)
    NOT_EQUALS_OP   reduce using rule 28 (Marker_true -> empty .)
    GREATER_OP      reduce using rule 28 (Marker_true -> empty .)
    LESS_OP         reduce using rule 28 (Marker_true -> empty .)
    GREATER_EQUAL_OP reduce using rule 28 (Marker_true -> empty .)
    LESS_EQUAL_OP   reduce using rule 28 (Marker_true -> empty .)
    MULTIPLICATION_OP reduce using rule 28 (Marker_true -> empty .)
    DIVISION_OP     reduce using rule 28 (Marker_true -> empty .)
    MODULUS_OP      reduce using rule 28 (Marker_true -> empty .)
    EXPONENT_OP     reduce using rule 28 (Marker_true -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 28 (Marker_true -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 28 (Marker_true -> empty .)
    CONCATENATE     reduce using rule 28 (Marker_true -> empty .)
    REP_OP          reduce using rule 28 (Marker_true -> empty .)
    ASSOCIATE_OP    reduce using rule 28 (Marker_true -> empty .)
    RANGE_OP        reduce using rule 28 (Marker_true -> empty .)
    SEARCH_MODIFY   reduce using rule 28 (Marker_true -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 28 (Marker_true -> empty .)


state 173

    (106) expression -> expression OR_OP Marker . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 224
    empty                          shift and go to state 62

state 174

    (110) expression -> expression LESS_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 110 (expression -> expression LESS_OP expression .)
    XOR_STR_OP      reduce using rule 110 (expression -> expression LESS_OP expression .)
    AND_STR_OP      reduce using rule 110 (expression -> expression LESS_OP expression .)
    NOT_STR_OP      reduce using rule 110 (expression -> expression LESS_OP expression .)
    COMPARE_OP      reduce using rule 110 (expression -> expression LESS_OP expression .)
    BIT_OR          reduce using rule 110 (expression -> expression LESS_OP expression .)
    BIT_XOR         reduce using rule 110 (expression -> expression LESS_OP expression .)
    BIT_AND         reduce using rule 110 (expression -> expression LESS_OP expression .)
    AND_OP          reduce using rule 110 (expression -> expression LESS_OP expression .)
    OR_OP           reduce using rule 110 (expression -> expression LESS_OP expression .)
    EQUALS_OP       reduce using rule 110 (expression -> expression LESS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 110 (expression -> expression LESS_OP expression .)
    GREATER_OP      reduce using rule 110 (expression -> expression LESS_OP expression .)
    LESS_OP         reduce using rule 110 (expression -> expression LESS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 110 (expression -> expression LESS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 110 (expression -> expression LESS_OP expression .)
    ASSOCIATE_OP    reduce using rule 110 (expression -> expression LESS_OP expression .)
    RANGE_OP        reduce using rule 110 (expression -> expression LESS_OP expression .)
    QUESTION_MARK   reduce using rule 110 (expression -> expression LESS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 110 (expression -> expression LESS_OP expression .)
    SEMICOLON       reduce using rule 110 (expression -> expression LESS_OP expression .)
    BLOCK_BEGIN     reduce using rule 110 (expression -> expression LESS_OP expression .)
    COLON           reduce using rule 110 (expression -> expression LESS_OP expression .)
    COMMA           reduce using rule 110 (expression -> expression LESS_OP expression .)
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! PLUS_OP         [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! REP_OP          [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 110 (expression -> expression LESS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 175

    (118) expression -> expression MODULUS_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    XOR_STR_OP      reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    AND_STR_OP      reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    NOT_STR_OP      reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    COMPARE_OP      reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    BIT_OR          reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    BIT_XOR         reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    BIT_AND         reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    AND_OP          reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    OR_OP           reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    EQUALS_OP       reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    NOT_EQUALS_OP   reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    GREATER_OP      reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    LESS_OP         reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    PLUS_OP         reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    MINUS_OP        reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    MULTIPLICATION_OP reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    DIVISION_OP     reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    MODULUS_OP      reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    CONCATENATE     reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    REP_OP          reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    ASSOCIATE_OP    reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    RANGE_OP        reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    QUESTION_MARK   reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    SEMICOLON       reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    BLOCK_BEGIN     reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    COLON           reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    COMMA           reduce using rule 118 (expression -> expression MODULUS_OP expression .)
    EXPONENT_OP     shift and go to state 88
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 118 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 118 (expression -> expression MODULUS_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 118 (expression -> expression MODULUS_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 176

    (116) expression -> expression MULTIPLICATION_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    XOR_STR_OP      reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    AND_STR_OP      reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_STR_OP      reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    COMPARE_OP      reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_OR          reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_XOR         reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_AND         reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    AND_OP          reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    OR_OP           reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    EQUALS_OP       reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    NOT_EQUALS_OP   reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_OP      reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_OP         reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    GREATER_EQUAL_OP reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    LESS_EQUAL_OP   reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    PLUS_OP         reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    MINUS_OP        reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    MULTIPLICATION_OP reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    DIVISION_OP     reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    MODULUS_OP      reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    CONCATENATE     reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    REP_OP          reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    ASSOCIATE_OP    reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    RANGE_OP        reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    QUESTION_MARK   reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    SEMICOLON       reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    BLOCK_BEGIN     reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    COLON           reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    COMMA           reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .)
    EXPONENT_OP     shift and go to state 88
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 116 (expression -> expression MULTIPLICATION_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 177

    (111) expression -> expression GREATER_EQUAL_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    XOR_STR_OP      reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_STR_OP      reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_STR_OP      reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    COMPARE_OP      reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_OR          reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_XOR         reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    BIT_AND         reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    AND_OP          reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    OR_OP           reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    EQUALS_OP       reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    NOT_EQUALS_OP   reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_OP         reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    ASSOCIATE_OP    reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    RANGE_OP        reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    QUESTION_MARK   reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    SEMICOLON       reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    BLOCK_BEGIN     reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    COLON           reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    COMMA           reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! PLUS_OP         [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! REP_OP          [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 111 (expression -> expression GREATER_EQUAL_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 178

    (98) expression -> expression XOR_STR_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 98 (expression -> expression XOR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 98 (expression -> expression XOR_STR_OP expression .)
    QUESTION_MARK   reduce using rule 98 (expression -> expression XOR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 98 (expression -> expression XOR_STR_OP expression .)
    SEMICOLON       reduce using rule 98 (expression -> expression XOR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 98 (expression -> expression XOR_STR_OP expression .)
    COLON           reduce using rule 98 (expression -> expression XOR_STR_OP expression .)
    COMMA           reduce using rule 98 (expression -> expression XOR_STR_OP expression .)
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! AND_STR_OP      [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 98 (expression -> expression XOR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]


state 179

    (104) expression -> expression BIT_AND expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 104 (expression -> expression BIT_AND expression .)
    XOR_STR_OP      reduce using rule 104 (expression -> expression BIT_AND expression .)
    AND_STR_OP      reduce using rule 104 (expression -> expression BIT_AND expression .)
    NOT_STR_OP      reduce using rule 104 (expression -> expression BIT_AND expression .)
    BIT_OR          reduce using rule 104 (expression -> expression BIT_AND expression .)
    BIT_XOR         reduce using rule 104 (expression -> expression BIT_AND expression .)
    BIT_AND         reduce using rule 104 (expression -> expression BIT_AND expression .)
    AND_OP          reduce using rule 104 (expression -> expression BIT_AND expression .)
    OR_OP           reduce using rule 104 (expression -> expression BIT_AND expression .)
    ASSOCIATE_OP    reduce using rule 104 (expression -> expression BIT_AND expression .)
    RANGE_OP        reduce using rule 104 (expression -> expression BIT_AND expression .)
    QUESTION_MARK   reduce using rule 104 (expression -> expression BIT_AND expression .)
    CLOSE_PARANTHESIS reduce using rule 104 (expression -> expression BIT_AND expression .)
    SEMICOLON       reduce using rule 104 (expression -> expression BIT_AND expression .)
    BLOCK_BEGIN     reduce using rule 104 (expression -> expression BIT_AND expression .)
    COLON           reduce using rule 104 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 104 (expression -> expression BIT_AND expression .)
    COMPARE_OP      shift and go to state 86
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! COMPARE_OP      [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! EQUALS_OP       [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! GREATER_OP      [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! LESS_OP         [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! PLUS_OP         [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! MINUS_OP        [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! DIVISION_OP     [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! MODULUS_OP      [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! EXPONENT_OP     [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! CONCATENATE     [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! REP_OP          [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 104 (expression -> expression BIT_AND expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 180

    (124) expression -> expression ASSOCIATE_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    XOR_STR_OP      reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    AND_STR_OP      reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    NOT_STR_OP      reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    ASSOCIATE_OP    reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    QUESTION_MARK   reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    SEMICOLON       reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    BLOCK_BEGIN     reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    COLON           reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    COMMA           reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .)
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! COMPARE_OP      [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_OR          [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_AND         [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! AND_OP          [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_OP           [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_OP         [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! REP_OP          [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 124 (expression -> expression ASSOCIATE_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]


state 181

    (97) expression -> expression OR_STR_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 97 (expression -> expression OR_STR_OP expression .)
    XOR_STR_OP      reduce using rule 97 (expression -> expression OR_STR_OP expression .)
    QUESTION_MARK   reduce using rule 97 (expression -> expression OR_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 97 (expression -> expression OR_STR_OP expression .)
    SEMICOLON       reduce using rule 97 (expression -> expression OR_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 97 (expression -> expression OR_STR_OP expression .)
    COLON           reduce using rule 97 (expression -> expression OR_STR_OP expression .)
    COMMA           reduce using rule 97 (expression -> expression OR_STR_OP expression .)
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! AND_STR_OP      [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_STR_OP      [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 97 (expression -> expression OR_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]


state 182

    (105) expression -> expression AND_OP Marker . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    QUESTION_MARK   reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    BLOCK_BEGIN     reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 225
    empty                          shift and go to state 62

state 183

    (121) expression -> expression BIT_LEFT_SHIFT expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_STR_OP      reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMPARE_OP      reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_OR          reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_XOR         reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_AND         reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    AND_OP          reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    OR_OP           reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    EQUALS_OP       reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_OP      reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_OP         reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    RANGE_OP        reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    QUESTION_MARK   reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    SEMICOLON       reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    COLON           reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    COMMA           reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .)
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! PLUS_OP         [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 121 (expression -> expression BIT_LEFT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 184

    (123) expression -> expression REP_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 123 (expression -> expression REP_OP expression .)
    XOR_STR_OP      reduce using rule 123 (expression -> expression REP_OP expression .)
    AND_STR_OP      reduce using rule 123 (expression -> expression REP_OP expression .)
    NOT_STR_OP      reduce using rule 123 (expression -> expression REP_OP expression .)
    COMPARE_OP      reduce using rule 123 (expression -> expression REP_OP expression .)
    BIT_OR          reduce using rule 123 (expression -> expression REP_OP expression .)
    BIT_XOR         reduce using rule 123 (expression -> expression REP_OP expression .)
    BIT_AND         reduce using rule 123 (expression -> expression REP_OP expression .)
    AND_OP          reduce using rule 123 (expression -> expression REP_OP expression .)
    OR_OP           reduce using rule 123 (expression -> expression REP_OP expression .)
    EQUALS_OP       reduce using rule 123 (expression -> expression REP_OP expression .)
    NOT_EQUALS_OP   reduce using rule 123 (expression -> expression REP_OP expression .)
    GREATER_OP      reduce using rule 123 (expression -> expression REP_OP expression .)
    LESS_OP         reduce using rule 123 (expression -> expression REP_OP expression .)
    GREATER_EQUAL_OP reduce using rule 123 (expression -> expression REP_OP expression .)
    LESS_EQUAL_OP   reduce using rule 123 (expression -> expression REP_OP expression .)
    PLUS_OP         reduce using rule 123 (expression -> expression REP_OP expression .)
    MINUS_OP        reduce using rule 123 (expression -> expression REP_OP expression .)
    MULTIPLICATION_OP reduce using rule 123 (expression -> expression REP_OP expression .)
    DIVISION_OP     reduce using rule 123 (expression -> expression REP_OP expression .)
    MODULUS_OP      reduce using rule 123 (expression -> expression REP_OP expression .)
    BIT_RIGHT_SHIFT reduce using rule 123 (expression -> expression REP_OP expression .)
    BIT_LEFT_SHIFT  reduce using rule 123 (expression -> expression REP_OP expression .)
    CONCATENATE     reduce using rule 123 (expression -> expression REP_OP expression .)
    REP_OP          reduce using rule 123 (expression -> expression REP_OP expression .)
    ASSOCIATE_OP    reduce using rule 123 (expression -> expression REP_OP expression .)
    RANGE_OP        reduce using rule 123 (expression -> expression REP_OP expression .)
    QUESTION_MARK   reduce using rule 123 (expression -> expression REP_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 123 (expression -> expression REP_OP expression .)
    SEMICOLON       reduce using rule 123 (expression -> expression REP_OP expression .)
    BLOCK_BEGIN     reduce using rule 123 (expression -> expression REP_OP expression .)
    COLON           reduce using rule 123 (expression -> expression REP_OP expression .)
    COMMA           reduce using rule 123 (expression -> expression REP_OP expression .)
    EXPONENT_OP     shift and go to state 88
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! EXPONENT_OP     [ reduce using rule 123 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 123 (expression -> expression REP_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 123 (expression -> expression REP_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 185

    (122) expression -> expression CONCATENATE expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 122 (expression -> expression CONCATENATE expression .)
    XOR_STR_OP      reduce using rule 122 (expression -> expression CONCATENATE expression .)
    AND_STR_OP      reduce using rule 122 (expression -> expression CONCATENATE expression .)
    NOT_STR_OP      reduce using rule 122 (expression -> expression CONCATENATE expression .)
    COMPARE_OP      reduce using rule 122 (expression -> expression CONCATENATE expression .)
    BIT_OR          reduce using rule 122 (expression -> expression CONCATENATE expression .)
    BIT_XOR         reduce using rule 122 (expression -> expression CONCATENATE expression .)
    BIT_AND         reduce using rule 122 (expression -> expression CONCATENATE expression .)
    AND_OP          reduce using rule 122 (expression -> expression CONCATENATE expression .)
    OR_OP           reduce using rule 122 (expression -> expression CONCATENATE expression .)
    EQUALS_OP       reduce using rule 122 (expression -> expression CONCATENATE expression .)
    NOT_EQUALS_OP   reduce using rule 122 (expression -> expression CONCATENATE expression .)
    GREATER_OP      reduce using rule 122 (expression -> expression CONCATENATE expression .)
    LESS_OP         reduce using rule 122 (expression -> expression CONCATENATE expression .)
    GREATER_EQUAL_OP reduce using rule 122 (expression -> expression CONCATENATE expression .)
    LESS_EQUAL_OP   reduce using rule 122 (expression -> expression CONCATENATE expression .)
    PLUS_OP         reduce using rule 122 (expression -> expression CONCATENATE expression .)
    MINUS_OP        reduce using rule 122 (expression -> expression CONCATENATE expression .)
    BIT_RIGHT_SHIFT reduce using rule 122 (expression -> expression CONCATENATE expression .)
    BIT_LEFT_SHIFT  reduce using rule 122 (expression -> expression CONCATENATE expression .)
    CONCATENATE     reduce using rule 122 (expression -> expression CONCATENATE expression .)
    ASSOCIATE_OP    reduce using rule 122 (expression -> expression CONCATENATE expression .)
    RANGE_OP        reduce using rule 122 (expression -> expression CONCATENATE expression .)
    QUESTION_MARK   reduce using rule 122 (expression -> expression CONCATENATE expression .)
    CLOSE_PARANTHESIS reduce using rule 122 (expression -> expression CONCATENATE expression .)
    SEMICOLON       reduce using rule 122 (expression -> expression CONCATENATE expression .)
    BLOCK_BEGIN     reduce using rule 122 (expression -> expression CONCATENATE expression .)
    COLON           reduce using rule 122 (expression -> expression CONCATENATE expression .)
    COMMA           reduce using rule 122 (expression -> expression CONCATENATE expression .)
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! MULTIPLICATION_OP [ reduce using rule 122 (expression -> expression CONCATENATE expression .) ]
  ! DIVISION_OP     [ reduce using rule 122 (expression -> expression CONCATENATE expression .) ]
  ! MODULUS_OP      [ reduce using rule 122 (expression -> expression CONCATENATE expression .) ]
  ! EXPONENT_OP     [ reduce using rule 122 (expression -> expression CONCATENATE expression .) ]
  ! REP_OP          [ reduce using rule 122 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 122 (expression -> expression CONCATENATE expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 122 (expression -> expression CONCATENATE expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 186

    (120) expression -> expression BIT_RIGHT_SHIFT expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    XOR_STR_OP      reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_STR_OP      reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_STR_OP      reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMPARE_OP      reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_OR          reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_XOR         reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_AND         reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    AND_OP          reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    OR_OP           reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    EQUALS_OP       reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    NOT_EQUALS_OP   reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_OP      reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_OP         reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    GREATER_EQUAL_OP reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    LESS_EQUAL_OP   reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_RIGHT_SHIFT reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BIT_LEFT_SHIFT  reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    ASSOCIATE_OP    reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    RANGE_OP        reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    QUESTION_MARK   reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    CLOSE_PARANTHESIS reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    SEMICOLON       reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    BLOCK_BEGIN     reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COLON           reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    COMMA           reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .)
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! PLUS_OP         [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MINUS_OP        [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! DIVISION_OP     [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! MODULUS_OP      [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! EXPONENT_OP     [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! CONCATENATE     [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! REP_OP          [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 120 (expression -> expression BIT_RIGHT_SHIFT expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 187

    (102) expression -> expression BIT_OR expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 102 (expression -> expression BIT_OR expression .)
    XOR_STR_OP      reduce using rule 102 (expression -> expression BIT_OR expression .)
    AND_STR_OP      reduce using rule 102 (expression -> expression BIT_OR expression .)
    NOT_STR_OP      reduce using rule 102 (expression -> expression BIT_OR expression .)
    BIT_OR          reduce using rule 102 (expression -> expression BIT_OR expression .)
    BIT_XOR         reduce using rule 102 (expression -> expression BIT_OR expression .)
    AND_OP          reduce using rule 102 (expression -> expression BIT_OR expression .)
    OR_OP           reduce using rule 102 (expression -> expression BIT_OR expression .)
    ASSOCIATE_OP    reduce using rule 102 (expression -> expression BIT_OR expression .)
    RANGE_OP        reduce using rule 102 (expression -> expression BIT_OR expression .)
    QUESTION_MARK   reduce using rule 102 (expression -> expression BIT_OR expression .)
    CLOSE_PARANTHESIS reduce using rule 102 (expression -> expression BIT_OR expression .)
    SEMICOLON       reduce using rule 102 (expression -> expression BIT_OR expression .)
    BLOCK_BEGIN     reduce using rule 102 (expression -> expression BIT_OR expression .)
    COLON           reduce using rule 102 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 102 (expression -> expression BIT_OR expression .)
    COMPARE_OP      shift and go to state 86
    BIT_AND         shift and go to state 102
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! COMPARE_OP      [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! EQUALS_OP       [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! GREATER_OP      [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! LESS_OP         [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! PLUS_OP         [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! MINUS_OP        [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! DIVISION_OP     [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! MODULUS_OP      [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! EXPONENT_OP     [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! CONCATENATE     [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! REP_OP          [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 102 (expression -> expression BIT_OR expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 188

    (127) expression -> expression SEARCH_MODIFY_NEG expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    XOR_STR_OP      reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_STR_OP      reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_STR_OP      reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMPARE_OP      reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_OR          reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_XOR         reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_AND         reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    AND_OP          reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    OR_OP           reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EQUALS_OP       reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    NOT_EQUALS_OP   reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_OP      reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_OP         reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    GREATER_EQUAL_OP reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    LESS_EQUAL_OP   reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    PLUS_OP         reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MINUS_OP        reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MULTIPLICATION_OP reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    DIVISION_OP     reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    MODULUS_OP      reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_RIGHT_SHIFT reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BIT_LEFT_SHIFT  reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CONCATENATE     reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    REP_OP          reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    ASSOCIATE_OP    reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    RANGE_OP        reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY   reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEARCH_MODIFY_NEG reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    QUESTION_MARK   reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    CLOSE_PARANTHESIS reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    SEMICOLON       reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    BLOCK_BEGIN     reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COLON           reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    COMMA           reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .)
    EXPONENT_OP     shift and go to state 88

  ! EXPONENT_OP     [ reduce using rule 127 (expression -> expression SEARCH_MODIFY_NEG expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! PLUS_OP         [ shift and go to state 94 ]
  ! MINUS_OP        [ shift and go to state 93 ]
  ! MULTIPLICATION_OP [ shift and go to state 99 ]
  ! DIVISION_OP     [ shift and go to state 90 ]
  ! MODULUS_OP      [ shift and go to state 98 ]
  ! BIT_RIGHT_SHIFT [ shift and go to state 109 ]
  ! BIT_LEFT_SHIFT  [ shift and go to state 106 ]
  ! CONCATENATE     [ shift and go to state 108 ]
  ! REP_OP          [ shift and go to state 107 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]
  ! SEARCH_MODIFY   [ shift and go to state 83 ]
  ! SEARCH_MODIFY_NEG [ shift and go to state 111 ]


state 189

    (109) expression -> expression GREATER_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 109 (expression -> expression GREATER_OP expression .)
    XOR_STR_OP      reduce using rule 109 (expression -> expression GREATER_OP expression .)
    AND_STR_OP      reduce using rule 109 (expression -> expression GREATER_OP expression .)
    NOT_STR_OP      reduce using rule 109 (expression -> expression GREATER_OP expression .)
    COMPARE_OP      reduce using rule 109 (expression -> expression GREATER_OP expression .)
    BIT_OR          reduce using rule 109 (expression -> expression GREATER_OP expression .)
    BIT_XOR         reduce using rule 109 (expression -> expression GREATER_OP expression .)
    BIT_AND         reduce using rule 109 (expression -> expression GREATER_OP expression .)
    AND_OP          reduce using rule 109 (expression -> expression GREATER_OP expression .)
    OR_OP           reduce using rule 109 (expression -> expression GREATER_OP expression .)
    EQUALS_OP       reduce using rule 109 (expression -> expression GREATER_OP expression .)
    NOT_EQUALS_OP   reduce using rule 109 (expression -> expression GREATER_OP expression .)
    GREATER_OP      reduce using rule 109 (expression -> expression GREATER_OP expression .)
    LESS_OP         reduce using rule 109 (expression -> expression GREATER_OP expression .)
    GREATER_EQUAL_OP reduce using rule 109 (expression -> expression GREATER_OP expression .)
    LESS_EQUAL_OP   reduce using rule 109 (expression -> expression GREATER_OP expression .)
    ASSOCIATE_OP    reduce using rule 109 (expression -> expression GREATER_OP expression .)
    RANGE_OP        reduce using rule 109 (expression -> expression GREATER_OP expression .)
    QUESTION_MARK   reduce using rule 109 (expression -> expression GREATER_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 109 (expression -> expression GREATER_OP expression .)
    SEMICOLON       reduce using rule 109 (expression -> expression GREATER_OP expression .)
    BLOCK_BEGIN     reduce using rule 109 (expression -> expression GREATER_OP expression .)
    COLON           reduce using rule 109 (expression -> expression GREATER_OP expression .)
    COMMA           reduce using rule 109 (expression -> expression GREATER_OP expression .)
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! PLUS_OP         [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! REP_OP          [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 109 (expression -> expression GREATER_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! COMPARE_OP      [ shift and go to state 86 ]
  ! BIT_OR          [ shift and go to state 110 ]
  ! BIT_XOR         [ shift and go to state 92 ]
  ! BIT_AND         [ shift and go to state 102 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! EQUALS_OP       [ shift and go to state 85 ]
  ! NOT_EQUALS_OP   [ shift and go to state 87 ]
  ! GREATER_OP      [ shift and go to state 112 ]
  ! LESS_OP         [ shift and go to state 97 ]
  ! GREATER_EQUAL_OP [ shift and go to state 100 ]
  ! LESS_EQUAL_OP   [ shift and go to state 84 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 190

    (99) expression -> expression AND_STR_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    XOR_STR_OP      reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    AND_STR_OP      reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    QUESTION_MARK   reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    CLOSE_PARANTHESIS reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    SEMICOLON       reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    BLOCK_BEGIN     reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    COLON           reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    COMMA           reduce using rule 99 (expression -> expression AND_STR_OP expression .)
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! NOT_STR_OP      [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! COMPARE_OP      [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_OR          [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_XOR         [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_AND         [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! AND_OP          [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! OR_OP           [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! EQUALS_OP       [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_OP      [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_OP         [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! MODULUS_OP      [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! EXPONENT_OP     [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! CONCATENATE     [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! REP_OP          [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! ASSOCIATE_OP    [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! RANGE_OP        [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 99 (expression -> expression AND_STR_OP expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]


state 191

    (48) functionStatement -> SUB IDENTIFIER Markerscope . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 226

state 192

    (49) Markerscope -> empty .

    BLOCK_BEGIN     reduce using rule 49 (Markerscope -> empty .)


state 193

    (61) dowhileStatement -> DO block WHILE . Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (113) Marker -> . empty
    (6) empty -> .

    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 227
    empty                          shift and go to state 60

state 194

    (59) whileStatement -> WHILE Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerwhile block
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 228
    empty                          shift and go to state 62

state 195

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN . Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
    (35) Marker_switch -> . empty
    (6) empty -> .

    CASE            reduce using rule 6 (empty -> .)

    empty                          shift and go to state 229
    Marker_switch                  shift and go to state 230

state 196

    (55) assignment -> ARRAY OPEN_BRACKET NUMBER . CLOSE_BRACKET ASSIGNMENT_OP expression
    (87) term -> ARRAY OPEN_BRACKET NUMBER . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 231


state 197

    (88) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS . expression arrayList CLOSE_PARANTHESIS SEMICOLON
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 232
    empty                          shift and go to state 62

state 198

    (50) functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .

    OR_STR_OP       reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    CLOSE_PARANTHESIS reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    QUESTION_MARK   reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    SEMICOLON       reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    BLOCK_BEGIN     reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    COLON           reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)
    COMMA           reduce using rule 50 (functionCall -> IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS .)


state 199

    (32) useStatement -> USE IDENTIFIER module_list . SEMICOLON

    SEMICOLON       shift and go to state 233


state 200

    (33) module_list -> empty .

    SEMICOLON       reduce using rule 33 (module_list -> empty .)


state 201

    (30) useStatement -> USE IDENTIFIER SEMICOLON .

    VARIABLE        reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    ARRAY           reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LOCAL           reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SUB             reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LAST            reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NEXT            reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    USE             reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    UNTIL           reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    DO              reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    PLUS_OP         reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    MINUS_OP        reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BIT_FLIP        reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NOT_OP          reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SCI_NOT         reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    HEXADECIMAL     reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    OCTAL           reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    RES_STRING      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    QUESTION_MARK   reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    OR_STR_OP       reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    XOR_STR_OP      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    AND_STR_OP      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NOT_STR_OP      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    COMPARE_OP      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BIT_OR          reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BIT_XOR         reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BIT_AND         reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    AND_OP          reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    OR_OP           reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    EQUALS_OP       reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    GREATER_OP      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LESS_OP         reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    DIVISION_OP     reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    MODULUS_OP      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    EXPONENT_OP     reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    CONCATENATE     reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    REP_OP          reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    RANGE_OP        reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    $end            reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)
    BLOCK_ENDS      reduce using rule 30 (useStatement -> USE IDENTIFIER SEMICOLON .)


state 202

    (31) useStatement -> USE VERSION SEMICOLON .

    VARIABLE        reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    ARRAY           reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    LOCAL           reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    PRIVATE         reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    RETURN          reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    WHILE           reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    FOR             reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    PRINT           reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    SUB             reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    LAST            reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    NEXT            reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    IF              reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    USE             reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    UNTIL           reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    DO              reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    SWITCH          reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    PLUS_OP         reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    MINUS_OP        reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    BIT_FLIP        reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    NOT_OP          reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    NUMBER          reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    SCI_NOT         reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    FLOAT           reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    HEXADECIMAL     reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    OCTAL           reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    STRING          reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    RES_STRING      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    SEMICOLON       reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    QUESTION_MARK   reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    OR_STR_OP       reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    XOR_STR_OP      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    AND_STR_OP      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    NOT_STR_OP      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    COMPARE_OP      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    BIT_OR          reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    BIT_XOR         reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    BIT_AND         reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    AND_OP          reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    OR_OP           reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    EQUALS_OP       reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    GREATER_OP      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    LESS_OP         reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    DIVISION_OP     reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    MODULUS_OP      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    EXPONENT_OP     reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    CONCATENATE     reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    REP_OP          reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    RANGE_OP        reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    $end            reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)
    BLOCK_ENDS      reduce using rule 31 (useStatement -> USE VERSION SEMICOLON .)


state 203

    (3) block -> BLOCK_BEGIN statements BLOCK_ENDS .

    VARIABLE        reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ARRAY           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LOCAL           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRIVATE         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    RETURN          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    WHILE           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    FOR             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PRINT           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SUB             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LAST            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NEXT            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    IF              reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    USE             reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    UNTIL           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    DO              reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SWITCH          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    PLUS_OP         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    MINUS_OP        reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BIT_FLIP        reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NOT_OP          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    OPEN_PARANTHESIS reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NUMBER          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SCI_NOT         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    FLOAT           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    HEXADECIMAL     reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    OCTAL           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    STRING          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    RES_STRING      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SEMICOLON       reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    QUESTION_MARK   reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    OR_STR_OP       reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    XOR_STR_OP      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    AND_STR_OP      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NOT_STR_OP      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    COMPARE_OP      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BIT_OR          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BIT_XOR         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BIT_AND         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    AND_OP          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    OR_OP           reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    EQUALS_OP       reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    NOT_EQUALS_OP   reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    GREATER_OP      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LESS_OP         reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    GREATER_EQUAL_OP reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    LESS_EQUAL_OP   reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    MULTIPLICATION_OP reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    DIVISION_OP     reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    MODULUS_OP      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    EXPONENT_OP     reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BIT_RIGHT_SHIFT reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BIT_LEFT_SHIFT  reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    CONCATENATE     reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    REP_OP          reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ASSOCIATE_OP    reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    RANGE_OP        reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SEARCH_MODIFY   reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    SEARCH_MODIFY_NEG reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    $end            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    CASE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)
    ELSE            reduce using rule 3 (block -> BLOCK_BEGIN statements BLOCK_ENDS .)


state 204

    (71) declaration -> PRIVATE VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 234


state 205

    (57) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 235
    empty                          shift and go to state 62

state 206

    (7) statement -> assignment Marker SEMICOLON .

    VARIABLE        reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    ARRAY           reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    LOCAL           reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    PRIVATE         reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    IDENTIFIER      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    FOR             reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    PRINT           reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    SUB             reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    LAST            reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    NEXT            reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    IF              reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    USE             reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    UNTIL           reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    DO              reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    SWITCH          reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    PLUS_OP         reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    MINUS_OP        reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    BIT_FLIP        reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    NOT_OP          reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    NUMBER          reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    SCI_NOT         reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    FLOAT           reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    HEXADECIMAL     reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    OCTAL           reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    STRING          reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    RES_STRING      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    SEMICOLON       reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    QUESTION_MARK   reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    OR_STR_OP       reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    XOR_STR_OP      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    AND_STR_OP      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    NOT_STR_OP      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    COMPARE_OP      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    BIT_OR          reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    BIT_XOR         reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    BIT_AND         reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    AND_OP          reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    OR_OP           reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    EQUALS_OP       reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    GREATER_OP      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    LESS_OP         reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    DIVISION_OP     reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    MODULUS_OP      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    EXPONENT_OP     reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    CONCATENATE     reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    REP_OP          reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    RANGE_OP        reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    $end            reduce using rule 7 (statement -> assignment Marker SEMICOLON .)
    BLOCK_ENDS      reduce using rule 7 (statement -> assignment Marker SEMICOLON .)


state 207

    (70) declaration -> VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    IF              reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    USE             reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    UNTIL           reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    DO              reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    PLUS_OP         reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    MINUS_OP        reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    BIT_FLIP        reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    NOT_OP          reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    NUMBER          reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    SCI_NOT         reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    FLOAT           reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    HEXADECIMAL     reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    OCTAL           reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    STRING          reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    RES_STRING      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    SEMICOLON       reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    QUESTION_MARK   reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    OR_STR_OP       reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    XOR_STR_OP      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    AND_STR_OP      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    NOT_STR_OP      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    COMPARE_OP      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    BIT_OR          reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    BIT_XOR         reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    BIT_AND         reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    AND_OP          reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    OR_OP           reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    EQUALS_OP       reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    GREATER_OP      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    LESS_OP         reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    DIVISION_OP     reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    MODULUS_OP      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    EXPONENT_OP     reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    CONCATENATE     reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    REP_OP          reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    RANGE_OP        reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    $end            reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 70 (declaration -> VARIABLE decList SEMICOLON .)


state 208

    (58) assignment -> VARIABLE ADV_ASSIGNMENT_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 58 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression .)
    COLON           reduce using rule 58 (assignment -> VARIABLE ADV_ASSIGNMENT_OP expression .)
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 209

    (73) decList -> COMMA VARIABLE . decList
    (73) decList -> . COMMA VARIABLE decList
    (74) decList -> . empty
    (6) empty -> .

    COMMA           shift and go to state 139
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 141
    decList                        shift and go to state 236

state 210

    (41) inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP . SEMICOLON

    SEMICOLON       shift and go to state 237


state 211

    (54) assignment -> VARIABLE ASSIGNMENT_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 54 (assignment -> VARIABLE ASSIGNMENT_OP expression .)
    COLON           reduce using rule 54 (assignment -> VARIABLE ASSIGNMENT_OP expression .)
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 212

    (72) declaration -> LOCAL VARIABLE decList . SEMICOLON

    SEMICOLON       shift and go to state 238


state 213

    (56) assignment -> LOCAL VARIABLE ASSIGNMENT_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 239
    empty                          shift and go to state 62

state 214

    (42) ifthen -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif Marker block
    (43) ifthenelse -> IF OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 240
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 215

    (87) term -> ARRAY OPEN_BRACKET NUMBER . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 241


state 216

    (51) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . SEMICOLON
    (86) term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 242
    OR_STR_OP       reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    XOR_STR_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_STR_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_STR_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    COMPARE_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_OR          reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_XOR         reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_AND         reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    AND_OP          reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    OR_OP           reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EQUALS_OP       reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    NOT_EQUALS_OP   reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_OP         reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    GREATER_EQUAL_OP reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    LESS_EQUAL_OP   reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    PLUS_OP         reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MINUS_OP        reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MULTIPLICATION_OP reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    DIVISION_OP     reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    MODULUS_OP      reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    EXPONENT_OP     reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_RIGHT_SHIFT reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    BIT_LEFT_SHIFT  reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    CONCATENATE     reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    REP_OP          reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    ASSOCIATE_OP    reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    RANGE_OP        reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY   reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)
    SEARCH_MODIFY_NEG reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .)

  ! SEMICOLON       [ reduce using rule 86 (term -> OPEN_PARANTHESIS expression CLOSE_PARANTHESIS .) ]


state 217

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON . Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON . Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (113) Marker -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 243
    empty                          shift and go to state 60

state 218

    (56) assignment -> LOCAL VARIABLE . ASSIGNMENT_OP expression

    ASSIGNMENT_OP   shift and go to state 213


state 219

    (54) assignment -> VARIABLE ASSIGNMENT_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 211
    empty                          shift and go to state 62

state 220

    (57) assignment -> PRIVATE VARIABLE . ASSIGNMENT_OP expression

    ASSIGNMENT_OP   shift and go to state 205


state 221

    (55) assignment -> ARRAY OPEN_BRACKET . NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression

    NUMBER          shift and go to state 244


state 222

    (63) untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markeruntil block
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 245
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 223

    (26) ternaryStatement -> expression QUESTION_MARK Marker_true Marker . expression COLON Marker_false expression
    (27) ternaryStatement -> expression QUESTION_MARK Marker_true Marker . assignment COLON Marker_false assignment
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (54) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (55) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (56) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression
    (57) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression
    (58) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression
    (69) assignment -> . empty
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    VARIABLE        shift and go to state 248
    ARRAY           shift and go to state 249
    LOCAL           shift and go to state 153
    PRIVATE         shift and go to state 156
    COLON           reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS shift and go to state 2
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    assignment                     shift and go to state 247
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 250
    empty                          shift and go to state 246

state 224

    (106) expression -> expression OR_OP Marker expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    XOR_STR_OP      reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    AND_STR_OP      reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    NOT_STR_OP      reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    OR_OP           reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    RANGE_OP        reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    QUESTION_MARK   reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    SEMICOLON       reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    COLON           reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    COMMA           reduce using rule 106 (expression -> expression OR_OP Marker expression .)
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! COMPARE_OP      [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! AND_OP          [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 106 (expression -> expression OR_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 225

    (105) expression -> expression AND_OP Marker expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    OR_STR_OP       reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    XOR_STR_OP      reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    AND_STR_OP      reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    NOT_STR_OP      reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    AND_OP          reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    OR_OP           reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    ASSOCIATE_OP    reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    RANGE_OP        reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    QUESTION_MARK   reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    CLOSE_PARANTHESIS reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    SEMICOLON       reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    BLOCK_BEGIN     reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    COLON           reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    COMMA           reduce using rule 105 (expression -> expression AND_OP Marker expression .)
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111

  ! COMPARE_OP      [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_OR          [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_XOR         [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_AND         [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! EQUALS_OP       [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! NOT_EQUALS_OP   [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_OP      [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_OP         [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! PLUS_OP         [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! MINUS_OP        [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! MULTIPLICATION_OP [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! DIVISION_OP     [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! MODULUS_OP      [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! EXPONENT_OP     [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_RIGHT_SHIFT [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! BIT_LEFT_SHIFT  [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! CONCATENATE     [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! REP_OP          [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY   [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! SEARCH_MODIFY_NEG [ reduce using rule 105 (expression -> expression AND_OP Marker expression .) ]
  ! OR_STR_OP       [ shift and go to state 104 ]
  ! XOR_STR_OP      [ shift and go to state 101 ]
  ! AND_STR_OP      [ shift and go to state 113 ]
  ! NOT_STR_OP      [ shift and go to state 89 ]
  ! AND_OP          [ shift and go to state 105 ]
  ! OR_OP           [ shift and go to state 96 ]
  ! ASSOCIATE_OP    [ shift and go to state 103 ]
  ! RANGE_OP        [ shift and go to state 91 ]


state 226

    (48) functionStatement -> SUB IDENTIFIER Markerscope block .

    VARIABLE        reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    ARRAY           reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LOCAL           reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PRIVATE         reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    RETURN          reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    IDENTIFIER      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    WHILE           reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    FOR             reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PRINT           reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SUB             reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LAST            reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    NEXT            reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    IF              reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    USE             reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    UNTIL           reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    DO              reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SWITCH          reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    PLUS_OP         reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    MINUS_OP        reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BIT_FLIP        reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    NOT_OP          reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    OPEN_PARANTHESIS reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    NUMBER          reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SCI_NOT         reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    FLOAT           reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    HEXADECIMAL     reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    OCTAL           reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    STRING          reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    RES_STRING      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SEMICOLON       reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    QUESTION_MARK   reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    OR_STR_OP       reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    XOR_STR_OP      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    AND_STR_OP      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    NOT_STR_OP      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    COMPARE_OP      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BIT_OR          reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BIT_XOR         reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BIT_AND         reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    AND_OP          reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    OR_OP           reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    EQUALS_OP       reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    NOT_EQUALS_OP   reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    GREATER_OP      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LESS_OP         reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    GREATER_EQUAL_OP reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    LESS_EQUAL_OP   reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    MULTIPLICATION_OP reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    DIVISION_OP     reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    MODULUS_OP      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    EXPONENT_OP     reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BIT_RIGHT_SHIFT reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BIT_LEFT_SHIFT  reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    CONCATENATE     reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    REP_OP          reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    ASSOCIATE_OP    reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    RANGE_OP        reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SEARCH_MODIFY   reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    SEARCH_MODIFY_NEG reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    $end            reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)
    BLOCK_ENDS      reduce using rule 48 (functionStatement -> SUB IDENTIFIER Markerscope block .)


state 227

    (61) dowhileStatement -> DO block WHILE Marker . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON

    OPEN_PARANTHESIS shift and go to state 251


state 228

    (59) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerwhile block
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 252
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 229

    (35) Marker_switch -> empty .

    CASE            reduce using rule 35 (Marker_switch -> empty .)


state 230

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch . CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS

    CASE            shift and go to state 253


state 231

    (55) assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET . ASSIGNMENT_OP expression
    (87) term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .

    ASSIGNMENT_OP   shift and go to state 254
    COLON           reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    OR_STR_OP       reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    XOR_STR_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_STR_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_STR_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMPARE_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_OR          reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_AND         reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_OP          reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    OR_OP           reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EQUALS_OP       reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_EQUALS_OP   reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_OP         reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_EQUAL_OP reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_EQUAL_OP   reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    PLUS_OP         reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MINUS_OP        reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MULTIPLICATION_OP reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    DIVISION_OP     reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MODULUS_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EXPONENT_OP     reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_RIGHT_SHIFT reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_LEFT_SHIFT  reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CONCATENATE     reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    REP_OP          reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    ASSOCIATE_OP    reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    RANGE_OP        reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY   reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY_NEG reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    QUESTION_MARK   reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)


state 232

    (88) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression . arrayList CLOSE_PARANTHESIS SEMICOLON
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression
    (89) arrayList -> . COMMA expression arrayList
    (90) arrayList -> . COMMA expression

    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111
    COMMA           shift and go to state 255

    arrayList                      shift and go to state 256

state 233

    (32) useStatement -> USE IDENTIFIER module_list SEMICOLON .

    VARIABLE        reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    ARRAY           reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    LOCAL           reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    PRIVATE         reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    RETURN          reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    WHILE           reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    FOR             reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    PRINT           reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    SUB             reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    LAST            reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    NEXT            reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    IF              reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    USE             reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    UNTIL           reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    DO              reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    SWITCH          reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    PLUS_OP         reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    MINUS_OP        reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    BIT_FLIP        reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    NOT_OP          reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    NUMBER          reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    SCI_NOT         reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    FLOAT           reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    HEXADECIMAL     reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    OCTAL           reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    STRING          reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    RES_STRING      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    SEMICOLON       reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    QUESTION_MARK   reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    OR_STR_OP       reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    XOR_STR_OP      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    AND_STR_OP      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    NOT_STR_OP      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    COMPARE_OP      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    BIT_OR          reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    BIT_XOR         reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    BIT_AND         reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    AND_OP          reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    OR_OP           reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    EQUALS_OP       reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    GREATER_OP      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    LESS_OP         reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    DIVISION_OP     reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    MODULUS_OP      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    EXPONENT_OP     reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    CONCATENATE     reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    REP_OP          reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    RANGE_OP        reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    $end            reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)
    BLOCK_ENDS      reduce using rule 32 (useStatement -> USE IDENTIFIER module_list SEMICOLON .)


state 234

    (71) declaration -> PRIVATE VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    IF              reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    USE             reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    UNTIL           reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    DO              reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    PLUS_OP         reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    MINUS_OP        reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BIT_FLIP        reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NOT_OP          reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NUMBER          reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SCI_NOT         reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    FLOAT           reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    HEXADECIMAL     reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    OCTAL           reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    STRING          reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    RES_STRING      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SEMICOLON       reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    QUESTION_MARK   reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    OR_STR_OP       reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    XOR_STR_OP      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    AND_STR_OP      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NOT_STR_OP      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    COMPARE_OP      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BIT_OR          reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BIT_XOR         reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BIT_AND         reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    AND_OP          reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    OR_OP           reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    EQUALS_OP       reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    GREATER_OP      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LESS_OP         reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    DIVISION_OP     reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    MODULUS_OP      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    EXPONENT_OP     reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    CONCATENATE     reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    REP_OP          reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    RANGE_OP        reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    $end            reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 71 (declaration -> PRIVATE VARIABLE decList SEMICOLON .)


state 235

    (57) assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 57 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression .)
    COLON           reduce using rule 57 (assignment -> PRIVATE VARIABLE ASSIGNMENT_OP expression .)
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 236

    (73) decList -> COMMA VARIABLE decList .

    SEMICOLON       reduce using rule 73 (decList -> COMMA VARIABLE decList .)


state 237

    (41) inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .

    VARIABLE        reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    ARRAY           reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    LOCAL           reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    PRIVATE         reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    RETURN          reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    WHILE           reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    FOR             reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    PRINT           reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    SUB             reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    LAST            reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    NEXT            reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    IF              reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    USE             reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    UNTIL           reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    DO              reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    SWITCH          reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    PLUS_OP         reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    MINUS_OP        reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    BIT_FLIP        reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    NOT_OP          reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    NUMBER          reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    SCI_NOT         reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    FLOAT           reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    HEXADECIMAL     reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    OCTAL           reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    STRING          reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    RES_STRING      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    SEMICOLON       reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    QUESTION_MARK   reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    OR_STR_OP       reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    XOR_STR_OP      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    AND_STR_OP      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    NOT_STR_OP      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    COMPARE_OP      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    BIT_OR          reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    BIT_XOR         reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    BIT_AND         reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    AND_OP          reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    OR_OP           reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    EQUALS_OP       reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    GREATER_OP      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    LESS_OP         reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    DIVISION_OP     reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    MODULUS_OP      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    EXPONENT_OP     reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    CONCATENATE     reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    REP_OP          reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    RANGE_OP        reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    BLOCK_ENDS      reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)
    $end            reduce using rule 41 (inputStatement -> VARIABLE ASSIGNMENT_OP USER_INPUT_OP SEMICOLON .)


state 238

    (72) declaration -> LOCAL VARIABLE decList SEMICOLON .

    VARIABLE        reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    ARRAY           reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LOCAL           reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRIVATE         reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    RETURN          reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IDENTIFIER      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    WHILE           reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    FOR             reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PRINT           reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SUB             reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LAST            reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NEXT            reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    IF              reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    USE             reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    UNTIL           reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    DO              reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SWITCH          reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    PLUS_OP         reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    MINUS_OP        reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BIT_FLIP        reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NOT_OP          reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NUMBER          reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SCI_NOT         reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    FLOAT           reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    HEXADECIMAL     reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    OCTAL           reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    STRING          reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    RES_STRING      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SEMICOLON       reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    QUESTION_MARK   reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    OR_STR_OP       reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    XOR_STR_OP      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    AND_STR_OP      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NOT_STR_OP      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    COMPARE_OP      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BIT_OR          reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BIT_XOR         reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BIT_AND         reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    AND_OP          reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    OR_OP           reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    EQUALS_OP       reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    GREATER_OP      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LESS_OP         reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    DIVISION_OP     reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    MODULUS_OP      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    EXPONENT_OP     reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    CONCATENATE     reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    REP_OP          reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    RANGE_OP        reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    $end            reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)
    BLOCK_ENDS      reduce using rule 72 (declaration -> LOCAL VARIABLE decList SEMICOLON .)


state 239

    (56) assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 56 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression .)
    COLON           reduce using rule 56 (assignment -> LOCAL VARIABLE ASSIGNMENT_OP expression .)
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 240

    (42) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif Marker block
    (43) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerif Marker block ELSE Markerelse block
    (44) Markerif -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerif                       shift and go to state 258
    empty                          shift and go to state 257

state 241

    (87) term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .

    OR_STR_OP       reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    XOR_STR_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_STR_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_STR_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMPARE_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_OR          reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_AND         reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    AND_OP          reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    OR_OP           reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EQUALS_OP       reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    NOT_EQUALS_OP   reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_OP         reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    GREATER_EQUAL_OP reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    LESS_EQUAL_OP   reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    PLUS_OP         reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MINUS_OP        reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MULTIPLICATION_OP reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    DIVISION_OP     reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    MODULUS_OP      reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    EXPONENT_OP     reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_RIGHT_SHIFT reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BIT_LEFT_SHIFT  reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CONCATENATE     reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    REP_OP          reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    ASSOCIATE_OP    reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    RANGE_OP        reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY   reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEARCH_MODIFY_NEG reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    CLOSE_PARANTHESIS reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    QUESTION_MARK   reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    SEMICOLON       reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    BLOCK_BEGIN     reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COLON           reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)
    COMMA           reduce using rule 87 (term -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET .)


state 242

    (51) printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .

    VARIABLE        reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    ARRAY           reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    UNTIL           reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    DO              reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    PLUS_OP         reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    MINUS_OP        reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BIT_FLIP        reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NOT_OP          reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NUMBER          reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SCI_NOT         reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    FLOAT           reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    HEXADECIMAL     reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    OCTAL           reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    STRING          reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    RES_STRING      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    QUESTION_MARK   reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    OR_STR_OP       reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    XOR_STR_OP      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    AND_STR_OP      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NOT_STR_OP      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    COMPARE_OP      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BIT_OR          reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BIT_XOR         reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BIT_AND         reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    AND_OP          reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    OR_OP           reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    EQUALS_OP       reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    GREATER_OP      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LESS_OP         reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    DIVISION_OP     reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    MODULUS_OP      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    EXPONENT_OP     reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    CONCATENATE     reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    REP_OP          reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    RANGE_OP        reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 51 (printStatement -> PRINT OPEN_PARANTHESIS expression CLOSE_PARANTHESIS SEMICOLON .)


state 243

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker . expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker . expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    SEMICOLON       reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 259
    empty                          shift and go to state 62

state 244

    (55) assignment -> ARRAY OPEN_BRACKET NUMBER . CLOSE_BRACKET ASSIGNMENT_OP expression

    CLOSE_BRACKET   shift and go to state 260


state 245

    (63) untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markeruntil block
    (64) Markeruntil -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    empty                          shift and go to state 261
    Markeruntil                    shift and go to state 262

state 246

    (95) expression -> empty .
    (69) assignment -> empty .

  ! reduce/reduce conflict for COLON resolved using rule 69 (assignment -> empty .)
    OR_STR_OP       reduce using rule 95 (expression -> empty .)
    XOR_STR_OP      reduce using rule 95 (expression -> empty .)
    AND_STR_OP      reduce using rule 95 (expression -> empty .)
    NOT_STR_OP      reduce using rule 95 (expression -> empty .)
    COMPARE_OP      reduce using rule 95 (expression -> empty .)
    BIT_OR          reduce using rule 95 (expression -> empty .)
    BIT_XOR         reduce using rule 95 (expression -> empty .)
    BIT_AND         reduce using rule 95 (expression -> empty .)
    AND_OP          reduce using rule 95 (expression -> empty .)
    OR_OP           reduce using rule 95 (expression -> empty .)
    EQUALS_OP       reduce using rule 95 (expression -> empty .)
    NOT_EQUALS_OP   reduce using rule 95 (expression -> empty .)
    GREATER_OP      reduce using rule 95 (expression -> empty .)
    LESS_OP         reduce using rule 95 (expression -> empty .)
    GREATER_EQUAL_OP reduce using rule 95 (expression -> empty .)
    LESS_EQUAL_OP   reduce using rule 95 (expression -> empty .)
    PLUS_OP         reduce using rule 95 (expression -> empty .)
    MINUS_OP        reduce using rule 95 (expression -> empty .)
    MULTIPLICATION_OP reduce using rule 95 (expression -> empty .)
    DIVISION_OP     reduce using rule 95 (expression -> empty .)
    MODULUS_OP      reduce using rule 95 (expression -> empty .)
    EXPONENT_OP     reduce using rule 95 (expression -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 95 (expression -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 95 (expression -> empty .)
    CONCATENATE     reduce using rule 95 (expression -> empty .)
    REP_OP          reduce using rule 95 (expression -> empty .)
    ASSOCIATE_OP    reduce using rule 95 (expression -> empty .)
    RANGE_OP        reduce using rule 95 (expression -> empty .)
    SEARCH_MODIFY   reduce using rule 95 (expression -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 95 (expression -> empty .)
    COLON           reduce using rule 69 (assignment -> empty .)

  ! COLON           [ reduce using rule 95 (expression -> empty .) ]


state 247

    (27) ternaryStatement -> expression QUESTION_MARK Marker_true Marker assignment . COLON Marker_false assignment

    COLON           shift and go to state 263


state 248

    (54) assignment -> VARIABLE . ASSIGNMENT_OP expression
    (58) assignment -> VARIABLE . ADV_ASSIGNMENT_OP expression
    (85) term -> VARIABLE .

    ASSIGNMENT_OP   shift and go to state 219
    ADV_ASSIGNMENT_OP shift and go to state 138
    COLON           reduce using rule 85 (term -> VARIABLE .)
    OR_STR_OP       reduce using rule 85 (term -> VARIABLE .)
    XOR_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    AND_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    NOT_STR_OP      reduce using rule 85 (term -> VARIABLE .)
    COMPARE_OP      reduce using rule 85 (term -> VARIABLE .)
    BIT_OR          reduce using rule 85 (term -> VARIABLE .)
    BIT_XOR         reduce using rule 85 (term -> VARIABLE .)
    BIT_AND         reduce using rule 85 (term -> VARIABLE .)
    AND_OP          reduce using rule 85 (term -> VARIABLE .)
    OR_OP           reduce using rule 85 (term -> VARIABLE .)
    EQUALS_OP       reduce using rule 85 (term -> VARIABLE .)
    NOT_EQUALS_OP   reduce using rule 85 (term -> VARIABLE .)
    GREATER_OP      reduce using rule 85 (term -> VARIABLE .)
    LESS_OP         reduce using rule 85 (term -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 85 (term -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 85 (term -> VARIABLE .)
    PLUS_OP         reduce using rule 85 (term -> VARIABLE .)
    MINUS_OP        reduce using rule 85 (term -> VARIABLE .)
    MULTIPLICATION_OP reduce using rule 85 (term -> VARIABLE .)
    DIVISION_OP     reduce using rule 85 (term -> VARIABLE .)
    MODULUS_OP      reduce using rule 85 (term -> VARIABLE .)
    EXPONENT_OP     reduce using rule 85 (term -> VARIABLE .)
    BIT_RIGHT_SHIFT reduce using rule 85 (term -> VARIABLE .)
    BIT_LEFT_SHIFT  reduce using rule 85 (term -> VARIABLE .)
    CONCATENATE     reduce using rule 85 (term -> VARIABLE .)
    REP_OP          reduce using rule 85 (term -> VARIABLE .)
    ASSOCIATE_OP    reduce using rule 85 (term -> VARIABLE .)
    RANGE_OP        reduce using rule 85 (term -> VARIABLE .)
    SEARCH_MODIFY   reduce using rule 85 (term -> VARIABLE .)
    SEARCH_MODIFY_NEG reduce using rule 85 (term -> VARIABLE .)


state 249

    (55) assignment -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (87) term -> ARRAY . OPEN_BRACKET NUMBER CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 124


state 250

    (26) ternaryStatement -> expression QUESTION_MARK Marker_true Marker expression . COLON Marker_false expression
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    COLON           shift and go to state 264
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 251

    (61) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS . expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 265
    empty                          shift and go to state 62

state 252

    (59) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerwhile block
    (60) Markerwhile -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    empty                          shift and go to state 267
    Markerwhile                    shift and go to state 266

state 253

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE . OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS

    OPEN_PARANTHESIS shift and go to state 268


state 254

    (55) assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    COLON           reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 269
    empty                          shift and go to state 62

state 255

    (89) arrayList -> COMMA . expression arrayList
    (90) arrayList -> COMMA . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 270
    empty                          shift and go to state 62

state 256

    (88) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList . CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS shift and go to state 271


state 257

    (44) Markerif -> empty .

    BLOCK_BEGIN     reduce using rule 44 (Markerif -> empty .)


state 258

    (42) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . Marker block
    (43) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif . Marker block ELSE Markerelse block
    (113) Marker -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 272
    empty                          shift and go to state 60

state 259

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression . SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression . SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       shift and go to state 273
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 260

    (55) assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET . ASSIGNMENT_OP expression

    ASSIGNMENT_OP   shift and go to state 254


state 261

    (64) Markeruntil -> empty .

    BLOCK_BEGIN     reduce using rule 64 (Markeruntil -> empty .)


state 262

    (63) untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 274

state 263

    (27) ternaryStatement -> expression QUESTION_MARK Marker_true Marker assignment COLON . Marker_false assignment
    (29) Marker_false -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    LOCAL           reduce using rule 6 (empty -> .)
    PRIVATE         reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)

    Marker_false                   shift and go to state 275
    empty                          shift and go to state 276

state 264

    (26) ternaryStatement -> expression QUESTION_MARK Marker_true Marker expression COLON . Marker_false expression
    (29) Marker_false -> . empty
    (6) empty -> .

    PLUS_OP         reduce using rule 6 (empty -> .)
    MINUS_OP        reduce using rule 6 (empty -> .)
    BIT_FLIP        reduce using rule 6 (empty -> .)
    NOT_OP          reduce using rule 6 (empty -> .)
    VARIABLE        reduce using rule 6 (empty -> .)
    OPEN_PARANTHESIS reduce using rule 6 (empty -> .)
    ARRAY           reduce using rule 6 (empty -> .)
    IDENTIFIER      reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    SCI_NOT         reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    HEXADECIMAL     reduce using rule 6 (empty -> .)
    OCTAL           reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    RES_STRING      reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 276
    Marker_false                   shift and go to state 277

state 265

    (61) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression . CLOSE_PARANTHESIS Markerdowhile SEMICOLON
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 278
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 266

    (59) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 279

state 267

    (60) Markerwhile -> empty .

    BLOCK_BEGIN     reduce using rule 60 (Markerwhile -> empty .)


state 268

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS . expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    empty                          shift and go to state 62
    expression                     shift and go to state 280

state 269

    (55) assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 55 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression .)
    COLON           reduce using rule 55 (assignment -> ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression .)
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 270

    (89) arrayList -> COMMA expression . arrayList
    (90) arrayList -> COMMA expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression
    (89) arrayList -> . COMMA expression arrayList
    (90) arrayList -> . COMMA expression

    CLOSE_PARANTHESIS reduce using rule 90 (arrayList -> COMMA expression .)
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111
    COMMA           shift and go to state 255

    arrayList                      shift and go to state 281

state 271

    (88) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 282


state 272

    (42) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker . block
    (43) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker . block ELSE Markerelse block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 283

state 273

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON . Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON . Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (113) Marker -> . empty
    (6) empty -> .

    VARIABLE        reduce using rule 6 (empty -> .)

    Marker                         shift and go to state 284
    empty                          shift and go to state 60

state 274

    (63) untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .

    VARIABLE        reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    ARRAY           reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    LOCAL           reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    PRIVATE         reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    RETURN          reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    IDENTIFIER      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    WHILE           reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    FOR             reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    PRINT           reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    SUB             reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    LAST            reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    NEXT            reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    IF              reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    USE             reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    UNTIL           reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    DO              reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    SWITCH          reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    PLUS_OP         reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    MINUS_OP        reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    BIT_FLIP        reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    NOT_OP          reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    OPEN_PARANTHESIS reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    NUMBER          reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    SCI_NOT         reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    FLOAT           reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    HEXADECIMAL     reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    OCTAL           reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    STRING          reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    RES_STRING      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    SEMICOLON       reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    QUESTION_MARK   reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    OR_STR_OP       reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    XOR_STR_OP      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    AND_STR_OP      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    NOT_STR_OP      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    COMPARE_OP      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    BIT_OR          reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    BIT_XOR         reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    BIT_AND         reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    AND_OP          reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    OR_OP           reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    EQUALS_OP       reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    NOT_EQUALS_OP   reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    GREATER_OP      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    LESS_OP         reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    GREATER_EQUAL_OP reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    LESS_EQUAL_OP   reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    MULTIPLICATION_OP reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    DIVISION_OP     reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    MODULUS_OP      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    EXPONENT_OP     reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    BIT_RIGHT_SHIFT reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    BIT_LEFT_SHIFT  reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    CONCATENATE     reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    REP_OP          reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    ASSOCIATE_OP    reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    RANGE_OP        reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    SEARCH_MODIFY   reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    SEARCH_MODIFY_NEG reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    $end            reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)
    BLOCK_ENDS      reduce using rule 63 (untillStatement -> UNTIL Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markeruntil block .)


state 275

    (27) ternaryStatement -> expression QUESTION_MARK Marker_true Marker assignment COLON Marker_false . assignment
    (54) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (55) assignment -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET ASSIGNMENT_OP expression
    (56) assignment -> . LOCAL VARIABLE ASSIGNMENT_OP expression
    (57) assignment -> . PRIVATE VARIABLE ASSIGNMENT_OP expression
    (58) assignment -> . VARIABLE ADV_ASSIGNMENT_OP expression
    (69) assignment -> . empty
    (6) empty -> .

    VARIABLE        shift and go to state 154
    ARRAY           shift and go to state 157
    LOCAL           shift and go to state 153
    PRIVATE         shift and go to state 156
    SEMICOLON       reduce using rule 6 (empty -> .)

    assignment                     shift and go to state 285
    empty                          shift and go to state 155

state 276

    (29) Marker_false -> empty .

    PLUS_OP         reduce using rule 29 (Marker_false -> empty .)
    MINUS_OP        reduce using rule 29 (Marker_false -> empty .)
    BIT_FLIP        reduce using rule 29 (Marker_false -> empty .)
    NOT_OP          reduce using rule 29 (Marker_false -> empty .)
    VARIABLE        reduce using rule 29 (Marker_false -> empty .)
    OPEN_PARANTHESIS reduce using rule 29 (Marker_false -> empty .)
    ARRAY           reduce using rule 29 (Marker_false -> empty .)
    IDENTIFIER      reduce using rule 29 (Marker_false -> empty .)
    NUMBER          reduce using rule 29 (Marker_false -> empty .)
    SCI_NOT         reduce using rule 29 (Marker_false -> empty .)
    FLOAT           reduce using rule 29 (Marker_false -> empty .)
    HEXADECIMAL     reduce using rule 29 (Marker_false -> empty .)
    OCTAL           reduce using rule 29 (Marker_false -> empty .)
    STRING          reduce using rule 29 (Marker_false -> empty .)
    RES_STRING      reduce using rule 29 (Marker_false -> empty .)
    OR_STR_OP       reduce using rule 29 (Marker_false -> empty .)
    XOR_STR_OP      reduce using rule 29 (Marker_false -> empty .)
    AND_STR_OP      reduce using rule 29 (Marker_false -> empty .)
    NOT_STR_OP      reduce using rule 29 (Marker_false -> empty .)
    COMPARE_OP      reduce using rule 29 (Marker_false -> empty .)
    BIT_OR          reduce using rule 29 (Marker_false -> empty .)
    BIT_XOR         reduce using rule 29 (Marker_false -> empty .)
    BIT_AND         reduce using rule 29 (Marker_false -> empty .)
    AND_OP          reduce using rule 29 (Marker_false -> empty .)
    OR_OP           reduce using rule 29 (Marker_false -> empty .)
    EQUALS_OP       reduce using rule 29 (Marker_false -> empty .)
    NOT_EQUALS_OP   reduce using rule 29 (Marker_false -> empty .)
    GREATER_OP      reduce using rule 29 (Marker_false -> empty .)
    LESS_OP         reduce using rule 29 (Marker_false -> empty .)
    GREATER_EQUAL_OP reduce using rule 29 (Marker_false -> empty .)
    LESS_EQUAL_OP   reduce using rule 29 (Marker_false -> empty .)
    MULTIPLICATION_OP reduce using rule 29 (Marker_false -> empty .)
    DIVISION_OP     reduce using rule 29 (Marker_false -> empty .)
    MODULUS_OP      reduce using rule 29 (Marker_false -> empty .)
    EXPONENT_OP     reduce using rule 29 (Marker_false -> empty .)
    BIT_RIGHT_SHIFT reduce using rule 29 (Marker_false -> empty .)
    BIT_LEFT_SHIFT  reduce using rule 29 (Marker_false -> empty .)
    CONCATENATE     reduce using rule 29 (Marker_false -> empty .)
    REP_OP          reduce using rule 29 (Marker_false -> empty .)
    ASSOCIATE_OP    reduce using rule 29 (Marker_false -> empty .)
    RANGE_OP        reduce using rule 29 (Marker_false -> empty .)
    SEARCH_MODIFY   reduce using rule 29 (Marker_false -> empty .)
    SEARCH_MODIFY_NEG reduce using rule 29 (Marker_false -> empty .)
    SEMICOLON       reduce using rule 29 (Marker_false -> empty .)
    LOCAL           reduce using rule 29 (Marker_false -> empty .)
    PRIVATE         reduce using rule 29 (Marker_false -> empty .)


state 277

    (26) ternaryStatement -> expression QUESTION_MARK Marker_true Marker expression COLON Marker_false . expression
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 286
    empty                          shift and go to state 62

state 278

    (61) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS . Markerdowhile SEMICOLON
    (62) Markerdowhile -> . empty
    (6) empty -> .

    SEMICOLON       reduce using rule 6 (empty -> .)

    empty                          shift and go to state 287
    Markerdowhile                  shift and go to state 288

state 279

    (59) whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .

    VARIABLE        reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    ARRAY           reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LOCAL           reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRIVATE         reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    RETURN          reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IDENTIFIER      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    WHILE           reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    FOR             reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PRINT           reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SUB             reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LAST            reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NEXT            reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    IF              reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    USE             reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    UNTIL           reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    DO              reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SWITCH          reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    PLUS_OP         reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    MINUS_OP        reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BIT_FLIP        reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NOT_OP          reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    OPEN_PARANTHESIS reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NUMBER          reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SCI_NOT         reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    FLOAT           reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    HEXADECIMAL     reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    OCTAL           reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    STRING          reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    RES_STRING      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SEMICOLON       reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    QUESTION_MARK   reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    OR_STR_OP       reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    XOR_STR_OP      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    AND_STR_OP      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NOT_STR_OP      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    COMPARE_OP      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BIT_OR          reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BIT_XOR         reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BIT_AND         reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    AND_OP          reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    OR_OP           reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    EQUALS_OP       reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    NOT_EQUALS_OP   reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    GREATER_OP      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LESS_OP         reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    GREATER_EQUAL_OP reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    LESS_EQUAL_OP   reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    MULTIPLICATION_OP reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    DIVISION_OP     reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    MODULUS_OP      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    EXPONENT_OP     reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BIT_RIGHT_SHIFT reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BIT_LEFT_SHIFT  reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    CONCATENATE     reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    REP_OP          reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    ASSOCIATE_OP    reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    RANGE_OP        reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SEARCH_MODIFY   reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    SEARCH_MODIFY_NEG reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    BLOCK_ENDS      reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)
    $end            reduce using rule 59 (whileStatement -> WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerwhile block .)


state 280

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression . Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression
    (39) Marker_caselist -> . empty
    (6) empty -> .

    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    empty                          shift and go to state 289
    Marker_caselist                shift and go to state 290

state 281

    (89) arrayList -> COMMA expression arrayList .

    CLOSE_PARANTHESIS reduce using rule 89 (arrayList -> COMMA expression arrayList .)


state 282

    (88) array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .

    VARIABLE        reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    ARRAY           reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    LOCAL           reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    RETURN          reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    WHILE           reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    FOR             reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    PRINT           reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SUB             reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    LAST            reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    NEXT            reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    IF              reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    USE             reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    UNTIL           reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    DO              reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SWITCH          reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    PLUS_OP         reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    MINUS_OP        reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BIT_FLIP        reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    NOT_OP          reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    NUMBER          reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SCI_NOT         reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    FLOAT           reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    HEXADECIMAL     reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    OCTAL           reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    STRING          reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    RES_STRING      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    QUESTION_MARK   reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    OR_STR_OP       reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    XOR_STR_OP      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    AND_STR_OP      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    NOT_STR_OP      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    COMPARE_OP      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BIT_OR          reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BIT_XOR         reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BIT_AND         reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    AND_OP          reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    OR_OP           reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    EQUALS_OP       reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    GREATER_OP      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    LESS_OP         reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    DIVISION_OP     reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    MODULUS_OP      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    EXPONENT_OP     reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    CONCATENATE     reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    REP_OP          reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    RANGE_OP        reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    $end            reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)
    BLOCK_ENDS      reduce using rule 88 (array_assignment -> ARRAY ASSIGNMENT_OP OPEN_PARANTHESIS expression arrayList CLOSE_PARANTHESIS SEMICOLON .)


state 283

    (42) ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .
    (43) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block . ELSE Markerelse block

    VARIABLE        reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    ARRAY           reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LOCAL           reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PRIVATE         reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    RETURN          reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    IDENTIFIER      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    WHILE           reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    FOR             reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PRINT           reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SUB             reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LAST            reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    NEXT            reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    IF              reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    USE             reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    UNTIL           reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    DO              reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SWITCH          reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    PLUS_OP         reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    MINUS_OP        reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BIT_FLIP        reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    NOT_OP          reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    OPEN_PARANTHESIS reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    NUMBER          reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SCI_NOT         reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    FLOAT           reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    HEXADECIMAL     reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    OCTAL           reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    STRING          reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    RES_STRING      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SEMICOLON       reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    QUESTION_MARK   reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    OR_STR_OP       reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    XOR_STR_OP      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    AND_STR_OP      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    NOT_STR_OP      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    COMPARE_OP      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BIT_OR          reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BIT_XOR         reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BIT_AND         reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    AND_OP          reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    OR_OP           reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    EQUALS_OP       reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    NOT_EQUALS_OP   reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    GREATER_OP      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LESS_OP         reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    GREATER_EQUAL_OP reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    LESS_EQUAL_OP   reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    MULTIPLICATION_OP reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    DIVISION_OP     reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    MODULUS_OP      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    EXPONENT_OP     reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BIT_RIGHT_SHIFT reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BIT_LEFT_SHIFT  reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    CONCATENATE     reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    REP_OP          reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    ASSOCIATE_OP    reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    RANGE_OP        reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SEARCH_MODIFY   reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    SEARCH_MODIFY_NEG reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    BLOCK_ENDS      reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    $end            reduce using rule 42 (ifthen -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block .)
    ELSE            shift and go to state 291


state 284

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker . VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker . VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

    VARIABLE        shift and go to state 292


state 285

    (27) ternaryStatement -> expression QUESTION_MARK Marker_true Marker assignment COLON Marker_false assignment .

    SEMICOLON       reduce using rule 27 (ternaryStatement -> expression QUESTION_MARK Marker_true Marker assignment COLON Marker_false assignment .)


state 286

    (26) ternaryStatement -> expression QUESTION_MARK Marker_true Marker expression COLON Marker_false expression .
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    SEMICOLON       reduce using rule 26 (ternaryStatement -> expression QUESTION_MARK Marker_true Marker expression COLON Marker_false expression .)
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 287

    (62) Markerdowhile -> empty .

    SEMICOLON       reduce using rule 62 (Markerdowhile -> empty .)


state 288

    (61) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile . SEMICOLON

    SEMICOLON       shift and go to state 293


state 289

    (39) Marker_caselist -> empty .

    CLOSE_PARANTHESIS reduce using rule 39 (Marker_caselist -> empty .)


state 290

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist . CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS

    CLOSE_PARANTHESIS shift and go to state 294


state 291

    (43) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE . Markerelse block
    (45) Markerelse -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerelse                     shift and go to state 296
    empty                          shift and go to state 295

state 292

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE . ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block
    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE . ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block

    ASSIGNMENT_OP   shift and go to state 298
    ADV_ASSIGNMENT_OP shift and go to state 297


state 293

    (61) dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .

    VARIABLE        reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    ARRAY           reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    LOCAL           reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    PRIVATE         reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    RETURN          reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    IDENTIFIER      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    WHILE           reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    FOR             reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    PRINT           reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    SUB             reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    LAST            reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    NEXT            reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    IF              reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    USE             reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    UNTIL           reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    DO              reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    SWITCH          reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    PLUS_OP         reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    MINUS_OP        reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    BIT_FLIP        reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    NOT_OP          reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    OPEN_PARANTHESIS reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    NUMBER          reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    SCI_NOT         reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    FLOAT           reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    HEXADECIMAL     reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    OCTAL           reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    STRING          reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    RES_STRING      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    SEMICOLON       reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    QUESTION_MARK   reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    OR_STR_OP       reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    XOR_STR_OP      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    AND_STR_OP      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    NOT_STR_OP      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    COMPARE_OP      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    BIT_OR          reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    BIT_XOR         reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    BIT_AND         reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    AND_OP          reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    OR_OP           reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    EQUALS_OP       reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    NOT_EQUALS_OP   reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    GREATER_OP      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    LESS_OP         reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    GREATER_EQUAL_OP reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    LESS_EQUAL_OP   reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    MULTIPLICATION_OP reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    DIVISION_OP     reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    MODULUS_OP      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    EXPONENT_OP     reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    BIT_RIGHT_SHIFT reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    BIT_LEFT_SHIFT  reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    CONCATENATE     reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    REP_OP          reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    ASSOCIATE_OP    reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    RANGE_OP        reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    SEARCH_MODIFY   reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    SEARCH_MODIFY_NEG reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    $end            reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)
    BLOCK_ENDS      reduce using rule 61 (dowhileStatement -> DO block WHILE Marker OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerdowhile SEMICOLON .)


state 294

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS . block Marker_quit caselist BLOCK_ENDS
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 299

state 295

    (45) Markerelse -> empty .

    BLOCK_BEGIN     reduce using rule 45 (Markerelse -> empty .)


state 296

    (43) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 300

state 297

    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP . expression CLOSE_PARANTHESIS Markerfor block
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 301
    empty                          shift and go to state 62

state 298

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP . expression CLOSE_PARANTHESIS Markerfor block
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 302
    empty                          shift and go to state 62

state 299

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block . Marker_quit caselist BLOCK_ENDS
    (40) Marker_quit -> . empty
    (6) empty -> .

    CASE            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker_quit                    shift and go to state 304
    empty                          shift and go to state 303

state 300

    (43) ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .

    VARIABLE        reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    ARRAY           reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LOCAL           reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PRIVATE         reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    RETURN          reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    IDENTIFIER      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    WHILE           reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    FOR             reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PRINT           reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SUB             reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LAST            reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    NEXT            reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    IF              reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    USE             reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    UNTIL           reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    DO              reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SWITCH          reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    PLUS_OP         reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    MINUS_OP        reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BIT_FLIP        reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    NOT_OP          reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    OPEN_PARANTHESIS reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    NUMBER          reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SCI_NOT         reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    FLOAT           reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    HEXADECIMAL     reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    OCTAL           reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    STRING          reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    RES_STRING      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SEMICOLON       reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    QUESTION_MARK   reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    OR_STR_OP       reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    XOR_STR_OP      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    AND_STR_OP      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    NOT_STR_OP      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    COMPARE_OP      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BIT_OR          reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BIT_XOR         reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BIT_AND         reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    AND_OP          reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    OR_OP           reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    EQUALS_OP       reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    NOT_EQUALS_OP   reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    GREATER_OP      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LESS_OP         reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    GREATER_EQUAL_OP reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    LESS_EQUAL_OP   reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    MULTIPLICATION_OP reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    DIVISION_OP     reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    MODULUS_OP      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    EXPONENT_OP     reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BIT_RIGHT_SHIFT reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BIT_LEFT_SHIFT  reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    CONCATENATE     reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    REP_OP          reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    ASSOCIATE_OP    reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    RANGE_OP        reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SEARCH_MODIFY   reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    SEARCH_MODIFY_NEG reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    $end            reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)
    BLOCK_ENDS      reduce using rule 43 (ifthenelse -> IF OPEN_PARANTHESIS expression CLOSE_PARANTHESIS Markerif Marker block ELSE Markerelse block .)


state 301

    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression . CLOSE_PARANTHESIS Markerfor block
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 305
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 302

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression . CLOSE_PARANTHESIS Markerfor block
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression

    CLOSE_PARANTHESIS shift and go to state 306
    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111


state 303

    (40) Marker_quit -> empty .

    BLOCK_ENDS      reduce using rule 40 (Marker_quit -> empty .)
    CASE            reduce using rule 40 (Marker_quit -> empty .)
    ELSE            reduce using rule 40 (Marker_quit -> empty .)


state 304

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit . caselist BLOCK_ENDS
    (36) caselist -> . CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist
    (37) caselist -> . ELSE block Marker_quit
    (38) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 307
    ELSE            shift and go to state 310
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 308
    empty                          shift and go to state 309

state 305

    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS . Markerfor block
    (68) Markerfor -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerfor                      shift and go to state 311
    empty                          shift and go to state 312

state 306

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS . Markerfor block
    (68) Markerfor -> . empty
    (6) empty -> .

    BLOCK_BEGIN     reduce using rule 6 (empty -> .)

    Markerfor                      shift and go to state 313
    empty                          shift and go to state 312

state 307

    (36) caselist -> CASE . OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist

    OPEN_PARANTHESIS shift and go to state 314


state 308

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist . BLOCK_ENDS

    BLOCK_ENDS      shift and go to state 315


state 309

    (38) caselist -> empty .

    BLOCK_ENDS      reduce using rule 38 (caselist -> empty .)


state 310

    (37) caselist -> ELSE . block Marker_quit
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 316

state 311

    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 317

state 312

    (68) Markerfor -> empty .

    BLOCK_BEGIN     reduce using rule 68 (Markerfor -> empty .)


state 313

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor . block
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 318

state 314

    (36) caselist -> CASE OPEN_PARANTHESIS . expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist
    (91) expression -> . PLUS_OP expression
    (92) expression -> . MINUS_OP expression
    (93) expression -> . BIT_FLIP expression
    (94) expression -> . NOT_OP expression
    (95) expression -> . empty
    (96) expression -> . term
    (97) expression -> . expression OR_STR_OP expression
    (98) expression -> . expression XOR_STR_OP expression
    (99) expression -> . expression AND_STR_OP expression
    (100) expression -> . expression NOT_STR_OP expression
    (101) expression -> . expression COMPARE_OP expression
    (102) expression -> . expression BIT_OR expression
    (103) expression -> . expression BIT_XOR expression
    (104) expression -> . expression BIT_AND expression
    (105) expression -> . expression AND_OP Marker expression
    (106) expression -> . expression OR_OP Marker expression
    (107) expression -> . expression EQUALS_OP expression
    (108) expression -> . expression NOT_EQUALS_OP expression
    (109) expression -> . expression GREATER_OP expression
    (110) expression -> . expression LESS_OP expression
    (111) expression -> . expression GREATER_EQUAL_OP expression
    (112) expression -> . expression LESS_EQUAL_OP expression
    (114) expression -> . expression PLUS_OP expression
    (115) expression -> . expression MINUS_OP expression
    (116) expression -> . expression MULTIPLICATION_OP expression
    (117) expression -> . expression DIVISION_OP expression
    (118) expression -> . expression MODULUS_OP expression
    (119) expression -> . expression EXPONENT_OP expression
    (120) expression -> . expression BIT_RIGHT_SHIFT expression
    (121) expression -> . expression BIT_LEFT_SHIFT expression
    (122) expression -> . expression CONCATENATE expression
    (123) expression -> . expression REP_OP expression
    (124) expression -> . expression ASSOCIATE_OP expression
    (125) expression -> . expression RANGE_OP expression
    (126) expression -> . expression SEARCH_MODIFY expression
    (127) expression -> . expression SEARCH_MODIFY_NEG expression
    (6) empty -> .
    (75) term -> . functionCall
    (83) term -> . number
    (84) term -> . string
    (85) term -> . VARIABLE
    (86) term -> . OPEN_PARANTHESIS expression CLOSE_PARANTHESIS
    (87) term -> . ARRAY OPEN_BRACKET NUMBER CLOSE_BRACKET
    (50) functionCall -> . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS
    (78) number -> . NUMBER
    (79) number -> . SCI_NOT
    (80) number -> . FLOAT
    (81) number -> . HEXADECIMAL
    (82) number -> . OCTAL
    (76) string -> . STRING
    (77) string -> . RES_STRING

    PLUS_OP         shift and go to state 58
    MINUS_OP        shift and go to state 27
    BIT_FLIP        shift and go to state 51
    NOT_OP          shift and go to state 4
    OR_STR_OP       reduce using rule 6 (empty -> .)
    XOR_STR_OP      reduce using rule 6 (empty -> .)
    AND_STR_OP      reduce using rule 6 (empty -> .)
    NOT_STR_OP      reduce using rule 6 (empty -> .)
    COMPARE_OP      reduce using rule 6 (empty -> .)
    BIT_OR          reduce using rule 6 (empty -> .)
    BIT_XOR         reduce using rule 6 (empty -> .)
    BIT_AND         reduce using rule 6 (empty -> .)
    AND_OP          reduce using rule 6 (empty -> .)
    OR_OP           reduce using rule 6 (empty -> .)
    EQUALS_OP       reduce using rule 6 (empty -> .)
    NOT_EQUALS_OP   reduce using rule 6 (empty -> .)
    GREATER_OP      reduce using rule 6 (empty -> .)
    LESS_OP         reduce using rule 6 (empty -> .)
    GREATER_EQUAL_OP reduce using rule 6 (empty -> .)
    LESS_EQUAL_OP   reduce using rule 6 (empty -> .)
    MULTIPLICATION_OP reduce using rule 6 (empty -> .)
    DIVISION_OP     reduce using rule 6 (empty -> .)
    MODULUS_OP      reduce using rule 6 (empty -> .)
    EXPONENT_OP     reduce using rule 6 (empty -> .)
    BIT_RIGHT_SHIFT reduce using rule 6 (empty -> .)
    BIT_LEFT_SHIFT  reduce using rule 6 (empty -> .)
    CONCATENATE     reduce using rule 6 (empty -> .)
    REP_OP          reduce using rule 6 (empty -> .)
    ASSOCIATE_OP    reduce using rule 6 (empty -> .)
    RANGE_OP        reduce using rule 6 (empty -> .)
    SEARCH_MODIFY   reduce using rule 6 (empty -> .)
    SEARCH_MODIFY_NEG reduce using rule 6 (empty -> .)
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)
    VARIABLE        shift and go to state 64
    OPEN_PARANTHESIS shift and go to state 2
    ARRAY           shift and go to state 61
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 47
    SCI_NOT         shift and go to state 41
    FLOAT           shift and go to state 57
    HEXADECIMAL     shift and go to state 18
    OCTAL           shift and go to state 11
    STRING          shift and go to state 52
    RES_STRING      shift and go to state 15

  ! PLUS_OP         [ reduce using rule 6 (empty -> .) ]
  ! MINUS_OP        [ reduce using rule 6 (empty -> .) ]

    term                           shift and go to state 13
    string                         shift and go to state 49
    number                         shift and go to state 29
    functionCall                   shift and go to state 63
    expression                     shift and go to state 319
    empty                          shift and go to state 62

state 315

    (34) switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .

    VARIABLE        reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    ARRAY           reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    LOCAL           reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    PRIVATE         reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    RETURN          reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    IDENTIFIER      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    WHILE           reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    FOR             reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    PRINT           reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    SUB             reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    LAST            reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    NEXT            reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    IF              reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    USE             reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    UNTIL           reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    DO              reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    SWITCH          reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    PLUS_OP         reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    MINUS_OP        reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    BIT_FLIP        reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    NOT_OP          reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    OPEN_PARANTHESIS reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    NUMBER          reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    SCI_NOT         reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    FLOAT           reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    HEXADECIMAL     reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    OCTAL           reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    STRING          reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    RES_STRING      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    SEMICOLON       reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    QUESTION_MARK   reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    OR_STR_OP       reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    XOR_STR_OP      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    AND_STR_OP      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    NOT_STR_OP      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    COMPARE_OP      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    BIT_OR          reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    BIT_XOR         reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    BIT_AND         reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    AND_OP          reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    OR_OP           reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    EQUALS_OP       reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    NOT_EQUALS_OP   reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    GREATER_OP      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    LESS_OP         reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    GREATER_EQUAL_OP reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    LESS_EQUAL_OP   reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    MULTIPLICATION_OP reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    DIVISION_OP     reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    MODULUS_OP      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    EXPONENT_OP     reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    BIT_RIGHT_SHIFT reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    BIT_LEFT_SHIFT  reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    CONCATENATE     reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    REP_OP          reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    ASSOCIATE_OP    reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    RANGE_OP        reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    SEARCH_MODIFY   reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    SEARCH_MODIFY_NEG reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    BLOCK_ENDS      reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)
    $end            reduce using rule 34 (switchStatement -> SWITCH expression BLOCK_BEGIN Marker_switch CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist BLOCK_ENDS .)


state 316

    (37) caselist -> ELSE block . Marker_quit
    (40) Marker_quit -> . empty
    (6) empty -> .

    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker_quit                    shift and go to state 320
    empty                          shift and go to state 303

state 317

    (66) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .

    VARIABLE        reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    ARRAY           reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LOCAL           reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PRIVATE         reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    RETURN          reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    IDENTIFIER      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    WHILE           reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    FOR             reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PRINT           reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SUB             reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LAST            reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NEXT            reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    IF              reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    USE             reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    UNTIL           reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    DO              reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SWITCH          reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PLUS_OP         reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    MINUS_OP        reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_FLIP        reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NOT_OP          reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    OPEN_PARANTHESIS reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NUMBER          reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SCI_NOT         reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    FLOAT           reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    HEXADECIMAL     reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    OCTAL           reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    STRING          reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    RES_STRING      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SEMICOLON       reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    QUESTION_MARK   reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    OR_STR_OP       reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    XOR_STR_OP      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    AND_STR_OP      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NOT_STR_OP      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    COMPARE_OP      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_OR          reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_XOR         reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_AND         reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    AND_OP          reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    OR_OP           reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    EQUALS_OP       reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NOT_EQUALS_OP   reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    GREATER_OP      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LESS_OP         reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    GREATER_EQUAL_OP reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LESS_EQUAL_OP   reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    MULTIPLICATION_OP reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    DIVISION_OP     reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    MODULUS_OP      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    EXPONENT_OP     reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_RIGHT_SHIFT reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_LEFT_SHIFT  reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    CONCATENATE     reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    REP_OP          reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    ASSOCIATE_OP    reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    RANGE_OP        reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SEARCH_MODIFY   reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SEARCH_MODIFY_NEG reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    $end            reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BLOCK_ENDS      reduce using rule 66 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ADV_ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)


state 318

    (65) forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .

    VARIABLE        reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    ARRAY           reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LOCAL           reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PRIVATE         reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    RETURN          reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    IDENTIFIER      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    WHILE           reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    FOR             reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PRINT           reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SUB             reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LAST            reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NEXT            reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    IF              reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    USE             reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    UNTIL           reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    DO              reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SWITCH          reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    PLUS_OP         reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    MINUS_OP        reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_FLIP        reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NOT_OP          reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    OPEN_PARANTHESIS reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NUMBER          reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SCI_NOT         reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    FLOAT           reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    HEXADECIMAL     reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    OCTAL           reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    STRING          reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    RES_STRING      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SEMICOLON       reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    QUESTION_MARK   reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    OR_STR_OP       reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    XOR_STR_OP      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    AND_STR_OP      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NOT_STR_OP      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    COMPARE_OP      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_OR          reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_XOR         reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_AND         reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    AND_OP          reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    OR_OP           reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    EQUALS_OP       reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    NOT_EQUALS_OP   reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    GREATER_OP      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LESS_OP         reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    GREATER_EQUAL_OP reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    LESS_EQUAL_OP   reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    MULTIPLICATION_OP reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    DIVISION_OP     reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    MODULUS_OP      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    EXPONENT_OP     reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_RIGHT_SHIFT reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BIT_LEFT_SHIFT  reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    CONCATENATE     reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    REP_OP          reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    ASSOCIATE_OP    reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    RANGE_OP        reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SEARCH_MODIFY   reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    SEARCH_MODIFY_NEG reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    $end            reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)
    BLOCK_ENDS      reduce using rule 65 (forStatement -> FOR OPEN_PARANTHESIS assignment SEMICOLON Marker expression SEMICOLON Marker VARIABLE ASSIGNMENT_OP expression CLOSE_PARANTHESIS Markerfor block .)


state 319

    (36) caselist -> CASE OPEN_PARANTHESIS expression . Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist
    (97) expression -> expression . OR_STR_OP expression
    (98) expression -> expression . XOR_STR_OP expression
    (99) expression -> expression . AND_STR_OP expression
    (100) expression -> expression . NOT_STR_OP expression
    (101) expression -> expression . COMPARE_OP expression
    (102) expression -> expression . BIT_OR expression
    (103) expression -> expression . BIT_XOR expression
    (104) expression -> expression . BIT_AND expression
    (105) expression -> expression . AND_OP Marker expression
    (106) expression -> expression . OR_OP Marker expression
    (107) expression -> expression . EQUALS_OP expression
    (108) expression -> expression . NOT_EQUALS_OP expression
    (109) expression -> expression . GREATER_OP expression
    (110) expression -> expression . LESS_OP expression
    (111) expression -> expression . GREATER_EQUAL_OP expression
    (112) expression -> expression . LESS_EQUAL_OP expression
    (114) expression -> expression . PLUS_OP expression
    (115) expression -> expression . MINUS_OP expression
    (116) expression -> expression . MULTIPLICATION_OP expression
    (117) expression -> expression . DIVISION_OP expression
    (118) expression -> expression . MODULUS_OP expression
    (119) expression -> expression . EXPONENT_OP expression
    (120) expression -> expression . BIT_RIGHT_SHIFT expression
    (121) expression -> expression . BIT_LEFT_SHIFT expression
    (122) expression -> expression . CONCATENATE expression
    (123) expression -> expression . REP_OP expression
    (124) expression -> expression . ASSOCIATE_OP expression
    (125) expression -> expression . RANGE_OP expression
    (126) expression -> expression . SEARCH_MODIFY expression
    (127) expression -> expression . SEARCH_MODIFY_NEG expression
    (39) Marker_caselist -> . empty
    (6) empty -> .

    OR_STR_OP       shift and go to state 104
    XOR_STR_OP      shift and go to state 101
    AND_STR_OP      shift and go to state 113
    NOT_STR_OP      shift and go to state 89
    COMPARE_OP      shift and go to state 86
    BIT_OR          shift and go to state 110
    BIT_XOR         shift and go to state 92
    BIT_AND         shift and go to state 102
    AND_OP          shift and go to state 105
    OR_OP           shift and go to state 96
    EQUALS_OP       shift and go to state 85
    NOT_EQUALS_OP   shift and go to state 87
    GREATER_OP      shift and go to state 112
    LESS_OP         shift and go to state 97
    GREATER_EQUAL_OP shift and go to state 100
    LESS_EQUAL_OP   shift and go to state 84
    PLUS_OP         shift and go to state 94
    MINUS_OP        shift and go to state 93
    MULTIPLICATION_OP shift and go to state 99
    DIVISION_OP     shift and go to state 90
    MODULUS_OP      shift and go to state 98
    EXPONENT_OP     shift and go to state 88
    BIT_RIGHT_SHIFT shift and go to state 109
    BIT_LEFT_SHIFT  shift and go to state 106
    CONCATENATE     shift and go to state 108
    REP_OP          shift and go to state 107
    ASSOCIATE_OP    shift and go to state 103
    RANGE_OP        shift and go to state 91
    SEARCH_MODIFY   shift and go to state 83
    SEARCH_MODIFY_NEG shift and go to state 111
    CLOSE_PARANTHESIS reduce using rule 6 (empty -> .)

    empty                          shift and go to state 289
    Marker_caselist                shift and go to state 321

state 320

    (37) caselist -> ELSE block Marker_quit .

    BLOCK_ENDS      reduce using rule 37 (caselist -> ELSE block Marker_quit .)


state 321

    (36) caselist -> CASE OPEN_PARANTHESIS expression Marker_caselist . CLOSE_PARANTHESIS block Marker_quit caselist

    CLOSE_PARANTHESIS shift and go to state 322


state 322

    (36) caselist -> CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS . block Marker_quit caselist
    (3) block -> . BLOCK_BEGIN statements BLOCK_ENDS

    BLOCK_BEGIN     shift and go to state 48

    block                          shift and go to state 323

state 323

    (36) caselist -> CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block . Marker_quit caselist
    (40) Marker_quit -> . empty
    (6) empty -> .

    CASE            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    Marker_quit                    shift and go to state 324
    empty                          shift and go to state 303

state 324

    (36) caselist -> CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit . caselist
    (36) caselist -> . CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist
    (37) caselist -> . ELSE block Marker_quit
    (38) caselist -> . empty
    (6) empty -> .

    CASE            shift and go to state 307
    ELSE            shift and go to state 310
    BLOCK_ENDS      reduce using rule 6 (empty -> .)

    caselist                       shift and go to state 325
    empty                          shift and go to state 309

state 325

    (36) caselist -> CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist .

    BLOCK_ENDS      reduce using rule 36 (caselist -> CASE OPEN_PARANTHESIS expression Marker_caselist CLOSE_PARANTHESIS block Marker_quit caselist .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS_OP in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS_OP in state 0 resolved as shift
WARNING: shift/reduce conflict for PLUS_OP in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS_OP in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS_OP in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS_OP in state 48 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 130 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 216 resolved as shift
WARNING: reduce/reduce conflict in state 246 resolved using rule (assignment -> empty)
WARNING: rejected rule (expression -> empty) in state 246
